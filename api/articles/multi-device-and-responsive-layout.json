{"title":"CSS进阶之多端适配与响应式布局","uid":"e02f7c90edc3d301451d23642501565c","slug":"multi-device-and-responsive-layout","date":"2025-03-14T15:24:21.000Z","updated":"2025-07-17T16:48:50.516Z","comments":true,"path":"api/articles/multi-device-and-responsive-layout.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/multi-device-and-responsive-layout/cover.png","content":"<h1 id=\"CSS-进阶之多端适配与响应式布局\"><a href=\"#CSS-进阶之多端适配与响应式布局\" class=\"headerlink\" title=\"CSS 进阶之多端适配与响应式布局\"></a>CSS 进阶之多端适配与响应式布局</h1><h2 id=\"一、是什么？\"><a href=\"#一、是什么？\" class=\"headerlink\" title=\"一、是什么？\"></a>一、是什么？</h2><ol>\n<li><p><strong>多端适配</strong>（Cross-platform adaptation）：指的是网站能够兼容多种设备，包括 PC、手机、平板等。而造成“不适配”的原因重点在于不同设备/端的屏幕尺寸不同，若不进行适配，可能影响页面显示/布局，造成不好的用户体验甚至网站功能无法使用。</p>\n</li>\n<li><p><strong>响应式布局</strong>是一种通过使用 CSS 构建在不同的设备上都能正常显示的网页的设计方法。它能够使网页在不同的屏幕尺寸上都能有较好的显示效果，是解决多端适配的一种有效方法。</p>\n</li>\n</ol>\n<h2 id=\"二、解决多端适配思路\"><a href=\"#二、解决多端适配思路\" class=\"headerlink\" title=\"二、解决多端适配思路\"></a>二、解决多端适配思路</h2><h3 id=\"1-多端分别适配\"><a href=\"#1-多端分别适配\" class=\"headerlink\" title=\"1. 多端分别适配\"></a>1. 多端分别适配</h3><p>针对不同设备/端，分别制作不同的网页（不同端差距较大），然后通过前端监测屏幕宽度以匹配合适的网页路由进行加载。</p>\n<ul>\n<li>适用情境：不同端页面内容差距大、无法通过页面组件的比例缩放实现布局统一的项目。如淘宝等电商平台，手机端的商品列表与 PC 端的商品列表尺寸差距太大，需要分别制作。而对于一些类似的功能可考虑代码复用或适配响应式布局。</li>\n<li>优点：灵活性强，可以最大化发挥大屏的显示优势与小屏的操作便利性。</li>\n<li>缺点：维护成本高，不同端页面需要分别制作，开发成本高。</li>\n</ul>\n<p>使用 React 实现的代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 多端分别适配核心代码示例</span><br><span class=\"line\">import React, { useEffect, useState } from 'react';</span><br><span class=\"line\">import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'; // 以 React Router 路由库做演示</span><br><span class=\"line\"></span><br><span class=\"line\">// 页面组件</span><br><span class=\"line\">const Page1 = () =&gt; &lt;div&gt;页面1（小屏端）&lt;/div&gt;;</span><br><span class=\"line\">const Page2 = () =&gt; &lt;div&gt;页面2（中屏端）&lt;/div&gt;;</span><br><span class=\"line\">const Page3 = () =&gt; &lt;div&gt;页面3（大屏端）&lt;/div&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取当前屏幕尺寸类型</span><br><span class=\"line\">function getScreenType() {</span><br><span class=\"line\">  const width = window.innerWidth;</span><br><span class=\"line\">  if (width &lt;= 768) return 1;        // 小屏</span><br><span class=\"line\">  if (width &lt;= 1024) return 2;       // 中屏</span><br><span class=\"line\">  return 3;                          // 大屏</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">const App = () =&gt; {</span><br><span class=\"line\">  const [screenType, setScreenType] = useState(getScreenType());</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(() =&gt; {</span><br><span class=\"line\">    const handleResize = () =&gt; setScreenType(getScreenType());</span><br><span class=\"line\">    window.addEventListener('resize', handleResize);</span><br><span class=\"line\">    return () =&gt; window.removeEventListener('resize', handleResize);</span><br><span class=\"line\">  }, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  // 根据屏幕类型选择路由</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;Routes&gt;</span><br><span class=\"line\">        {screenType === 1 &amp;&amp; &lt;Route path=\"*\" element={&lt;Page1 /&gt;} /&gt;}</span><br><span class=\"line\">        {screenType === 2 &amp;&amp; &lt;Route path=\"*\" element={&lt;Page2 /&gt;} /&gt;}</span><br><span class=\"line\">        {screenType === 3 &amp;&amp; &lt;Route path=\"*\" element={&lt;Page3 /&gt;} /&gt;}</span><br><span class=\"line\">        {/* 可选：默认重定向 */}</span><br><span class=\"line\">        &lt;Route path=\"*\" element={&lt;Navigate to=\"/\" /&gt;} /&gt;</span><br><span class=\"line\">      &lt;/Routes&gt;</span><br><span class=\"line\">    &lt;/Router&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">export default App;</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-响应式布局\"><a href=\"#2-响应式布局\" class=\"headerlink\" title=\"2. 响应式布局\"></a>2. 响应式布局</h3><p>使用一套代码或进行代码大量复用，通过媒体查询和百分比宽度实现不同屏幕尺寸的网页设计布局。</p>\n<ul>\n<li>适用情景：页面内容、布局、组件等都能根据不同屏幕尺寸进行自适应调整，且页面内容、布局、组件等都能通过 CSS 代码实现。</li>\n<li>优点：代码量少，维护成本低，对于临界尺寸等特殊情况也能有较好的适配效果。</li>\n<li>缺点：较为不灵活，部分特殊细节无法完全通过调节比例实现，仍需重写代码；需进行较多尺寸计算，开发难度较大。</li>\n</ul>\n<h2 id=\"三、响应式布局实现方法\"><a href=\"#三、响应式布局实现方法\" class=\"headerlink\" title=\"三、响应式布局实现方法\"></a>三、响应式布局实现方法</h2><h3 id=\"1-媒体查询\"><a href=\"#1-媒体查询\" class=\"headerlink\" title=\"1. 媒体查询\"></a>1. 媒体查询</h3><p>媒体查询是 CSS3 引入的新特性，它允许我们根据不同的设备和不同的屏幕尺寸来定义不同的样式。</p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 媒体查询 */</span></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">768px</span>) {</span><br><span class=\"line\"> <span class=\"comment\">/* 针对小屏幕的样式 */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">1024px</span>) {</span><br><span class=\"line\">  <span class=\"comment\">/* 针对中等屏幕的样式 */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">1024px</span>) {</span><br><span class=\"line\"> <span class=\"comment\">/* 针对大屏幕的样式 */</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-相对尺寸单位\"><a href=\"#2-相对尺寸单位\" class=\"headerlink\" title=\"2. 相对尺寸单位\"></a>2. 相对尺寸单位</h3><p>指使用 <code>em、rem、vw、vh、%</code> 等相对单位来设置元素的宽度、高度、字体大小等。</p>\n<p>相对单位使用及换算可参考本人博客文章：<a href=\"https://proselytecoding.github.io/post/dimmensional-units-summary\">前端尺寸单位总结</a>。</p>\n<h3 id=\"3-布局中采用比例\"><a href=\"#3-布局中采用比例\" class=\"headerlink\" title=\"3. 布局中采用比例\"></a>3. 布局中采用比例</h3><p>如flex布局用百分比宽度实现响应式布局、或者grid布局用网格比例实现响应式布局。本质上仍使使用相对尺寸单位，即相对尺寸单位可与布局结合实际运用。</p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* flex布局 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> {</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> {</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">56.25%</span>; <span class=\"comment\">/* 16:9 */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/* -------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* grid布局 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> {</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(auto-fit, <span class=\"built_in\">minmax</span>(<span class=\"number\">200px</span>, <span class=\"number\">1</span>fr));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>响应式布局已经成为现代开发不可忽视的一方面，也是一个成熟的应用项目所必备的特性，而移动端设备的尺寸多样与设备像素比不确定造成了响应式布局的复杂性，是实现的难点。<br>本文介绍了多端适配与响应式布局的概念及实现方法，希望能帮助读者入门相关概念，而具体运用还需要大量的实践和思考。<br>最后补充一下：灵活利用CSS的<code>calc()</code>函数以及JavaScript的DOM操作等知识也是实现动态监视屏幕尺寸的技巧。</p>\n","text":"CSS 进阶之多端适配与响应式布局一、是什么？ 多端适配（Cross-platform adaptation）：指的是网站能够兼容多种设备，包括 PC、手机、平...","permalink":"/post/multi-device-and-responsive-layout","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"工作","slug":"工作","count":21,"path":"api/categories/工作.json"}],"tags":[{"name":"教程","slug":"教程","count":6,"path":"api/tags/教程.json"},{"name":"CSS","slug":"CSS","count":4,"path":"api/tags/CSS.json"},{"name":"前端","slug":"前端","count":14,"path":"api/tags/前端.json"},{"name":"响应式布局","slug":"响应式布局","count":1,"path":"api/tags/响应式布局.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CSS-%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%A4%9A%E7%AB%AF%E9%80%82%E9%85%8D%E4%B8%8E%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">CSS 进阶之多端适配与响应式布局</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">一、是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E8%A7%A3%E5%86%B3%E5%A4%9A%E7%AB%AF%E9%80%82%E9%85%8D%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">二、解决多端适配思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%A4%9A%E7%AB%AF%E5%88%86%E5%88%AB%E9%80%82%E9%85%8D\"><span class=\"toc-text\">1. 多端分别适配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">2. 响应式布局</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">三、响应式布局实现方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">1. 媒体查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%9B%B8%E5%AF%B9%E5%B0%BA%E5%AF%B8%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">2. 相对尺寸单位</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B8%83%E5%B1%80%E4%B8%AD%E9%87%87%E7%94%A8%E6%AF%94%E4%BE%8B\"><span class=\"toc-text\">3. 布局中采用比例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">四、总结</span></a></li></ol></li></ol>","author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"关于'关于'","uid":"7ddf4c82aed267f815c6dc36ea759994","slug":"about-about","date":"2025-03-14T15:25:31.000Z","updated":"2025-07-17T11:05:23.166Z","comments":true,"path":"api/articles/about-about.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-stars.jpg","text":"关于’关于’由于我个人并不喜欢经常发朋友圈或者逢人便主动介绍我自己的一些想法与特点但我有的时候又很有分享欲，因此我决定开一个名为“关于”的栏目，在这里假装有位记...","permalink":"/post/about-about","photos":[],"count_time":{"symbolsCount":378,"symbolsTime":"1 mins."},"categories":[{"name":"关于","slug":"关于","count":1,"path":"api/categories/关于.json"}],"tags":[{"name":"生活","slug":"生活","count":2,"path":"api/tags/生活.json"},{"name":"关于","slug":"关于","count":2,"path":"api/tags/关于.json"},{"name":"分享","slug":"分享","count":1,"path":"api/tags/分享.json"},{"name":"随笔","slug":"随笔","count":3,"path":"api/tags/随笔.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CSS基础之flex与grid布局","uid":"79a90e787e3c9f8206ec85badb1d113a","slug":"css-flex-and-grid-layout","date":"2025-03-14T15:21:01.000Z","updated":"2025-07-17T16:27:53.992Z","comments":true,"path":"api/articles/css-flex-and-grid-layout.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-css.png","text":"更新中……敬请期待…… ","permalink":"/post/css-flex-and-grid-layout","photos":[],"count_time":{"symbolsCount":12,"symbolsTime":"1 mins."},"categories":[{"name":"工作","slug":"工作","count":21,"path":"api/categories/工作.json"}],"tags":[{"name":"教程","slug":"教程","count":6,"path":"api/tags/教程.json"},{"name":"CSS","slug":"CSS","count":4,"path":"api/tags/CSS.json"},{"name":"flex","slug":"flex","count":1,"path":"api/tags/flex.json"},{"name":"grid","slug":"grid","count":1,"path":"api/tags/grid.json"},{"name":"前端","slug":"前端","count":14,"path":"api/tags/前端.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}