{"title":"学过React还能不会Zustand?","uid":"0ffaa1f7ae518731edb051d9250ce9ae","slug":"zustand-tutorial","date":"2025-03-18T15:25:50.000Z","updated":"2025-07-17T11:05:53.036Z","comments":true,"path":"api/articles/zustand-tutorial.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/学过React还能不会Zustand.png","content":"<h2 id=\"学过-React-还能不会-Zustand\"><a href=\"#学过-React-还能不会-Zustand\" class=\"headerlink\" title=\"学过 React 还能不会 Zustand ?\"></a>学过 React 还能不会 Zustand ?</h2><p>意思是Zustand上手难度低、学会React就能用，简洁高效，尤其适合对于Redux的复杂有些恐惧的初学者。</p>\n<h3 id=\"什么是状态管理？\"><a href=\"#什么是状态管理？\" class=\"headerlink\" title=\"什么是状态管理？\"></a>什么是状态管理？</h3><p>为了防止初学者对状态管理的概念理解不够深入，而以为只是 <code>useState</code> 或者 <code>useReducer</code> 这样的钩子函数，下面再阐释一下相关概念：</p>\n<ul>\n<li><strong>状态管理</strong>：指的是应用中不同组件之间共享的状态，如用户输入、网络请求、应用数据等，广义上也可指对于应用中的变量、数据等状态等的管理。</li>\n<li><strong>状态管理的作用</strong>：主要是为了解决组件之间<strong>共享</strong>状态的问题，让组件之间的数据共享更加简单、可控。</li>\n<li><strong>状态管理库</strong>：上文提到的 <code>useState</code> 和 <code>useReducer</code> 只能实现<em>单一文件</em>内的状态管理，而无法实现跨文件共享状态。此时就需要使用状态管理库，如 Redux、MobX、Zustand 等，来实现<strong>跨文件共享状态</strong>或者<strong>全局状态管理</strong>。</li>\n</ul>\n<h3 id=\"什么是-Zustand-？\"><a href=\"#什么是-Zustand-？\" class=\"headerlink\" title=\"什么是 Zustand ？\"></a>什么是 Zustand ？</h3><p>Zustand 是一个<strong>轻量级</strong>的状态管理库，它可以帮助我们管理 <strong>React</strong> 应用中的状态，让我们在React组件中轻松地共享状态。虽然其发展历史比较短，但已经成为 React 生态中最流行的状态管理库之一，<strong>广受欢迎</strong>，在GitHub上的仓库已有超过 <strong>50k</strong> 的 <strong>star</strong><span class=\"github-emoji\"><span>⭐</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span>！</p>\n<p>Zustand 的核心思想是使用类似<strong>钩子函数</strong>来管理状态，它可以让我们在函数组件中管理状态，而无需使用class组件。因此这也降低了学习成本，同时使Zustand的语法更加<strong>简洁</strong>明了。</p>\n<p>以下内容将对 Zustand 进行简单的上手指导，相信您在认真阅读后一定能轻松上手这款实用的状态管理库，但同时它的一些复杂的特性还需要您后续学习。本文档参考 <a href=\"https://zustand-cn.js.org/\">Zustand 官方文档</a>完成，欢迎您前往官网学习。</p>\n<h3 id=\"如何上手Zustand？\"><a href=\"#如何上手Zustand？\" class=\"headerlink\" title=\"如何上手Zustand？\"></a>如何上手Zustand？</h3><p>Zustand 的使用非常简单，我们只需要安装 Zustand 库，然后在 React 组件中引入 useStore 函数，并在函数组件中使用 useStore 来获取状态。</p>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h4><figure class=\"highlight markdown\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## NPM</span></span><br><span class=\"line\">npm install zustand</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## Yarn</span></span><br><span class=\"line\">yarn add zustand</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"2-创建-Store\"><a href=\"#2-创建-Store\" class=\"headerlink\" title=\"2. 创建 Store\"></a>2. 创建 Store</h4><p>您的 <code>store</code> 就像一个 <code>Hook</code>！你可以把任何东西放进去：原始值、对象、函数。<code>set</code> 函数会合并状态。</p>\n<p><code>create</code> 是用来创建的方法，而 <code>set</code> 方法则用来更新状态。</p>\n<p><em>注意：您在初始化函数中定义的状态变量都应该具有初始值或者对应的函数，而不能为未定义状态。</em></p>\n<figure class=\"highlight jsx\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> { create } <span class=\"keyword\">from</span> <span class=\"string\">'zustand'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useStore = <span class=\"title function_\">create</span>(<span class=\"function\">(<span class=\"params\">set</span>) =&gt;</span> ({</span><br><span class=\"line\">  <span class=\"attr\">bears</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">increasePopulation</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">set</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> ({ <span class=\"attr\">bears</span>: state.<span class=\"property\">bears</span> + <span class=\"number\">1</span> })),</span><br><span class=\"line\">  <span class=\"attr\">removeAllBears</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">set</span>({ <span class=\"attr\">bears</span>: <span class=\"number\">0</span> }),</span><br><span class=\"line\">  <span class=\"attr\">updateBears</span>: <span class=\"function\">(<span class=\"params\">newBears</span>) =&gt;</span> <span class=\"title function_\">set</span>({ <span class=\"attr\">bears</span>: newBears }),</span><br><span class=\"line\">}))</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"3-绑定组件\"><a href=\"#3-绑定组件\" class=\"headerlink\" title=\"3. 绑定组件\"></a>3. 绑定组件</h4><p>您可以在任何地方使用钩子，无需提供 Provider。选择您的状态，当状态改变时，使用该状态的组件将重新渲染。</p>\n<p>使用方法即在函数内对状态变量进行实例化，使用 <code>useStore</code> 钩子声明为 <code>const xxx = useStore((state) =&gt; state.xxx)</code>。之后即可在函数内使用状态变量或者调用对应的 <code>store</code> 中的方法来更新状态值。</p>\n<figure class=\"highlight jsx\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> { <span class=\"title class_\">Button</span>, <span class=\"title class_\">Space</span> } <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> { create } <span class=\"keyword\">from</span> <span class=\"string\">'zustand'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useStore = <span class=\"title function_\">create</span>(<span class=\"function\">(<span class=\"params\">set</span>) =&gt;</span> ({</span><br><span class=\"line\">  <span class=\"attr\">bears</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">increasePopulation</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">set</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> ({ <span class=\"attr\">bears</span>: state.<span class=\"property\">bears</span> + <span class=\"number\">1</span> })),</span><br><span class=\"line\">  <span class=\"attr\">removeAllBears</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">set</span>({ <span class=\"attr\">bears</span>: <span class=\"number\">0</span> }),</span><br><span class=\"line\">  <span class=\"attr\">updateBears</span>: <span class=\"function\">(<span class=\"params\">newBears</span>) =&gt;</span> <span class=\"title function_\">set</span>({ <span class=\"attr\">bears</span>: newBears }),</span><br><span class=\"line\">}))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BearCounter</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> bears = <span class=\"title function_\">useStore</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.<span class=\"property\">bears</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>{bears} around here ...<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Controls</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> bears = <span class=\"title function_\">useStore</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.<span class=\"property\">bears</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> increasePopulation = <span class=\"title function_\">useStore</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.<span class=\"property\">increasePopulation</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> removeAllBears = <span class=\"title function_\">useStore</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.<span class=\"property\">removeAllBears</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Space</span> <span class=\"attr\">size</span>=<span class=\"string\">\"large\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">{increasePopulation}</span>&gt;</span>one up<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      {bears &gt; 0 &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> <span class=\"attr\">danger</span> <span class=\"attr\">onClick</span>=<span class=\"string\">{removeAllBears}</span>&gt;</span>clear<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span>}</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Space</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"title function_\">default</span> () =&gt; {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">BearCounter</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Controls</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"4-多变量对象状态更新\"><a href=\"#4-多变量对象状态更新\" class=\"headerlink\" title=\"4. 多变量对象状态更新\"></a>4. 多变量对象状态更新</h4><p>您可以在 <code>store</code> 中将一个对象进行状态管理，此时可能需要同时更新该对象中的若干属性，建议您在 <code>set</code> 方法中使用 <code>...</code> 扩展运算符，可以便捷地进行状态更新。</p>\n<figure class=\"highlight jsx\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"title function_\">set</span>(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> ({ ...state, <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> + <span class=\"number\">1</span> })) <span class=\"comment\">// 在这个例子中，前后状态中除了 `count` 这一个属性更新外，其余属性保持不变</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"5-TypeScript-指南\"><a href=\"#5-TypeScript-指南\" class=\"headerlink\" title=\"5. TypeScript 指南\"></a>5. TypeScript 指南</h4><p>您必须在 <code>create</code> 方法后面加上类型声明，即 <code>create&lt;T&gt;()(...)</code>，而非 <code>create(...)</code>，其中 <code>T</code> 是状态类型以进行注释。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Zustand 是一个非常适合初学者的状态管理库，它简洁的语法可以帮助我们以较低的学习成本在 React 中进行状态管理。<br>以上介绍了 Zustand 的一些简单语法，希望能帮助您快速上手。复杂语法及详细语法请参考<a href=\"https://zustand-cn.js.org/\">Zustand 官方文档</a>。</p>\n<p>希望本文对您有所帮助，祝您学习与生活愉快！<span class=\"github-emoji\"><span>😘</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span><span class=\"github-emoji\"><span>✨</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span><span class=\"github-emoji\"><span>💖</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f496.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span></p>\n","text":"学过 React 还能不会 Zustand ?意思是Zustand上手难度低、学会React就能用，简洁高效，尤其适合对于Redux的复杂有些恐惧的初学者。 什...","permalink":"/post/zustand-tutorial","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"工作","slug":"工作","count":14,"path":"api/categories/工作.json"}],"tags":[{"name":"前端","slug":"前端","count":8,"path":"api/tags/前端.json"},{"name":"教程","slug":"教程","count":6,"path":"api/tags/教程.json"},{"name":"Zustand","slug":"Zustand","count":1,"path":"api/tags/Zustand.json"},{"name":"React","slug":"React","count":1,"path":"api/tags/React.json"},{"name":"状态管理","slug":"状态管理","count":1,"path":"api/tags/状态管理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%A6%E8%BF%87-React-%E8%BF%98%E8%83%BD%E4%B8%8D%E4%BC%9A-Zustand\"><span class=\"toc-text\">学过 React 还能不会 Zustand ?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%EF%BC%9F\"><span class=\"toc-text\">什么是状态管理？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-Zustand-%EF%BC%9F\"><span class=\"toc-text\">什么是 Zustand ？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%B8%8A%E6%89%8BZustand%EF%BC%9F\"><span class=\"toc-text\">如何上手Zustand？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1. 安装</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BA-Store\"><span class=\"toc-text\">2. 创建 Store</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%BB%91%E5%AE%9A%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">3. 绑定组件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%A4%9A%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">4. 多变量对象状态更新</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-TypeScript-%E6%8C%87%E5%8D%97\"><span class=\"toc-text\">5. TypeScript 指南</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"关于'名字'","uid":"7b8bf44f2423c96f4d6c41f38573648a","slug":"about-name","date":"2025-03-21T15:22:02.000Z","updated":"2025-07-17T11:05:26.205Z","comments":true,"path":"api/articles/about-name.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-stars.jpg","text":"关于’名字’名字，一张名片罢了。 “从父母取的名字里可以看出一个人的背景希冀，从自己取的别名中可以看出一个人的心理性格。” 这是一种比较普遍认可的心理学观点。 ...","permalink":"/post/about-name","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"生活","slug":"生活","count":2,"path":"api/categories/生活.json"}],"tags":[{"name":"关于","slug":"关于","count":2,"path":"api/tags/关于.json"},{"name":"名字","slug":"名字","count":1,"path":"api/tags/名字.json"},{"name":"随笔","slug":"随笔","count":3,"path":"api/tags/随笔.json"},{"name":"生活","slug":"生活","count":2,"path":"api/tags/生活.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"关于'关于'","uid":"7ddf4c82aed267f815c6dc36ea759994","slug":"about-about","date":"2025-03-14T15:25:31.000Z","updated":"2025-07-17T11:05:23.166Z","comments":true,"path":"api/articles/about-about.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-stars.jpg","text":"关于’关于’由于我个人并不喜欢经常发朋友圈或者逢人便主动介绍我自己的一些想法与特点但我有的时候又很有分享欲，因此我决定开一个名为“关于”的栏目，在这里假装有位记...","permalink":"/post/about-about","photos":[],"count_time":{"symbolsCount":378,"symbolsTime":"1 mins."},"categories":[{"name":"关于","slug":"关于","count":1,"path":"api/categories/关于.json"}],"tags":[{"name":"关于","slug":"关于","count":2,"path":"api/tags/关于.json"},{"name":"随笔","slug":"随笔","count":3,"path":"api/tags/随笔.json"},{"name":"生活","slug":"生活","count":2,"path":"api/tags/生活.json"},{"name":"分享","slug":"分享","count":1,"path":"api/tags/分享.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}