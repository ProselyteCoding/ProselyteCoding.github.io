{"title":"JS高级-5-面向对象编程-1","uid":"b3a5751f5eb5e3e9873a3f7c71f06e93","slug":"js-premier-5-object-oriented-programming-1","date":"2025-07-28T10:18:47.000Z","updated":"2025-07-31T06:44:13.165Z","comments":true,"path":"api/articles/js-premier-5-object-oriented-programming-1.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","content":"<h1 id=\"JS高级-5-面向对象编程-1\"><a href=\"#JS高级-5-面向对象编程-1\" class=\"headerlink\" title=\"JS高级-5-面向对象编程-1\"></a>JS高级-5-面向对象编程-1</h1><h2 id=\"一、面向对象的理解\"><a href=\"#一、面向对象的理解\" class=\"headerlink\" title=\"一、面向对象的理解\"></a>一、面向对象的理解</h2><p>面向对象是现实的抽象方式。对象是 JavaScript 中一个非常重要的概念，因为对象可以将多个相关联的数据封装到一起，更好地描述一个事物。</p>\n<p>用对象来描述事物，更有利于我们将现实的事物抽离成代码中的某个数据结构。</p>\n<p>JavaScript 支持多种编程范式，包括函数式编程和面向对象编程（OOP）。</p>\n<ul>\n<li>对象被设计成一组属性的无序组合，像是一个哈希表，由 key 和 value 组成。</li>\n<li>key 是一个标识符的名称，value 可以是任意类型的数据，也可以是其他对象或者函数。</li>\n<li>如果一个值是一个函数，那么我们可以称之为对象的方法。</li>\n</ul>\n<p><strong>如何创建一个对象：</strong></p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(); <span class=\"comment\">// 使用 Object 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = {}; <span class=\"comment\">// 使用对象字面量语法，是更加主流的方法</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"二、对对象属性的操作\"><a href=\"#二、对对象属性的操作\" class=\"headerlink\" title=\"二、对对象属性的操作\"></a>二、对对象属性的操作</h2><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Proselyte'</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">}; <span class=\"comment\">// 对象示例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问属性</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>); <span class=\"comment\">// Proselyte</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj[<span class=\"string\">'age'</span>]); <span class=\"comment\">// 18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改属性</span></span><br><span class=\"line\">obj.<span class=\"property\">age</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除属性</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.<span class=\"property\">age</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加属性</span></span><br><span class=\"line\">obj.<span class=\"property\">address</span> = <span class=\"string\">'123 Main St'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历属性</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">': '</span> + obj[key]);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"三、对属性操作的控制\"><a href=\"#三、对属性操作的控制\" class=\"headerlink\" title=\"三、对属性操作的控制\"></a>三、对属性操作的控制</h2><p>如果我们想要对一个属性进行比较精准的控制，那么我们就使用属性描述符，使用 Object.defineProperty() 方法。<br>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<p>函数接收三个参数：</p>\n<ul>\n<li>第一个参数是要操作的对象。</li>\n<li>第二个参数是属性名。</li>\n<li>第三个参数是一个描述符对象，包含属性的特性。</li>\n</ul>\n<p>返回值为传递给函数的对象。</p>\n<p><strong>属性描述符分类：</strong></p>\n<ul>\n<li><strong>数据属性</strong>（Data Properties）描述符（Descriptor）：<ul>\n<li>value：属性的值。默认为<code>undefined</code>。</li>\n<li>writable：一个布尔值，表示属性是否可以被修改。直接定义默认为<code>true</code>，通过属性描述符定义默认为<code>false</code>。</li>\n<li>enumerable：一个布尔值，表示属性是否可以被枚举（遍历）。直接定义默认为<code>true</code>，通过属性描述符定义默认为<code>false</code>。</li>\n<li>configurable：一个布尔值，表示属性是否可以被删除或修改。直接定义默认为<code>true</code>，通过属性描述符定义默认为<code>false</code>。该属性不可以被重定义。</li>\n</ul>\n</li>\n<li><strong>存取属性</strong>（Accessor Properties）描述符（Descriptor）：<ul>\n<li>get：一个函数，当访问属性时调用。默认值为<code>undefined</code>。</li>\n<li>set：一个函数，当设置属性时调用。默认值为<code>undefined</code>。</li>\n<li>enumerable：一个布尔值，表示属性是否可以被枚举（遍历）。直接定义默认为<code>true</code>，通过属性描述符定义默认为<code>false</code>。</li>\n<li>configurable：一个布尔值，表示属性是否可以被删除或修改。直接定义默认为<code>true</code>，通过属性描述符定义默认为<code>false</code>。该属性不可以被重定义。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需求：对属性进行操作时有一些限制</span></span><br><span class=\"line\"><span class=\"comment\">// 限制：不允许某属性被修改/删除/遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object.defineProperty() 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据属性描述符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = {};</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(</span><br><span class=\"line\">obj1, <span class=\"comment\">// 传入对象</span></span><br><span class=\"line\"><span class=\"string\">'name'</span>, <span class=\"comment\">//属性名，如果已有则修改，没有则添加</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">'Proselyte'</span>, <span class=\"comment\">// 属性值</span></span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不允许修改</span></span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不允许遍历</span></span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不允许删除</span></span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存取属性描述符</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 隐藏某一个私有属性不希望直接被外界使用和赋值</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 希望截获某一个属性来访问和设置值的过程时</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = {};</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(</span><br><span class=\"line\">obj2, <span class=\"comment\">// 传入对象</span></span><br><span class=\"line\"><span class=\"string\">'age'</span>, <span class=\"comment\">// 属性名</span></span><br><span class=\"line\">{ <span class=\"comment\">// 存取描述符</span></span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 此处可以执行更多操作</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">18</span>; <span class=\"comment\">// 获取属性值</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 此处可以执行更多操作</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'设置年龄为：'</span> + value); <span class=\"comment\">// 设置属性值时的操作</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 可以遍历</span></span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 可以删除或修改</span></span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义多个属性描述符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">_age</span>: <span class=\"number\">18</span>, <span class=\"comment\">// 私有属性(通常以 _ 开头，但 JS 中没有真正严格意义上的私有属性)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 另一种写法</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">age</span>(<span class=\"params\">value</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'设置年龄为：'</span> + value);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_age</span> = value;</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">age</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_age</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperties</span>(obj, {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: {</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"string\">'Proselyte'</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"attr\">age</span>: {</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">18</span>;</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'设置年龄为：'</span> + value);</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取某一个特性属性的属性描述符</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnProjectDescriptor</span>(obj, <span class=\"string\">\"name\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取对象所有属性的属性描述符</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptors</span>(obj));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object的方法对对象的限制</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Proselyte'</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 禁止扩展属性</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">preventExtensions</span>(obj); <span class=\"comment\">// 禁止扩展属性，不能添加新属性，但可以修改和删除现有属性</span></span><br><span class=\"line\">obj.<span class=\"property\">address</span> = <span class=\"string\">'123 Main St'</span>; <span class=\"comment\">// 无效操作，不会报错，但不会添加</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 冻结属性（Writable和 Configurable 都为 false）</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>(obj); <span class=\"comment\">// 冻结对象，不能修改、删除或添加属性</span></span><br><span class=\"line\">obj.<span class=\"property\">name</span> = <span class=\"string\">'New Name'</span>; <span class=\"comment\">// 无效操作，不会报错，但不会修改</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.<span class=\"property\">age</span>; <span class=\"comment\">// 无效操作，不会报错，但不会删除</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"四、创建对象的方案\"><a href=\"#四、创建对象的方案\" class=\"headerlink\" title=\"四、创建对象的方案\"></a>四、创建对象的方案</h2><p>创建对象有多种方案，各有优缺点，适用于不同的场景。</p>\n<h3 id=\"对象字面量\"><a href=\"#对象字面量\" class=\"headerlink\" title=\"对象字面量\"></a>对象字面量</h3><p>适用于少量对象的创建，简单直接。但不适合创建大量对象或需要复用的情况。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象字面量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Proselyte'</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>适合创建多个相似对象，但无法区分不同具体类型的对象。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 工厂模式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span>(<span class=\"params\">name, age</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> {</span><br><span class=\"line\">    <span class=\"attr\">name</span>: name,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: age,</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">'Proselyte'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">'Coder'</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person3 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">'Developer'</span>, <span class=\"number\">22</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>通过 new 关键字调用函数，那么这个函数就是一个构造函数了。适合创建多个相似对象，并且可以通过 prototype 共享方法和属性。一般约定将构造函数的首字母大写。</p>\n<p>如果一个函数被使用 new 关键字调用，它会执行如下操作：</p>\n<ol>\n<li>在内存中创建一个新的空对象</li>\n<li>将这个空对象的原型指向构造函数的 prototype 属性</li>\n<li>将这个空对象赋值给 this</li>\n<li>执行函数体中的代码</li>\n<li>如果函数没有显式返回一个非空对象，则返回 this</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数模式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'Hello, my name is '</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">'Proselyte'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1); <span class=\"comment\">// Person { name: 'Proselyte', age: 18, sayHello: [Function] }</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">'Coder'</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1.<span class=\"property\">sayHello</span> === p2.<span class=\"property\">sayHello</span>); <span class=\"comment\">// false，每个实例都有自己的 sayHello 方法</span></span><br><span class=\"line\"><span class=\"comment\">// 但是其实没有必要，这样会浪费内存空间</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"对象的原型\"><a href=\"#对象的原型\" class=\"headerlink\" title=\"对象的原型\"></a>对象的原型</h3><p>JavaScript 中的对象是基于原型的。每个对象都有一个内部属性 [[Prototype]]，指向另一个对象，这个对象被称为原型。</p>\n<p>原型可以通过 <code>Object.getPrototypeOf()</code> 方法获取，也可以通过 <code>__proto__</code> 属性访问。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象的原型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Proselyte'</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个对象中都有一个 [[prototype]] 属性，这个属性称为对象的原型（隐式原型）</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(obj)); <span class=\"comment\">// {}</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">__proto__</span>); <span class=\"comment\">// {}</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数的原型</span></span><br><span class=\"line\"><span class=\"comment\">// 函数也是对象，它也有一个 [[prototype]] 属性</span></span><br><span class=\"line\"><span class=\"comment\">// 函数还多了一个原型属性 prototype（显式原型）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title class_\">Foo</span> {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// true，新对象的[[prototype]] 属性被赋值为构造函数的 prototype 属性</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-5-object-oriented-programming-1/1.png\" alt=\"创建对象的内存表现\"></p>\n<p>当我们从对象中获取一个属性时，它会触发 <code>[[get]]</code> 操作。</p>\n<ol>\n<li>在当前对象中去查找对应的属性，如果找到就直接使用。</li>\n<li>如果没有找到，就会沿着它的原型链向上查找。</li>\n</ol>\n<p>prototype.constructor = 构造函数本身</p>\n<p><strong>对原型的修改：</strong></p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改 prototype 的部分属性</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'Hello, my name is '</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接修改整个 prototype 对象</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = {</span><br><span class=\"line\">  <span class=\"attr\">constructor</span>: <span class=\"title class_\">Person</span>, <span class=\"comment\">// 可以在替换时就加上 constructor 属性</span></span><br><span class=\"line\">  <span class=\"attr\">sayHello</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'Hello, my name is '</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 真实开发中添加 constructor 属性</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">'constructor'</span>, {</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"title class_\">Person</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>原型和构造函数：</strong></p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将没有必要重复构造的函数的属性添加到原型中，而一般属性仍然添加到实例中</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name; <span class=\"comment\">// 实例属性</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age; <span class=\"comment\">// 实例属性</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在原型上添加方法，而不是每个对象都有自己的方法</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'Hello, my name is '</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>面向对象编程是 JavaScript 中一个重要的编程范式，通过对象来组织代码和数据，可以更好地抽象化定义现实世界的事物。</p>\n<p>本文介绍了对象的基本概念、属性操作、属性描述符以及创建对象的不同方式。最重点的是创建对象方法中的原型和构造函数的使用。</p>\n<p>面向对象的第二篇将继续深入探讨原型链、继承以及类等其他面向对象编程的概念。</p>\n<p>参考内容：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1gYpmeKEvt?spm_id_from=333.788.videopod.episodes&amp;vd_source=13be13cef40f3972c65f0af98bf87ea2\">coderwhy 最强 JavaScript 高级教程 57-69 集</a></li>\n</ul>\n","text":"JS高级-5-面向对象编程-1一、面向对象的理解面向对象是现实的抽象方式。对象是 JavaScript 中一个非常重要的概念，因为对象可以将多个相关联的数据封装...","permalink":"/post/js-premier-5-object-oriented-programming-1","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"工作","slug":"工作","count":21,"path":"api/categories/工作.json"}],"tags":[{"name":"技术","slug":"技术","count":16,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":14,"path":"api/tags/前端.json"},{"name":"JavaScript","slug":"JavaScript","count":6,"path":"api/tags/JavaScript.json"},{"name":"笔记","slug":"笔记","count":7,"path":"api/tags/笔记.json"},{"name":"进阶","slug":"进阶","count":6,"path":"api/tags/进阶.json"},{"name":"面向对象编程","slug":"面向对象编程","count":2,"path":"api/tags/面向对象编程.json"},{"name":"OOP","slug":"OOP","count":2,"path":"api/tags/OOP.json"},{"name":"原型","slug":"原型","count":1,"path":"api/tags/原型.json"},{"name":"构造函数","slug":"构造函数","count":1,"path":"api/tags/构造函数.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JS%E9%AB%98%E7%BA%A7-5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-1\"><span class=\"toc-text\">JS高级-5-面向对象编程-1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">一、面向对象的理解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">二、对对象属性的操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%AF%B9%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C%E7%9A%84%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">三、对属性操作的控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">四、创建对象的方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F\"><span class=\"toc-text\">对象字面量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">工厂模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%9E%8B\"><span class=\"toc-text\">对象的原型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">五、总结</span></a></li></ol></li></ol>","author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"React钩子函数-1-useState和useReducer","uid":"2c9152db5ab3b447eb6957f90810b68a","slug":"react-hook-1-usestate-usereducer","date":"2025-07-30T02:52:16.000Z","updated":"2025-08-01T16:25:39.138Z","comments":true,"path":"api/articles/react-hook-1-usestate-usereducer.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-react.png","text":"React钩子函数-1-useState和useReducer一、背景与概述这两个钩子函数归纳为 State Hook。 状态帮助组件 “记住”用户输入的信息。...","permalink":"/post/react-hook-1-usestate-usereducer","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"工作","slug":"工作","count":21,"path":"api/categories/工作.json"}],"tags":[{"name":"技术","slug":"技术","count":16,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":14,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":7,"path":"api/tags/笔记.json"},{"name":"React","slug":"React","count":2,"path":"api/tags/React.json"},{"name":"React Hook","slug":"React-Hook","count":1,"path":"api/tags/React-Hook.json"},{"name":"钩子函数","slug":"钩子函数","count":1,"path":"api/tags/钩子函数.json"},{"name":"useState","slug":"useState","count":1,"path":"api/tags/useState.json"},{"name":"useReducer","slug":"useReducer","count":1,"path":"api/tags/useReducer.json"},{"name":"官方文档","slug":"官方文档","count":1,"path":"api/tags/官方文档.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JS高级-4-函数式编程","uid":"f6257aade18eefed38cc06dca4a6019e","slug":"js-premier-4-functional-programming","date":"2025-07-27T14:12:36.000Z","updated":"2025-07-28T10:13:56.231Z","comments":true,"path":"api/articles/js-premier-4-functional-programming.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","text":"JS高级-4-函数式编程函数式编程（Functional Programming，简称FP）是一种编程范式，它强调使用纯函数、避免副作用、采用不可变数据以及函数...","permalink":"/post/js-premier-4-functional-programming","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"工作","slug":"工作","count":21,"path":"api/categories/工作.json"}],"tags":[{"name":"技术","slug":"技术","count":16,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":14,"path":"api/tags/前端.json"},{"name":"JavaScript","slug":"JavaScript","count":6,"path":"api/tags/JavaScript.json"},{"name":"笔记","slug":"笔记","count":7,"path":"api/tags/笔记.json"},{"name":"进阶","slug":"进阶","count":6,"path":"api/tags/进阶.json"},{"name":"函数式编程","slug":"函数式编程","count":1,"path":"api/tags/函数式编程.json"},{"name":"纯函数","slug":"纯函数","count":1,"path":"api/tags/纯函数.json"},{"name":"柯里化","slug":"柯里化","count":1,"path":"api/tags/柯里化.json"},{"name":"组合函数","slug":"组合函数","count":1,"path":"api/tags/组合函数.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}