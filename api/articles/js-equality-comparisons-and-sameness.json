{"title":"JavaScript中的相等比较和相同","uid":"fb6d1bb37eb27e9281171cb6130d8351","slug":"js-equality-comparisons-and-sameness","date":"2025-08-26T10:02:07.000Z","updated":"2025-09-13T11:24:51.313Z","comments":true,"path":"api/articles/js-equality-comparisons-and-sameness.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","content":"<h1 id=\"JavaScript中的相等比较和相同\"><a href=\"#JavaScript中的相等比较和相同\" class=\"headerlink\" title=\"JavaScript中的相等比较和相同\"></a>JavaScript中的相等比较和相同</h1><p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-equality-comparisons-and-sameness/1.png\" alt=\"宽松相等图\"></p>\n<p>曾在JS的社区中看到这样一张图以及其制作的一些梗图，奇奇怪怪的相等性比较让人摸不着头脑，似乎是JS“灵活”、“不严谨”的体现，而实际上，“存在必有因”，所有结果背后都是遵循一定规则计算得出的结果，是类似“纯函数”的特点、反复计算的结果相同而非随机的，本文将“究其因、探其果”，讨论JS中的<strong>相等比较与相同</strong>问题。</p>\n<p>JavaScript 提供三种不同的值比较运算：</p>\n<ul>\n<li><code>===</code>——严格相等（三个等号）</li>\n<li><code>==</code>——宽松相等（两个等号）</li>\n<li><code>Object.is()</code></li>\n</ul>\n<p>选择哪种运算取决于你需要什么样的比较。简单来说：</p>\n<ul>\n<li>在比较两个操作数时，双等号（<code>==</code>）将执行<strong>类型转换</strong>，并且会按照 IEEE 754 标准对 <code>NaN</code>、<code>-0</code> 和 <code>+0</code> 进行<strong>特殊处理</strong>（故 <code>NaN != NaN</code>，且 <code>-0 == +0</code>）；</li>\n<li>三等号（<code>===</code>）做的比较与双等号相同（包括对 <code>NaN</code>、<code>-0</code> 和 <code>+0</code> 的<strong>特殊处理</strong>）但不进行类型转换；如果类型不同，则返回 <code>false</code>；</li>\n<li><code>Object.is()</code> 既不进行类型转换，也不对 <code>NaN</code>、<code>-0</code> 和 <code>+0</code> 进行特殊处理（这使它和 === 在除了那些特殊数字值之外的情况具有相同的表现）。</li>\n</ul>\n<p>上述三个操作分别与 JavaScript 四个相等算法中的三个相对应：</p>\n<ul>\n<li>IsLooselyEqual：==</li>\n<li>IsStrictlyEqual：===</li>\n<li>SameValue：Object.is()</li>\n<li>SameValueZero：被许多内置运算使用</li>\n</ul>\n<p>请注意，这些算法的区别都与它们<strong>对原始值的处理</strong>有关；它们都不会比较参数是否具有<strong>概念上相似的结构</strong> 。对于任何具有相同的结构、但不是同一对象的非原始类型对象 <code>x</code> 和 <code>y</code> ，上述所有形式都将计算为 <code>false</code>。</p>\n<h2 id=\"使用-进行严格相等比较\"><a href=\"#使用-进行严格相等比较\" class=\"headerlink\" title=\"使用 === 进行严格相等比较\"></a>使用 === 进行严格相等比较</h2><p>严格相等比较两个值是否相等。两个被比较的值在比较前都不进行隐式转换。如果两个被比较的值具有不同的类型，则认为这两个值不相等。如果两个被比较的值类型相同，值也相同，并且都不是 number 类型时，则认为这两个值相等。最后，如果两个值都是 number 类型，当两个都不是 <code>NaN</code>，并且数值相同，或是两个值分别为 <code>+0</code> 和 <code>-0</code> 时，两个值被认为是相等的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>流程图的表示：类型相同 -&gt; 值相同 -&gt; 不是 number 类型 -&gt; 都不是 NaN -&gt; 数值相同 或 +0 和 -0</p></blockquote>\n<p>下面进行一下知识检测：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// === 检测练习</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num === num);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str === str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num === obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num === str);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === str);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> === <span class=\"literal\">undefined</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === <span class=\"literal\">undefined</span>);</span><br><span class=\"line\"><span class=\"comment\">// 答案在`检测答案`部分</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>使用严格相等几乎总是正确的选择。对于除了数字之外的值，严格相等有着明确的语义：<strong>值仅与它自身相等</strong>。对于数字，严格相等使用稍微不同的语义处理两个特殊情况：第一个情况是，浮点数 <code>0</code> 是不分正负的。区分 <code>+0</code> 和 <code>-0</code> 在解决一些特定的数学问题时区分正负是必要的，但是大部分情况下我们并不用关心。严格相等认为这两个值是全等的。第二个情况是，浮点数包含了 <code>NaN</code> 值，用来表示某些定义不明确的数学问题的解，例如：正无穷加负无穷。严格相等认为 <code>NaN</code> 与其他任何值都不全等，包括它自己。（等式 <code>(x !== x)</code> 成立的唯一情况是 <code>x</code> 的值为 <code>NaN</code>）</p>\n<p>除了 <code>===</code> 之外，<strong>数组索引查找方法</strong>也使用严格相等，包括 <code>Array.prototype.indexOf()</code>、<code>Array.prototype.lastIndexOf()</code>、<code>TypedArray.prototype.index()</code>、<code>TypedArray.prototype.lastIndexOf()</code> 和 <code>case</code> 匹配。这意味着你不能使用 <code>indexOf(NaN)</code> 查找数组中 <code>NaN</code> 值的索引，也不能将 <code>NaN</code> 用作 <code>case</code> 值在 <code>switch</code> 语句中匹配任何内容。</p>\n<h2 id=\"使用-进行宽松相等比较\"><a href=\"#使用-进行宽松相等比较\" class=\"headerlink\" title=\"使用 == 进行宽松相等比较\"></a>使用 == 进行宽松相等比较</h2><p>宽松相等是<strong>对称</strong>的：对于任何 <code>A</code> 和 <code>B</code> 的值，<code>A == B</code> 总是与 <code>B == A</code> 具有相同的语义（除了转换的应用顺序）。可以说其满足“<strong>交换律</strong>”。使用 <code>==</code> 执行宽松相等的行为如下：</p>\n<ol>\n<li>如果操作数具有<strong>相同的类型</strong>，则按如下方式进行比较：<ul>\n<li>对象（Object）：仅当两个操作数引用同一个对象时返回 <code>true</code>。</li>\n<li>字符串（String）：仅当两个操作数具有相同的字符且顺序相同时返回 <code>true</code>。</li>\n<li>数字（Number）：如果两个操作数的值相同，则返回 <code>true</code>。<code>+0</code> 和 <code>-0</code> 被视为相同的值。如果任何一个操作数是 <code>NaN</code>，返回 <code>false</code>；所以，<code>NaN</code> 永远不宽松相等于 <code>NaN</code>。</li>\n<li>布尔值（Boolean）：仅当操作数都为 <code>true</code> 或都为 <code>false</code> 时返回 <code>true</code>。</li>\n<li>大整型（BigInt）：仅当两个操作数的值相同时返回 <code>true</code>。</li>\n<li>符号（Symbol）：仅当两个操作数引用相同的符号时返回 <code>true</code>。</li>\n</ul>\n</li>\n<li>如果其中一个操作数为 <code>null</code> 或 <code>undefined</code>，另一个操作数也必须为 <code>null</code> 或 <code>undefined</code> 以返回 <code>true</code>。否则返回 <code>false</code>。</li>\n<li>如果其中一个操作数是<strong>对象</strong>，另一个是<strong>原始值</strong>，则将对象转换为原始值。</li>\n<li>在这一步，两个操作数都被转换为<strong>原始值</strong>（字符串、数字、布尔值、符号和大整型中的一个）。剩余的转换将分情况完成。<ul>\n<li>如果是相同的类型，使用步骤 1 进行比较。</li>\n<li>如果其中一个操作数是符号而另一个不是，返回 <code>false</code>。</li>\n<li>如果其中一个操作数是布尔值而另一个不是，则将布尔值转换为数字：<code>true</code> 转换为 1，<code>false</code> 转换为 <code>0</code>。然后再次对两个操作数进行宽松比较。</li>\n<li>数字与字符串：将字符串转换为数字。转换失败的结果为 <code>NaN</code>，这将保证相等比较为 <code>false</code>。</li>\n<li>数字与大整型：按数字的值进行比较。如果数字为 <code>±Infinity</code> 或 <code>NaN</code>，返回 <code>false</code>。</li>\n<li>字符串与大整型：使用与 <code>BigInt()</code> 构造函数相同的算法将字符串转换为大整型数。如果转换失败，返回 <code>false</code>。</li>\n</ul>\n</li>\n</ol>\n<p>一直以来，根据 ECMAScript 规范，所有原始值和对象都不与 <code>undefined</code> 和 <code>null</code> 宽松相等。但是大部分浏览器允许非常有限的一类对象（即，所有页面中的 <code>document.all</code> 对象）在某些情况下表现出模拟 <code>undefined</code> 值特性。宽松相等就是这些情况之一：当且仅当 <code>A</code> 是一个<strong>模拟 undefined</strong> 的对象时，<code>null == A</code> 和 <code>undefined == A</code> 将会计算得到 <code>true</code>。在其他所有情况下，一个对象都不会与 <code>undefined</code> 或 <code>null</code> 宽松相等。</p>\n<p>在大多数情况下，<strong>不建议</strong>使用宽松相等。使用严格相等进行比较的结果更容易预测，并且由于缺少类型强制转换可以更快地执行。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 宽松相等示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> big = <span class=\"number\">0n</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num == str);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(big == num);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str == big);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num == obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(big == obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str == obj);</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"使用-Object-is-进行同值相等比较\"><a href=\"#使用-Object-is-进行同值相等比较\" class=\"headerlink\" title=\"使用 Object.is() 进行同值相等比较\"></a>使用 Object.is() 进行同值相等比较</h2><p>同值相等决定了两个值在所有上下文中是否在<strong>功能上相同</strong>。同值相等由 <code>Object.is</code> 方法提供。<strong>语言内部</strong>期望一个值等于另一个时，几乎所有地方都使用同值相等。</p>\n<p><code>Object.is()</code> 静态方法确定两个值是否为相同值。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(value1, value2)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><code>value1</code>：要比较的第一个值。</li>\n<li><code>value2</code>：要比较的第二个值。</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>一个布尔值，表示两个参数是否为相同值。</p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p><code>Object.is()</code> 确定两个值是否为相同值。如果以下其中一项成立，则两个值相同：</p>\n<ul>\n<li>都是 <code>undefined</code></li>\n<li>都是 <code>null</code></li>\n<li>都是 <code>true</code> 或者都是 <code>false</code></li>\n<li>都是长度相同、字符相同、顺序相同的字符串</li>\n<li>都是相同的对象（意味着两个值都引用了内存中的同一对象）</li>\n<li>都是 <code>BigInt</code> 且具有相同的数值</li>\n<li>都是 <code>symbol</code> 且引用相同的 <code>symbol</code> 值</li>\n<li>都是数字且<ul>\n<li>都是 <code>+0</code></li>\n<li>都是 <code>-0</code></li>\n<li>都是 <code>NaN</code></li>\n<li>都有相同的值，非零且都不是 <code>NaN</code></li>\n</ul>\n</li>\n</ul>\n<p><code>Object.is()</code> 与 <code>==</code> 运算符并不等价。<code>==</code> 运算符在测试相等性之前，会对两个操作数进行<em>类型转换</em>（如果它们不是相同的类型），这可能会导致一些非预期的行为，例如 <code>\"\" == false</code> 的结果是 <code>true</code>，但是 <code>Object.is()</code> <strong>不会对其操作数进行类型转换</strong>。</p>\n<p><code>Object.is()</code> 也不等价于 <code>===</code> 运算符。<code>Object.is()</code> 和 <code>===</code> 之间的唯一区别在于它们处理带符号的 <code>0</code> 和 <code>NaN</code> 值的时候。<code>===</code> 运算符（和 <code>==</code> 运算符）将数值 <code>-0</code> 和 <code>+0</code> 视为相等，但是会将 <code>NaN</code> 视为彼此不相等。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 案例 1：评估结果和使用 === 相同</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"number\">25</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"variable language_\">window</span>, <span class=\"variable language_\">window</span>);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>([], []);</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = { <span class=\"attr\">a</span>: <span class=\"number\">1</span> };</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = { <span class=\"attr\">a</span>: <span class=\"number\">1</span> };</span><br><span class=\"line\"><span class=\"keyword\">const</span> sameFoo = foo;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(foo, foo);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(foo, bar);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(foo, sameFoo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 案例 2: 带符号的 0</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"number\">0</span>, -<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(+<span class=\"number\">0</span>, -<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(-<span class=\"number\">0</span>, -<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 案例 3: NaN</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"title class_\">NaN</span>, <span class=\"number\">0</span> / <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"title class_\">NaN</span>, <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"零值比较\"><a href=\"#零值比较\" class=\"headerlink\" title=\"零值比较\"></a>零值比较</h2><p>类似于同值相等，但 <code>+0</code> 和 <code>-0</code> 被视为相等。</p>\n<p>零值相等不作为 JavaScript API 公开，但可以通过自定义代码实现：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sameValueZero</span>(<span class=\"params\">x, y</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">\"number\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> y === <span class=\"string\">\"number\"</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// x 和 y 相等（可能是 -0 和 0）或它们都是 NaN</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x === y || (x !== x &amp;&amp; y !== y);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x === y;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>零值相等与严格相等的区别在于其将 <code>NaN</code> 视作是相等的，与同值相等的区别在于其将 <code>-0</code> 和 <code>0</code> 视作相等的。这使得它在搜索期间通常具有最实用的行为，特别是在处理 <code>NaN</code> 时。它被用于 <code>Array.prototype.includes()</code>、<code>TypedArray.prototype.includes()</code>，以及 <code>Map</code> 和 <code>Set</code> 的需要比较<strong>键的相等性</strong>的方法。</p>\n<h2 id=\"相等性方法比较\"><a href=\"#相等性方法比较\" class=\"headerlink\" title=\"相等性方法比较\"></a>相等性方法比较</h2><p>在比较双等号和三等号时，人们通常说一个是另一个的“<strong>增强</strong>”版本。例如，双等号可以被称为三等号的扩展版本，因为前者可以执行后者的所有操作，但是会对其操作数进行类型转换——例如 <code>6 == \"6\"</code>。或者，也可以说双等号是基础，而三等号是增强版本，因为它要求两个操作数是相同的类型，因此增加了额外的约束。</p>\n<p>然而，这种思维方式意味着相等比较形成了一个<strong>一维</strong>的“<strong>光谱</strong>”，其中“完全严格”位于一端，“完全宽松”位于另一端。<strong>这个模型对 Object.is 而言存在缺陷</strong>，因为它既不比双等号“宽松”，也不比三等号“严格”，也不处于两者之间（可以说既比双等号严格，又比三等号宽松）。从下面的相同比较表中，我们可以看出这是由于 <code>Object.is</code> 处理 <code>NaN</code> 的方式。请注意，如果 <code>Object.is(NaN, NaN)</code> 求值得到 <code>false</code>，我们可以说它适合宽松/严格光谱，作为三等号的更严格形式，可以区分 <code>-0</code> 和 <code>+0</code> 。然而，<code>NaN</code> 的处理意味着这是不正确的。不幸的是，<code>Object.is</code> 必须根据其特定特征来考虑，而不是根据其相等运算符的宽松度或严格度来考虑。</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-equality-comparisons-and-sameness/1.png\" alt=\"宽松相等图\"></p>\n<p>这次再看到这张图片是不是就能解释其中大部分小绿格背后的原因了呢？</p>\n<h3 id=\"何时使用-Object-is-而不是三等号\"><a href=\"#何时使用-Object-is-而不是三等号\" class=\"headerlink\" title=\"何时使用 Object.is() 而不是三等号\"></a>何时使用 Object.is() 而不是三等号</h3><p>通常情况下，唯一需要关注 <code>Object.is</code> 对零的特殊行为的时机是在实施特定的元编程范式时，特别是涉及属性描述符时，当你的工作需要镜像 <code>Object.defineProperty</code> 的某些特性时。如果你的用例不需要这样做，建议避免使用 <code>Object.is</code>，而改用 <code>===</code>。即使你的要求涉及将两个 <code>NaN</code> 值之间的比较计算为 <code>true</code>，通常特殊处理 <code>NaN</code> 检查（使用先前版本的 ECMAScript 中提供的 <code>isNaN</code> 方法）比解决相关计算如何影响零的符号更为简单。</p>\n<p>这是一个不全面的列表，其中包含可能导致你的代码中出现 <code>-0</code> 和 <code>+0</code> 之间差异的内置方法和运算符：</p>\n<h4 id=\"（一元减）\"><a href=\"#（一元减）\" class=\"headerlink\" title=\"-（一元减）\"></a>-（一元减）</h4><p>注意下面的示例：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stoppingForce = obj.<span class=\"property\">mass</span> * -obj.<span class=\"property\">velocity</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果 <code>obj.velocity</code> 是 <code>0</code>（或计算为 0），则在该位置引入 <code>-0</code> 并向 <code>stoppingForce</code> 传播。</p>\n<h4 id=\"Math-atan2、Math-ceil、Math-pow、Math-round\"><a href=\"#Math-atan2、Math-ceil、Math-pow、Math-round\" class=\"headerlink\" title=\"Math.atan2、Math.ceil、Math.pow、Math.round\"></a>Math.atan2、Math.ceil、Math.pow、Math.round</h4><p>在某些情况下，即使没有 <code>-0</code> 作为参数之一，这些方法的返回值仍可能作为表达式中的 <code>-0</code> 被引入。例如，使用 <code>Math.pow</code> 将 <code>-Infinity</code> 的任何负奇数次幂求值为 <code>-0</code>。请参阅各个方法的文档。</p>\n<h4 id=\"Math-floor、Math-max、Math-min、Math-sin、Math-sqrt、Math-tan\"><a href=\"#Math-floor、Math-max、Math-min、Math-sin、Math-sqrt、Math-tan\" class=\"headerlink\" title=\"Math.floor、Math.max、Math.min、Math.sin、Math.sqrt、Math.tan\"></a>Math.floor、Math.max、Math.min、Math.sin、Math.sqrt、Math.tan</h4><p>在某些情况下，当参数中存在 <code>-0</code> 时，这些方法可能会返回一个 <code>-0</code> 值。例如，<code>Math.min(-0, +0)</code> 的计算结果为 <code>-0</code>。请参考各个方法的文档。</p>\n<h4 id=\"、\"><a href=\"#、\" class=\"headerlink\" title=\"~、<<、>>\"></a>~、&lt;&lt;、&gt;&gt;</h4><p>这些运算符中的每一个都在内部使用 <code>ToInt32</code> 算法。由于在内部 32 位整数类型中只有一个表示 <code>0</code> 的表示形式，<code>-0</code> 在反向操作后将不会存在。例如，<code>Object.is(~~(-0), -0)</code> 和 <code>Object.is(-0 &lt;&lt; 2 &gt;&gt; 2, -0)</code> 都会计算为 <code>false</code>。</p>\n<p>如果不考虑零的符号，依赖于 <code>Object.is</code> 可能会很危险。当意图区分 <code>-0</code> 和 <code>+0</code> 时，它当然会做到期望的效果。</p>\n<h3 id=\"Object-is-与-NaN\"><a href=\"#Object-is-与-NaN\" class=\"headerlink\" title=\"Object.is() 与 NaN\"></a>Object.is() 与 NaN</h3><p><code>Object.is</code> 规范将所有 <code>NaN</code> 的实例视为同一对象。然而，由于可以使用类型化数组，我们可以拥有 <code>NaN</code> 的不同浮点表示，这些表示在所有上下文中的行为不完全相同。例如：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">f2b</span> = (<span class=\"params\">x</span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Float64Array</span>([x]).<span class=\"property\">buffer</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">b2f</span> = (<span class=\"params\">x</span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Float64Array</span>(x.<span class=\"property\">buffer</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// 得到 NaN 的字节表示</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> n = <span class=\"title function_\">f2b</span>(<span class=\"title class_\">NaN</span>);</span><br><span class=\"line\"><span class=\"comment\">// 改变第一位，该位表示符号且与 NaN 无关</span></span><br><span class=\"line\">n[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> nan2 = <span class=\"title function_\">b2f</span>(n);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nan2); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(nan2, <span class=\"title class_\">NaN</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f2b</span>(<span class=\"title class_\">NaN</span>)); <span class=\"comment\">// Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 127]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f2b</span>(nan2)); <span class=\"comment\">// Uint8Array(8) [1, 0, 0, 0, 0, 0, 248, 127]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"Object-is-的应用示例\"><a href=\"#Object-is-的应用示例\" class=\"headerlink\" title=\"Object.is()的应用示例\"></a>Object.is()的应用示例</h2><p><code>Object.is</code> 在封装中非常有用，特别是在实现不可变数据结构时。它允许我们在不考虑 <code>-0</code> 和 <code>+0</code> 之间差异的情况下检查值是否已更改，同时仍然允许我们检测 <code>NaN</code> 的变化。因此常用于检查“状态”变化。</p>\n<p>示例：</p>\n<ul>\n<li>React 的 <code>useState</code> 钩子使用 <code>Object.is</code> 来确定状态值是否已更改。如果新状态与当前状态“相同”，则不会触发重新渲染。</li>\n<li>Redux 的 <code>combineReducers</code> 函数使用 <code>Object.is</code> 来检查每个 reducer 是否返回了与其先前状态不同的新状态。如果没有变化，则不会更新状态树。</li>\n<li>Vue 3 的响应式系统使用 <code>Object.is</code> 来检测响应式对象的属性是否已更改。如果新值与旧值“相同”，则不会触发依赖于该属性的副作用。</li>\n<li>MobX 的 <code>observable</code> 和 <code>computed</code> 功能使用 <code>Object.is</code> 来检测可观察值的变化。如果新值与旧值“相同”，则不会触发依赖于该值的计算或反应。</li>\n<li>Immer 的 <code>produce</code> 函数使用 <code>Object.is</code> 来确定草稿状态是否已更改。如果新状态与旧状态“相同”，则不会创建新的不可变状态对象。</li>\n</ul>\n<h2 id=\"检测答案\"><a href=\"#检测答案\" class=\"headerlink\" title=\"检测答案\"></a>检测答案</h2><h3 id=\"严格相等比较\"><a href=\"#严格相等比较\" class=\"headerlink\" title=\"=== 严格相等比较\"></a>=== 严格相等比较</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num === num); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === obj); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str === str); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num === obj); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num === str); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === str); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> === <span class=\"literal\">undefined</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === <span class=\"literal\">null</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === <span class=\"literal\">undefined</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"宽松相等比较\"><a href=\"#宽松相等比较\" class=\"headerlink\" title=\"== 宽松相等比较\"></a>== 宽松相等比较</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> big = <span class=\"number\">0n</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num == str); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(big == num); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str == big); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num == obj); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(big == obj); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str == obj); <span class=\"comment\">// true</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Object-is-同值相等比较\"><a href=\"#Object-is-同值相等比较\" class=\"headerlink\" title=\"Object.is() 同值相等比较\"></a>Object.is() 同值相等比较</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 案例 1：评估结果和使用 === 相同</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"number\">25</span>, <span class=\"number\">25</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"foo\"</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"variable language_\">window</span>, <span class=\"variable language_\">window</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>([], []); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = { <span class=\"attr\">a</span>: <span class=\"number\">1</span> };</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = { <span class=\"attr\">a</span>: <span class=\"number\">1</span> };</span><br><span class=\"line\"><span class=\"keyword\">const</span> sameFoo = foo;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(foo, foo); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(foo, bar); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(foo, sameFoo); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 案例 2: 带符号的 0</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"number\">0</span>, -<span class=\"number\">0</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(+<span class=\"number\">0</span>, -<span class=\"number\">0</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(-<span class=\"number\">0</span>, -<span class=\"number\">0</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 案例 3: NaN</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"title class_\">NaN</span>, <span class=\"number\">0</span> / <span class=\"number\">0</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"title class_\">NaN</span>, <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>JavaScript 提供了三种不同的值比较运算：<code>===</code>（严格相等）、<code>==</code>（宽松相等）和 <code>Object.is()</code>。它们的区别在于对原始值的处理以及对特殊数值（如 <code>NaN</code>、<code>-0</code> 和 <code>+0</code>）的处理方式。选择哪种运算取决于具体需求，但通常建议使用严格相等（<code>===</code>）以获得更可预测的结果。</p>\n<p><code>Object.is()</code> 提供了一种确定两个值是否在所有上下文中功能上相同的方法，尽管它在处理 <code>NaN</code> 和零值时与其他比较运算符有所不同。了解这些差异有助于在编写 JavaScript 代码时做出更明智的选择。</p>\n<p>参考文献：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Equality_comparisons_and_sameness\">MDN文档：JavaScript指南/相等比较和相同</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">MDN文档：Object/is()</a></li>\n</ul>\n","text":"JavaScript中的相等比较和相同 曾在JS的社区中看到这样一张图以及其制作的一些梗图，奇奇怪怪的相等性比较让人摸不着头脑，似乎是JS“灵活”、“不严谨”的...","permalink":"/post/js-equality-comparisons-and-sameness","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":16,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"相等性","slug":"相等性","count":1,"path":"api/tags/相等性.json"},{"name":"Object.is","slug":"Object-is","count":1,"path":"api/tags/Object-is.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript%E4%B8%AD%E7%9A%84%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E5%92%8C%E7%9B%B8%E5%90%8C\"><span class=\"toc-text\">JavaScript中的相等比较和相同</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-%E8%BF%9B%E8%A1%8C%E4%B8%A5%E6%A0%BC%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">使用 &#x3D;&#x3D;&#x3D; 进行严格相等比较</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-%E8%BF%9B%E8%A1%8C%E5%AE%BD%E6%9D%BE%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">使用 &#x3D;&#x3D; 进行宽松相等比较</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-Object-is-%E8%BF%9B%E8%A1%8C%E5%90%8C%E5%80%BC%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">使用 Object.is() 进行同值相等比较</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">返回值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9B%B6%E5%80%BC%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">零值比较</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E7%AD%89%E6%80%A7%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">相等性方法比较</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8-Object-is-%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%89%E7%AD%89%E5%8F%B7\"><span class=\"toc-text\">何时使用 Object.is() 而不是三等号</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%88%E4%B8%80%E5%85%83%E5%87%8F%EF%BC%89\"><span class=\"toc-text\">-（一元减）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Math-atan2%E3%80%81Math-ceil%E3%80%81Math-pow%E3%80%81Math-round\"><span class=\"toc-text\">Math.atan2、Math.ceil、Math.pow、Math.round</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Math-floor%E3%80%81Math-max%E3%80%81Math-min%E3%80%81Math-sin%E3%80%81Math-sqrt%E3%80%81Math-tan\"><span class=\"toc-text\">Math.floor、Math.max、Math.min、Math.sin、Math.sqrt、Math.tan</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E3%80%81\"><span class=\"toc-text\">~、&lt;&lt;、&gt;&gt;</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Object-is-%E4%B8%8E-NaN\"><span class=\"toc-text\">Object.is() 与 NaN</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object-is-%E7%9A%84%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">Object.is()的应用示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A3%80%E6%B5%8B%E7%AD%94%E6%A1%88\"><span class=\"toc-text\">检测答案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%A5%E6%A0%BC%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">&#x3D;&#x3D;&#x3D; 严格相等比较</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%BD%E6%9D%BE%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">&#x3D;&#x3D; 宽松相等比较</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Object-is-%E5%90%8C%E5%80%BC%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">Object.is() 同值相等比较</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JavaScript中的数据类型和数据结构","uid":"04360b551b06637f5a57592a7da7fdcb","slug":"js-data-structures","date":"2025-09-11T15:51:20.000Z","updated":"2025-09-15T00:53:24.916Z","comments":true,"path":"api/articles/js-data-structures.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","text":"JavaScript中的数据类型和数据结构数据类型和数据结构是编程中的基本概念，也是几乎掌握任何一门语言都要最先学习的，它的重要性与原理也常常被忽视。 编程语言...","permalink":"/post/js-data-structures","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":16,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"数据类型","slug":"数据类型","count":1,"path":"api/tags/数据类型.json"},{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CSS暗色模式","uid":"b9ea6a030feab39f973bc919fc78b8ed","slug":"css-darkmode","date":"2025-08-25T14:17:08.000Z","updated":"2025-09-13T16:18:38.818Z","comments":true,"path":"api/articles/css-darkmode.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-css.png","text":"CSS暗色模式暗色模式（darkmode）绝对是客户端（Client）最出色的设计之一。亮色模式即以白色或浅色为主色调的主题，暗色模式即以黑色或深色为主色调的主...","permalink":"/post/css-darkmode","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"教程","slug":"教程","count":7,"path":"api/tags/教程.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"CSS","slug":"CSS","count":7,"path":"api/tags/CSS.json"},{"name":"UI/UX","slug":"UI-UX","count":2,"path":"api/tags/UI-UX.json"},{"name":"暗色模式","slug":"暗色模式","count":1,"path":"api/tags/暗色模式.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}