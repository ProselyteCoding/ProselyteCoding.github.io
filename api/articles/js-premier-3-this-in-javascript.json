{"title":"JS高级-3-this关键字","uid":"0b480d0ac4115d2e3d40921ad7b91dbd","slug":"js-premier-3-this-in-javascript","date":"2025-07-22T10:05:48.000Z","updated":"2025-08-06T12:09:49.879Z","comments":true,"path":"api/articles/js-premier-3-this-in-javascript.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","content":"<h1 id=\"JS高级-3-this关键字\"><a href=\"#JS高级-3-this关键字\" class=\"headerlink\" title=\"JS高级-3-this关键字\"></a>JS高级-3-this关键字</h1><h2 id=\"一、this-的定义\"><a href=\"#一、this-的定义\" class=\"headerlink\" title=\"一、this 的定义\"></a>一、this 的定义</h2><p><code>this</code> 是 JavaScript 中的一个关键字，用于引用函数执行时的上下文对象。</p>\n<p>为什么需要<code>this</code>：<br><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-3-this-in-javascript/1.png\" alt=\"为什么需要this\"></p>\n<p><code>this</code>指向什么：<br><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-3-this-in-javascript/2.png\" alt=\"this指向什么\"></p>\n<p><code>this</code> 的指向与函数的调用方式有关,而与定义方式无关。它可以指向不同的对象，具体取决于函数是如何被调用的。</p>\n<h2 id=\"二、this-的绑定规则\"><a href=\"#二、this-的绑定规则\" class=\"headerlink\" title=\"二、this 的绑定规则\"></a>二、this 的绑定规则</h2><h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><p>当函数在全局作用域中调用时，即函数没有被绑定在某个对象上进行调用时，<code>this</code> 指向全局对象（在浏览器中是 <code>window</code> 对象）。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// 在浏览器中输出 window 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test1</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"title function_\">test2</span>();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test2</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"title function_\">test3</span>();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test3</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title function_\">test1</span>(); <span class=\"comment\">// 在浏览器中输出 window 对象三次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例3</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">func</span>) {</span><br><span class=\"line\">  <span class=\"title function_\">func</span>();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(obj.<span class=\"property\">bar</span>); <span class=\"comment\">// 在浏览器中输出 window 对象</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><p>通过某个对象进行调用，<code>this</code> 指向调用该函数的对象。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: foo,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">foo</span>(); <span class=\"comment\">// 输出 obj 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: foo,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj2\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">obj1</span>: obj1,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">obj2.<span class=\"property\">obj1</span>.<span class=\"title function_\">foo</span>(); <span class=\"comment\">// 输出 obj1 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例3</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: foo,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = obj1.<span class=\"property\">foo</span>; <span class=\"comment\">// 将 obj1 的 foo 赋值给 bar</span></span><br><span class=\"line\"><span class=\"title function_\">bar</span>(); <span class=\"comment\">// 默认绑定，输出 window 对象</span></span><br><span class=\"line\">obj1.<span class=\"title function_\">foo</span>(); <span class=\"comment\">// 隐式绑定，输出 obj1 对象</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h3><p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-3-this-in-javascript/3.png\" alt=\"显式绑定\"></p>\n<ul>\n<li><p><strong>apply 和 call</strong></p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// apply 和 call 的使用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj\"</span>,</span><br><span class=\"line\">};</span><br><span class=\"line\">foo.<span class=\"title function_\">apply</span>(obj); <span class=\"comment\">// 输出 obj 对象</span></span><br><span class=\"line\">foo.<span class=\"title function_\">call</span>(obj); <span class=\"comment\">// 输出 obj 对象</span></span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><p>foo 直接调用和 call/apply 调用的区别在于 this 绑定的不同。foo 直接调用即默认绑定，this 指向全局对象，而 call/apply 调用则是显式绑定，this 指向传入的对象。</p>\n</li>\n<li><p>call 和 apply 的区别在于参数的传递方式。call 接受多个参数，而 apply 接受一个数组作为参数。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call 和 apply 的区别</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj\"</span>,</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum.<span class=\"title function_\">call</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 输出 3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum.<span class=\"title function_\">apply</span>(obj, [<span class=\"number\">1</span>, <span class=\"number\">2</span>])); <span class=\"comment\">// 输出 3</span></span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n</li>\n<li><p><strong>bind</strong></p>\n<p><code>bind</code> 方法创建一个新的函数，这个函数在调用时会将 <code>this</code> 绑定到指定的对象上。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind 的使用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj\"</span>,</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"keyword\">var</span> boundFoo = foo.<span class=\"title function_\">bind</span>(obj); <span class=\"comment\">// 创建一个新的函数，this 绑定到 obj</span></span><br><span class=\"line\"><span class=\"title function_\">boundFoo</span>(); <span class=\"comment\">// 此处不是默认绑定，而是显式绑定，输出 obj 对象</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>自己实现 call、apply、bind (用js模拟实现)</strong></p>\n<p>注意：我们的实现是练习函数、this、调用关系，不会过度考虑一些边界情况(edge case)。</p>\n<ul>\n<li>call 实现：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给所有的函数添加一个 myCall 方法</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisArg, ...args</span>) {</span><br><span class=\"line\">  <span class=\"comment\">// 在这里可以去执行调用的那个函数(foo)</span></span><br><span class=\"line\">  <span class=\"comment\">// 问题：如何获取调用函数的 this 指向？</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 获取需要被执行的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 2. 对thisArg转成对象类型(防止传入的是非对象类型)</span></span><br><span class=\"line\">  thisArg = (thisArg !== <span class=\"literal\">null</span> &amp;&amp; thisArg !== <span class=\"literal\">undefined</span>) ? <span class=\"title class_\">Object</span>(thisArg) : <span class=\"variable language_\">window</span>; <span class=\"comment\">// 将 thisArg 转换为对象类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. 调用需要被执行的函数</span></span><br><span class=\"line\">  thisArg.<span class=\"property\">fn</span> = fn; <span class=\"comment\">// 将 fn 绑定到 thisArg 上</span></span><br><span class=\"line\">  thisArg.<span class=\"title function_\">fn</span>(...args); <span class=\"comment\">// 隐式绑定，this 指向 thisArg</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisArg.<span class=\"property\">fn</span>; <span class=\"comment\">// 删除临时添加的属性，避免污染 thisArg 对象</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"foo函数被执行\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"sum函数被执行\"</span>, a + b);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">foo.<span class=\"title function_\">myCall</span>();</span><br><span class=\"line\">sum.<span class=\"title function_\">myCall</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>apply 实现：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给所有的函数添加一个 myApply 方法</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisArg, argArray</span>) {</span><br><span class=\"line\">  <span class=\"comment\">// 1. 获取需要被执行的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. 对thisArg转成对象类型(防止传入的是非对象类型)</span></span><br><span class=\"line\">  thisArg = (thisArg !== <span class=\"literal\">null</span> &amp;&amp; thisArg !== <span class=\"literal\">undefined</span>) ? <span class=\"title class_\">Object</span>(thisArg) : <span class=\"variable language_\">window</span>; <span class=\"comment\">// 将 thisArg 转换为对象类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. 调用需要被执行的函数</span></span><br><span class=\"line\">  thisArg.<span class=\"property\">fn</span> = fn; <span class=\"comment\">// 将 fn 绑定到 thisArg 上</span></span><br><span class=\"line\">  argArray = argArray || []; <span class=\"comment\">// 如果没有传入参数数组，则默认为空数组，因为对 undefined 展开会报错</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = thisArg.<span class=\"title function_\">fn</span>(...argArray); <span class=\"comment\">// 隐式绑定，this 指向 thisArg</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisArg.<span class=\"property\">fn</span>; <span class=\"comment\">// 删除临时添加的属性，避免污染 thisArg 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"sum函数被执行\"</span>, a + b);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">sum.<span class=\"title function_\">myApply</span>(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>bind 实现：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给所有的函数添加一个 myBind 方法</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisArg, ...args</span>) {</span><br><span class=\"line\">  <span class=\"comment\">// 1. 获取需要被执行的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 2. 对thisArg转成对象类型(防止传入的是非对象类型)</span></span><br><span class=\"line\">  thisArg = (thisArg !== <span class=\"literal\">null</span> &amp;&amp; thisArg !== <span class=\"literal\">undefined</span>) ? <span class=\"title class_\">Object</span>(thisArg</span><br><span class=\"line\">  ) : <span class=\"variable language_\">window</span>; <span class=\"comment\">// 将 thisArg 转换为对象类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. 返回一个新的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">proxyFn</span> (<span class=\"params\">...innerArgs</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 在这里调用需要被执行的函数</span></span><br><span class=\"line\">    thisArg.<span class=\"property\">fn</span> = fn; <span class=\"comment\">// 将 fn 绑定到 thisArg 上</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = thisArg.<span class=\"title function_\">fn</span>(...args, ...innerArgs); <span class=\"comment\">// 隐式绑定，this 指向 thisArg。对两次传入的参数进行展开合并。</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> thisArg.<span class=\"property\">fn</span>; <span class=\"comment\">// 删除临时添加的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result; <span class=\"comment\">// 返回函数执行结果</span></span><br><span class=\"line\">  };</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> proxyFn; <span class=\"comment\">// 返回新的函数</span></span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<h3 id=\"new-绑定\"><a href=\"#new-绑定\" class=\"headerlink\" title=\"new 绑定\"></a>new 绑定</h3><p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-3-this-in-javascript/4.png\" alt=\"new 绑定\"></p>\n<p>当使用 <code>new</code> 关键字调用一个函数时(构造器)，JavaScript 会创建一个新的对象，并将该对象作为 <code>this</code> 传递给函数。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new 绑定的使用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"Alice\"</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1.<span class=\"property\">name</span>, p1.<span class=\"property\">age</span>); <span class=\"comment\">// 输出 Alice 25</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"Bob\"</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p2.<span class=\"property\">name</span>, p2.<span class=\"property\">age</span>); <span class=\"comment\">// 输出 Bob 30</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"规则优先级\"><a href=\"#规则优先级\" class=\"headerlink\" title=\"规则优先级\"></a>规则优先级</h3><p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-3-this-in-javascript/5.png\" alt=\"规则优先级\"></p>\n<p>默认绑定优先级最低，new 绑定优先级最高，显式绑定优先级高于隐式绑定。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 显式绑定优先级高于隐式绑定</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例1 call 与 apply</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">foo</span>.<span class=\"title function_\">call</span>(<span class=\"string\">'abc'</span>); <span class=\"comment\">// 输出 'abc'</span></span><br><span class=\"line\">obj.<span class=\"property\">foo</span>.<span class=\"title function_\">apply</span>(<span class=\"string\">'abc'</span>); <span class=\"comment\">// 输出 'abc'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例2 bind</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: foo.<span class=\"title function_\">bind</span>(<span class=\"string\">'abc'</span>), <span class=\"comment\">// 使用 bind 显式绑定</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">foo</span>(); <span class=\"comment\">// 输出 'abc'</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new 绑定优先级高于显式绑定</span></span><br><span class=\"line\"><span class=\"comment\">// new 关键字不能和 call/apply/bind 一起使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo.<span class=\"title function_\">bind</span>(<span class=\"string\">'abc'</span>); <span class=\"comment\">// 使用 bind 显式绑定</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title function_\">bar</span>(); <span class=\"comment\">// 使用 new 关键字调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj); <span class=\"comment\">// 输出一个新对象，this 指向新对象而不是 'abc'</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"部分内置函数的绑定\"><a href=\"#部分内置函数的绑定\" class=\"headerlink\" title=\"部分内置函数的绑定\"></a>部分内置函数的绑定</h3><p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-3-this-in-javascript/6.png\" alt=\"部分内置函数的绑定\"></p>\n<ul>\n<li><p>setTimeout：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setTimeout 的 this 绑定</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj\"</span>,</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(foo, <span class=\"number\">1000</span>); <span class=\"comment\">// 输出 window 对象，因为 setTimeout 默认绑定</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(foo.<span class=\"title function_\">bind</span>(obj), <span class=\"number\">1000</span>); <span class=\"comment\">// 输出 obj 对象，因为使用了 bind 显式绑定</span></span><br><span class=\"line\"><span class=\"comment\">// 由此可见，setTimeout 内部的 this 绑定是默认绑定，指向全局对象。</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>监听点击事件：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听点击事件的 this 绑定</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> boxDiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">'.box'</span>);</span><br><span class=\"line\">boxDiv.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 输出 boxDiv 对象，因为 addEventListener 的回调函数是隐式绑定，this 指向触发事件的元素</span></span><br><span class=\"line\">});</span><br><span class=\"line\">boxDiv.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 输出 boxDiv 对象，因为 onclick 事件处理函数也是隐式绑定</span></span><br><span class=\"line\">};</span><br><span class=\"line\">boxDiv.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'click'</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 同理为隐式绑定，输出 boxDiv 对象</span></span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>数组.forEach/map/filter/find方法：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组的 forEach/map/filter 的 this 绑定</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// forEach 的回调函数默认绑定</span></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 输出 window 对象，默认绑定</span></span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 输出 \"abc\"，传入的第二个参数即 this 指向</span></span><br><span class=\"line\">}, <span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他数组方法同理</span></span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<h3 id=\"this规则之外\"><a href=\"#this规则之外\" class=\"headerlink\" title=\"this规则之外\"></a>this规则之外</h3><ul>\n<li><p>忽略显式绑定：</p>\n<p>apply/call/bind 绑定 <code>null/undefined</code> 时，this 指向全局对象（浏览器中为 window 对象）。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 忽略显式绑定</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\">foo.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// 输出 window 对象</span></span><br><span class=\"line\">foo.<span class=\"title function_\">apply</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// 输出 window 对象</span></span><br><span class=\"line\">foo.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>)(); <span class=\"comment\">// 输出 window 对象</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>间接函数引用：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj2\"</span></span><br><span class=\"line\">} <span class=\"comment\">// 此处未加分号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确使用</span></span><br><span class=\"line\">obj2.<span class=\"property\">bar</span> = obj1.<span class=\"property\">foo</span> <span class=\"comment\">// 此时代码可以正常运行</span></span><br><span class=\"line\">obj2.<span class=\"title function_\">bar</span>(); <span class=\"comment\">// 隐式绑定，输出 obj2 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误使用</span></span><br><span class=\"line\">(obj2.<span class=\"property\">bar</span> = obj1.<span class=\"property\">foo</span>)(); <span class=\"comment\">// 报错 `TypeError: Cannot read properties of undefined (setting 'bar')`</span></span><br><span class=\"line\">obj2.<span class=\"title function_\">bar</span>(); <span class=\"comment\">// 这是因为 obj2 声明时结尾没有分号，认为没有完成声明，从而将下面的代码与上面的合起来了</span></span><br><span class=\"line\"><span class=\"comment\">//等价代码：</span></span><br><span class=\"line\"><span class=\"comment\">// var obj2 = {</span></span><br><span class=\"line\"><span class=\"comment\">//   name: \"obj2\"</span></span><br><span class=\"line\"><span class=\"comment\">// }(obj2.bar = obj1.foo)();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因此小括号不能乱加，分号也不是任何情况都可以省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">(obj2.<span class=\"property\">bar</span> = obj1.<span class=\"property\">foo</span>)();<span class=\"comment\">// 如果 obj2 声明时结尾加了分号，这样使用相当于独立函数调用，输出 `window` 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类似的另一个示例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">el</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(el, <span class=\"variable language_\">this</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">\"obj\"</span></span><br><span class=\"line\">} <span class=\"comment\">//此处未加分号</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].<span class=\"title function_\">forEach</span>(foo, obj); <span class=\"comment\">// 同样报错</span></span><br><span class=\"line\"><span class=\"comment\">// 因为是使用 {id: \"obj\"}[1, 2, 3] 对象的forEach方法，而非我们期望的使用数组的forEach方法</span></span><br><span class=\"line\">  </span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<h2 id=\"三、arguments-对象\"><a href=\"#三、arguments-对象\" class=\"headerlink\" title=\"三、arguments 对象\"></a>三、arguments 对象</h2><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">num1, num2, num3</span>) {</span><br><span class=\"line\">  <span class=\"comment\">// arguments 对象是一个类数组对象，包含了传递给函数的所有参数 (长得像数组，实质是对象)</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 常见的对 arguments 对象的操作</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 获取参数的长度</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>); <span class=\"comment\">// 输出参数的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. 根据索引值获取指定参数</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>]); <span class=\"comment\">// 输出第一个参数</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>]); <span class=\"comment\">// 输出第二个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. callee 获取当前 arguments 对象所在的函数</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>.<span class=\"property\">callee</span>); <span class=\"comment\">// 输出当前函数 foo 的引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// arguments.callee(); 禁止这样使用，会形成递归调用，导致栈溢出错误。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// arguments 不具有 forEach、map、filter 等数组方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 自己遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr1 = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) {</span><br><span class=\"line\">    newArr1.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i]); <span class=\"comment\">// 将每个参数添加到新数组中</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// arguments 转成 array 类型</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr2 = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>); <span class=\"comment\">// 使用 Array.prototype.slice 将 arguments 转换为数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr3 = [].<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>); <span class=\"comment\">// 使用空数组的 slice 方法将 arguments 转换为数组，与上一种方式本质上等价</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr4 = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>); <span class=\"comment\">// ES6 新增的 Array.from 方法</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"四、箭头函数\"><a href=\"#四、箭头函数\" class=\"headerlink\" title=\"四、箭头函数\"></a>四、箭头函数</h2><p>箭头函数是ES6引入的一种新的函数定义方式，它比函数表达式更简洁。</p>\n<ul>\n<li>箭头函数没有自己的 <code>this</code>，它的 <code>this</code> 是从外部作用域继承的。</li>\n<li>箭头函数不会绑定this、arguments属性。</li>\n<li>箭头函数不能作为构造函数使用，不能使用 <code>new</code> 关键字调用。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编写箭头函数</span></span><br><span class=\"line\"><span class=\"comment\">// 1. () 参数</span></span><br><span class=\"line\"><span class=\"comment\">// 2. =&gt; 箭头</span></span><br><span class=\"line\"><span class=\"comment\">// 3. {} 函数体</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">arrowFunction</span> = (<span class=\"params\"></span>) =&gt; {</span><br><span class=\"line\">  <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高阶函数在使用时，也可以传入箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">nums.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item); <span class=\"comment\">// 输出 1 2 3 4 5</span></span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常见的简写</span></span><br><span class=\"line\"><span class=\"comment\">// 简写一：如果参数只有一个，可以省略括号</span></span><br><span class=\"line\">nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item); <span class=\"comment\">// 输出 1 2 3 4 5</span></span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简写二：如果函数体只有一行，可以省略大括号和 return</span></span><br><span class=\"line\">nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)); <span class=\"comment\">// 输出 1 2 3 4 5，并默认将函数体作为返回值，此处未undefined</span></span><br><span class=\"line\">nums.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item % <span class=\"number\">2</span> === <span class=\"number\">0</span>); <span class=\"comment\">// 输出 2 4，并将其作为返回值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简写三：如果一个箭头函数，只有一行代码，且返回一个对象，在对象外面加小括号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">bar</span> = (<span class=\"params\"></span>) =&gt; ({ <span class=\"attr\">name</span>: <span class=\"string\">\"bar\"</span> });</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数的 this 绑定</span></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数没有自己的 this，它的 this 是从外部作用域继承的</span></span><br><span class=\"line\"><span class=\"comment\">// 这意味着箭头函数中的 this 指向的是定义时的上下文，而不是调用时的上下文。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//应用场景：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"obj\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 不使用箭头函数的做法，保存 this 的引用</span></span><br><span class=\"line\">  <span class=\"attr\">getData</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>; </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">      <span class=\"keyword\">var</span> response = <span class=\"string\">\"data from server\"</span>;</span><br><span class=\"line\">      _this.<span class=\"property\">data</span> = response; <span class=\"comment\">// 正确用法，使用 _this 引用</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = response; <span class=\"comment\">// 错误用法，因为 setTimeout 是默认绑定， this 指向全局对象</span></span><br><span class=\"line\">    }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用箭头函数的做法</span></span><br><span class=\"line\">  <span class=\"attr\">getDataArrow</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">      <span class=\"keyword\">var</span> response = <span class=\"string\">\"data from server\"</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = response; <span class=\"comment\">// 正确用法，this 指向 obj 对象</span></span><br><span class=\"line\">    }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数没有自己的 arguments 对象，它会从外部作用域继承 arguments。</span></span><br><span class=\"line\"><span class=\"comment\">// 示例：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"title function_\">bar</span> = (<span class=\"params\"></span>) =&gt; {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>); <span class=\"comment\">// 输出传入的参数，继承自 foo 的 arguments</span></span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"title function_\">foo</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(); <span class=\"comment\">// 输出 [1, 2, 3]，因为 bar 继承了 foo 的 arguments</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"五、this-的面试题\"><a href=\"#五、this-的面试题\" class=\"headerlink\" title=\"五、this 的面试题\"></a>五、this 的面试题</h2><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 题目1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"window\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"person\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">sayName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayName</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sss = person.<span class=\"property\">sayName</span>;</span><br><span class=\"line\">  <span class=\"title function_\">sss</span>(); <span class=\"comment\">// 输出 \"window\"，独立函数调用</span></span><br><span class=\"line\">  person.<span class=\"title function_\">sayName</span>(); <span class=\"comment\">// 输出 \"person\"，隐式绑定</span></span><br><span class=\"line\">  (person.<span class=\"property\">sayName</span>)(); <span class=\"comment\">// 输出 \"person\"，隐式绑定，与上一行代码等价</span></span><br><span class=\"line\">  (person.<span class=\"property\">sayName</span> = person.<span class=\"property\">sayName</span>)(); <span class=\"comment\">// 输出 \"window\"，独立函数调用</span></span><br><span class=\"line\">  (person.<span class=\"property\">sayName</span> = person.<span class=\"property\">sayName</span>.<span class=\"title function_\">bind</span>(person))(); <span class=\"comment\">// 输出 \"person\"，显式绑定</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">sayName</span>();</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 题目2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"window\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"person1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo1</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"attr\">foo2</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>),</span><br><span class=\"line\">  <span class=\"attr\">foo3</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"attr\">foo4</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = { <span class=\"attr\">name</span>: <span class=\"string\">\"person2\"</span> }</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo1</span>(); <span class=\"comment\">// person1，隐式绑定</span></span><br><span class=\"line\">person1.<span class=\"property\">foo1</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// person2，显式绑定</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo2</span>(); <span class=\"comment\">// window，不绑定作用域，上层作用域是 window</span></span><br><span class=\"line\">person1.<span class=\"property\">foo2</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// window，箭头函数无显式绑定规则，上层作用域是 window</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>()(); <span class=\"comment\">// window，独立函数调用</span></span><br><span class=\"line\">person1.<span class=\"property\">foo3</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// window，独立函数调用</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// person2，显式绑定</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>()(); <span class=\"comment\">// person1，上层作用域是 person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo4</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// person2，上层作用域是 person2</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// person1，上层作用域是 person1，箭头函数无显式绑定规则</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 题目3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"window\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo1</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo2</span> = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>),</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo3</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo4</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"person1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"person2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo1</span>(); <span class=\"comment\">// person1，隐式绑定</span></span><br><span class=\"line\">person1.<span class=\"property\">foo1</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// person2，显式绑定</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo2</span>(); <span class=\"comment\">// person1，上层作用域是 person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo2</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// person1，箭头函数无显式绑定规则，上层作用域是 person1</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>()(); <span class=\"comment\">// window，独立函数调用</span></span><br><span class=\"line\">person1.<span class=\"property\">foo3</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// window，独立函数调用</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// person2，显式绑定</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>()(); <span class=\"comment\">// person1，上层作用域是 person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo4</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// person2，上层作用域是 person2</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// person1，上层作用域是 person1，箭头函数无显式绑定规则</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 题目4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"window\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">obj</span> = {</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"obj\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">foo1</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">      }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"attr\">foo2</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"person1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"person2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo1</span>()(); <span class=\"comment\">// window，独立函数调用</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"property\">foo1</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// window，独立函数调用</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo1</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// person2，显式绑定</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo2</span>()(); <span class=\"comment\">// obj，上层函数是由 person1.obj 调用的</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"property\">foo2</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// person2，上层作用域是 person2</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo2</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// obj，上层函数是由 person1.obj 调用的，箭头函数无显式绑定规则</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意：对象和代码块的区别，对象没有作用域而代码块有作用域。本题中 obj 是一个对象，没有作用域。函数有作用域。</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"六、总结\"><a href=\"#六、总结\" class=\"headerlink\" title=\"六、总结\"></a>六、总结</h2><p>this 是 JavaScript 中的一个重要的关键字，用于引用函数执行时的上下文对象。它的指向与函数的调用方式有关，主要有默认绑定、隐式绑定、显式绑定和 new 绑定四种绑定规则，并给出了混合绑定时的优先级顺序。</p>\n<p>另外还补充了不符规则的几种特殊情况以及箭头函数、arguments等ES6新特性。</p>\n<p>总体来说这一块是有一定难度的，需要进行对比区分理解和练习，尤其是四种绑定规则之间的区分与优先级。</p>\n<p>参考内容：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1gYpmeKEvt?spm_id_from=333.788.videopod.episodes&amp;vd_source=13be13cef40f3972c65f0af98bf87ea2\">coderwhy 最强 JavaScript 高级教程 23-44 集</a></li>\n</ul>\n","text":"JS高级-3-this关键字一、this 的定义this 是 JavaScript 中的一个关键字，用于引用函数执行时的上下文对象。 为什么需要this： th...","permalink":"/post/js-premier-3-this-in-javascript","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"前端","slug":"前端","count":19,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":19,"path":"api/tags/前端.json"},{"name":"技术","slug":"技术","count":17,"path":"api/tags/技术.json"},{"name":"笔记","slug":"笔记","count":10,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":7,"path":"api/tags/JavaScript.json"},{"name":"面试","slug":"面试","count":2,"path":"api/tags/面试.json"},{"name":"进阶","slug":"进阶","count":6,"path":"api/tags/进阶.json"},{"name":"this","slug":"this","count":1,"path":"api/tags/this.json"},{"name":"箭头函数","slug":"箭头函数","count":1,"path":"api/tags/箭头函数.json"},{"name":"绑定规则","slug":"绑定规则","count":1,"path":"api/tags/绑定规则.json"},{"name":"arguments","slug":"arguments","count":1,"path":"api/tags/arguments.json"},{"name":"剩余参数","slug":"剩余参数","count":1,"path":"api/tags/剩余参数.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JS%E9%AB%98%E7%BA%A7-3-this%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">JS高级-3-this关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81this-%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">一、this 的定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81this-%E7%9A%84%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99\"><span class=\"toc-text\">二、this 的绑定规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">默认绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">隐式绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%BE%E5%BC%8F%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">显式绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#new-%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">new 绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%84%E5%88%99%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">规则优先级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%83%A8%E5%88%86%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">部分内置函数的绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#this%E8%A7%84%E5%88%99%E4%B9%8B%E5%A4%96\"><span class=\"toc-text\">this规则之外</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81arguments-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">三、arguments 对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">四、箭头函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81this-%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98\"><span class=\"toc-text\">五、this 的面试题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">六、总结</span></a></li></ol></li></ol>","author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JS高级-4-函数式编程","uid":"f6257aade18eefed38cc06dca4a6019e","slug":"js-premier-4-functional-programming","date":"2025-07-27T14:12:36.000Z","updated":"2025-08-06T12:09:53.533Z","comments":true,"path":"api/articles/js-premier-4-functional-programming.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","text":"JS高级-4-函数式编程函数式编程（Functional Programming，简称FP）是一种编程范式，它强调使用纯函数、避免副作用、采用不可变数据以及函数...","permalink":"/post/js-premier-4-functional-programming","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"前端","slug":"前端","count":19,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":19,"path":"api/tags/前端.json"},{"name":"技术","slug":"技术","count":17,"path":"api/tags/技术.json"},{"name":"笔记","slug":"笔记","count":10,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":7,"path":"api/tags/JavaScript.json"},{"name":"进阶","slug":"进阶","count":6,"path":"api/tags/进阶.json"},{"name":"函数式编程","slug":"函数式编程","count":1,"path":"api/tags/函数式编程.json"},{"name":"纯函数","slug":"纯函数","count":1,"path":"api/tags/纯函数.json"},{"name":"柯里化","slug":"柯里化","count":1,"path":"api/tags/柯里化.json"},{"name":"组合函数","slug":"组合函数","count":1,"path":"api/tags/组合函数.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JS高级-2-高阶函数与闭包","uid":"44b8e9de277aafbb00bcc826b51452ad","slug":"js-premier-2-higher-order-functions-and-closures","date":"2025-07-21T14:38:54.000Z","updated":"2025-08-06T12:09:52.193Z","comments":true,"path":"api/articles/js-premier-2-higher-order-functions-and-closures.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","text":"JS高级-2-高阶函数与闭包一、JS 中函数是一等公民在 JavaScript 中，函数被视为一等公民（First-Class Citizen），这意味着函数可...","permalink":"/post/js-premier-2-higher-order-functions-and-closures","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"前端","slug":"前端","count":19,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":19,"path":"api/tags/前端.json"},{"name":"技术","slug":"技术","count":17,"path":"api/tags/技术.json"},{"name":"笔记","slug":"笔记","count":10,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":7,"path":"api/tags/JavaScript.json"},{"name":"进阶","slug":"进阶","count":6,"path":"api/tags/进阶.json"},{"name":"函数","slug":"函数","count":1,"path":"api/tags/函数.json"},{"name":"闭包","slug":"闭包","count":1,"path":"api/tags/闭包.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}