{"title":"力扣周记-3","uid":"fa243605ec3719de63f54a5b0235764f","slug":"leetcode-weekly-journal-3","date":"2025-09-23T14:39:38.000Z","updated":"2025-10-02T02:27:45.577Z","comments":true,"path":"api/articles/leetcode-weekly-journal-3.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-leetcode.png","content":"<h1 id=\"力扣周记-3\"><a href=\"#力扣周记-3\" class=\"headerlink\" title=\"力扣周记-3\"></a>力扣周记-3</h1><p>2025.9.22 - 2025.9.28</p>\n<h2 id=\"一、比较版本号-165\"><a href=\"#一、比较版本号-165\" class=\"headerlink\" title=\"一、比较版本号(165)\"></a>一、比较版本号(165)</h2><h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ul>\n<li>字符串</li>\n<li>双指针</li>\n</ul>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你两个 版本号字符串 <code>version1</code> 和 <code>version2</code> ，请你比较它们。版本号由被点 <code>'.'</code> 分开的修订号组成。修订号的值 是它 <strong>转换为整数</strong> 并忽略前导零。</p>\n<p>比较版本号时，请按 <strong>从左到右的顺序</strong> 依次比较它们的修订号。如果其中一个版本字符串的修订号较少，则将缺失的修订号视为 0。</p>\n<p>返回规则如下：</p>\n<ul>\n<li>如果 <code>version1 &lt; version2</code> 返回 <code>-1</code>，</li>\n<li>如果 <code>version1 &gt; version2</code> 返回 <code>1</code>，</li>\n<li>除此之外返回 <code>0</code>。</li>\n</ul>\n<p>示例 1：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>version1 = \"1.2\", version2 = \"1.10\"</code><br>输出：<code>-1</code></p></blockquote>\n<p>解释：<code>version1</code> 的第二个修订号为 <code>\"2\"</code>，<code>version2</code> 的第二个修订号为 <code>\"10\"：2 &lt; 10</code>，所以 <code>version1 &lt; version2</code>。</p>\n<p>示例 2：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>version1 = \"1.01\", version2 = \"1.001\"</code><br>输出：<code>0</code></p></blockquote>\n<p>解释：忽略前导零，<code>\"01\"</code> 和 <code>\"001\"</code> 都代表相同的整数 <code>\"1\"</code>。</p>\n<p>示例 3：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>version1 = \"1.0\", version2 = \"1.0.0.0\"</code><br>输出：0</p></blockquote>\n<p>解释：<code>version1</code> 有更少的修订号，每个缺失的修订号按 <code>\"0\"</code> 处理。</p>\n<h3 id=\"我的答案\"><a href=\"#我的答案\" class=\"headerlink\" title=\"我的答案\"></a>我的答案</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> {<span class=\"type\">string</span>} <span class=\"variable\">version1</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> {<span class=\"type\">string</span>} <span class=\"variable\">version2</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> {<span class=\"type\">number</span>}</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compareVersion = <span class=\"keyword\">function</span> (<span class=\"params\">version1, version2</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> v1 = version1.<span class=\"title function_\">split</span>(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> v2 = version2.<span class=\"title function_\">split</span>(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; v1.<span class=\"property\">length</span> || i &lt; v2.<span class=\"property\">length</span>; ++i) {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">0</span>,</span><br><span class=\"line\">      y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; v1.<span class=\"property\">length</span>) {</span><br><span class=\"line\">      x = <span class=\"built_in\">parseInt</span>(v1[i]);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; v2.<span class=\"property\">length</span>) {</span><br><span class=\"line\">      y = <span class=\"built_in\">parseInt</span>(v2[i]);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; y) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; y) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 双指针</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compareVersion = <span class=\"keyword\">function</span> (<span class=\"params\">version1, version2</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = version1.<span class=\"property\">length</span>,</span><br><span class=\"line\">    m = version2.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>,</span><br><span class=\"line\">    j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; n || j &lt; m) {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; n &amp;&amp; version1[i] !== <span class=\"string\">\".\"</span>; ++i) {</span><br><span class=\"line\">      x = x * <span class=\"number\">10</span> + version1[i].<span class=\"title function_\">charCodeAt</span>() - <span class=\"string\">\"0\"</span>.<span class=\"title function_\">charCodeAt</span>();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    ++i; <span class=\"comment\">// 跳过点号</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; j &lt; m &amp;&amp; version2.<span class=\"title function_\">charAt</span>(j) !== <span class=\"string\">\".\"</span>; ++j) {</span><br><span class=\"line\">      y = y * <span class=\"number\">10</span> + version2[j].<span class=\"title function_\">charCodeAt</span>() - <span class=\"string\">\"0\"</span>.<span class=\"title function_\">charCodeAt</span>();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    ++j; <span class=\"comment\">// 跳过点号</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x !== y) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x &gt; y ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h2 id=\"二、盛最多水的容器-11\"><a href=\"#二、盛最多水的容器-11\" class=\"headerlink\" title=\"二、盛最多水的容器(11)\"></a>二、盛最多水的容器(11)</h2><h3 id=\"标签-1\"><a href=\"#标签-1\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ul>\n<li>贪心</li>\n<li>双指针</li>\n<li>数组</li>\n</ul>\n<h3 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code>。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code>。</p>\n<p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>\n<p>返回容器可以储存的最大水量。</p>\n<p>说明：你不能倾斜容器。</p>\n<p>示例 1：</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/leetcode-weekly-journal-3/1.png\" alt=\"盛最多水的容器示例1\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>[1,8,6,2,5,4,8,3,7]</code><br>输出：<code>49</code></p></blockquote>\n<p>解释：图中垂直线代表输入数组 <code>[1,8,6,2,5,4,8,3,7]</code>。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 <code>49</code>。</p>\n<p>示例 2：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>height = [1,1]</code><br>输出：<code>1</code></p></blockquote>\n<h3 id=\"我的答案-1\"><a href=\"#我的答案-1\" class=\"headerlink\" title=\"我的答案\"></a>我的答案</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> {<span class=\"type\">number[]</span>} <span class=\"variable\">height</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> {<span class=\"type\">number</span>}</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"keyword\">function</span> (<span class=\"params\">height</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = height.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l = <span class=\"number\">0</span>,</span><br><span class=\"line\">    r = length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> maxl = height[<span class=\"number\">0</span>],</span><br><span class=\"line\">    maxr = height[length - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(maxl, maxr) * (length - <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l &lt; r) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxl &lt;= maxr) {</span><br><span class=\"line\">      l++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (height[l] &gt; maxl) maxl = height[l];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result &lt; <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(maxl, maxr) * (r - l))</span><br><span class=\"line\">        result = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(maxl, maxr) * (r - l);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      r--;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (height[r] &gt; maxr) maxr = height[r];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result &lt; <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(maxl, maxr) * (r - l))</span><br><span class=\"line\">        result = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(maxl, maxr) * (r - l);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// console.log(l,r,maxl,maxr,result)</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> {<span class=\"type\">number[]</span>} <span class=\"variable\">height</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> {<span class=\"type\">number</span>}</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"keyword\">function</span> (<span class=\"params\">height</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = <span class=\"number\">0</span>,</span><br><span class=\"line\">    left = <span class=\"number\">0</span>,</span><br><span class=\"line\">    right = height.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> area = (right - left) * <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(height[left], height[right]);</span><br><span class=\"line\">    ans = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(ans, area);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (height[left] &lt; height[right]) {</span><br><span class=\"line\">      left++;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      right--;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h2 id=\"三、三数之和-15\"><a href=\"#三、三数之和-15\" class=\"headerlink\" title=\"三、三数之和(15)\"></a>三、三数之和(15)</h2><h3 id=\"标签-2\"><a href=\"#标签-2\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ul>\n<li>数组</li>\n<li>双指针</li>\n<li>排序</li>\n</ul>\n<h3 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n<p>示例 1：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：nums = [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]</p></blockquote>\n<p>解释：<br><code>nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0</code> 。<br><code>nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0</code> 。<br><code>nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0</code> 。<br>不同的三元组是 <code>[-1,0,1]</code> 和 <code>[-1,-1,2]</code> 。<br>注意，输出的顺序和三元组的顺序并不重要。</p>\n<p>示例 2：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>nums = [0,1,1]</code><br>输出：<code>[]</code></p></blockquote>\n<p>解释：唯一可能的三元组和不为 <code>0</code> 。</p>\n<p>示例 3：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>nums = [0,0,0]</code><br>输出：<code>[[0,0,0]]</code></p></blockquote>\n<p>解释：唯一可能的三元组和为 <code>0</code> 。</p>\n<h3 id=\"我的答案-2\"><a href=\"#我的答案-2\" class=\"headerlink\" title=\"我的答案\"></a>我的答案</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h2 id=\"四、无重复字符的最长子串-3\"><a href=\"#四、无重复字符的最长子串-3\" class=\"headerlink\" title=\"四、无重复字符的最长子串(3)\"></a>四、无重复字符的最长子串(3)</h2><h3 id=\"标签-3\"><a href=\"#标签-3\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ul>\n<li>哈希表</li>\n<li>字符串</li>\n<li>滑动窗口</li>\n</ul>\n<h3 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 最长 <strong>子串</strong>（子字符串是字符串中连续的 <strong>非空</strong> 字符序列）的长度。</p>\n<p>示例 1:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入: <code>s = \"abcabcbb\"</code><br>输出: <code>3</code></p></blockquote>\n<p>解释: 因为无重复字符的最长子串是 <code>\"abc\"</code>，所以其长度为 <code>3</code>。</p>\n<p>示例 2:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入: <code>s = \"bbbbb\"</code><br>输出: <code>1</code></p></blockquote>\n<p>解释: 因为无重复字符的最长子串是 <code>\"b\"</code>，所以其长度为 <code>1</code>。</p>\n<p>示例 3:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入: <code>s = \"pwwkew\"</code><br>输出: <code>3</code></p></blockquote>\n<p>解释: 因为无重复字符的最长子串是 <code>\"wke\"</code>，所以其长度为 <code>3</code>。<br>请注意，你的答案必须是 <strong>子串</strong> 的长度，<code>\"pwke\"</code> 是一个子序列，不是子串。</p>\n<h3 id=\"我的答案-3\"><a href=\"#我的答案-3\" class=\"headerlink\" title=\"我的答案\"></a>我的答案</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> {<span class=\"type\">string</span>} <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> {<span class=\"type\">number</span>}</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"keyword\">function</span> (<span class=\"params\">s</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"property\">length</span>; i++) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hash = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = i; hash.<span class=\"title function_\">get</span>(s[j]) === <span class=\"literal\">undefined</span> &amp;&amp; j &lt; s.<span class=\"property\">length</span>; j++) {</span><br><span class=\"line\">      hash.<span class=\"title function_\">set</span>(s[j], j);</span><br><span class=\"line\">      temp++;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(s[j])</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// console.log(temp);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp &gt; result) result = temp;</span><br><span class=\"line\">    i = hash.<span class=\"title function_\">get</span>(s[j]);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"题解-3\"><a href=\"#题解-3\" class=\"headerlink\" title=\"题解\"></a>题解</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"keyword\">function</span> (<span class=\"params\">s</span>) {</span><br><span class=\"line\">  <span class=\"comment\">// 哈希集合，记录每个字符是否出现过</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> occ = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = s.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rk = -<span class=\"number\">1</span>,</span><br><span class=\"line\">    ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) {</span><br><span class=\"line\">      <span class=\"comment\">// 左指针向右移动一格，移除一个字符</span></span><br><span class=\"line\">      occ.<span class=\"title function_\">delete</span>(s.<span class=\"title function_\">charAt</span>(i - <span class=\"number\">1</span>));</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (rk + <span class=\"number\">1</span> &lt; n &amp;&amp; !occ.<span class=\"title function_\">has</span>(s.<span class=\"title function_\">charAt</span>(rk + <span class=\"number\">1</span>))) {</span><br><span class=\"line\">      <span class=\"comment\">// 不断地移动右指针</span></span><br><span class=\"line\">      occ.<span class=\"title function_\">add</span>(s.<span class=\"title function_\">charAt</span>(rk + <span class=\"number\">1</span>));</span><br><span class=\"line\">      ++rk;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// 第 i 到 rk 个字符是一个极长的无重复字符子串</span></span><br><span class=\"line\">    ans = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(ans, rk - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h2 id=\"五、找到字符串中所有字母异位词-438\"><a href=\"#五、找到字符串中所有字母异位词-438\" class=\"headerlink\" title=\"五、找到字符串中所有字母异位词(438)\"></a>五、找到字符串中所有字母异位词(438)</h2><h3 id=\"标签-4\"><a href=\"#标签-4\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ul>\n<li>哈希表</li>\n<li>字符串</li>\n<li>滑动窗口</li>\n</ul>\n<h3 id=\"题目描述-4\"><a href=\"#题目描述-4\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code> 中所有 <code>p</code> 的<strong>异位词</strong>的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>\n<p>示例 1:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入: <code>s = \"cbaebabacd\", p = \"abc\"</code><br>输出: <code>[0,6]</code></p></blockquote>\n<p>解释:起始索引等于 <code>0</code> 的子串是 <code>\"cba\"</code>, 它是 <code>\"abc\"</code> 的异位词。起始索引等于 <code>6</code> 的子串是 <code>\"bac\"</code>, 它是 <code>\"abc\"</code> 的异位词。</p>\n<p>示例 2:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入: <code>s = \"abab\", p = \"ab\"</code><br>输出: <code>[0,1,2]</code></p></blockquote>\n<p>解释:起始索引等于 <code>0</code> 的子串是 <code>\"ab\"</code>, 它是 <code>\"ab\"</code> 的异位词。起始索引等于 <code>1</code> 的子串是 <code>\"ba\"</code>, 它是 <code>\"ab\"</code> 的异位词。起始索引等于 <code>2</code> 的子串是 <code>\"ab\"</code>, 它是 <code>\"ab\"</code> 的异位词。</p>\n<h3 id=\"我的答案-4\"><a href=\"#我的答案-4\" class=\"headerlink\" title=\"我的答案\"></a>我的答案</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"keyword\">function</span> (<span class=\"params\">s, p</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> hashOrigin = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; p.<span class=\"property\">length</span>; j++) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hashOrigin.<span class=\"title function_\">has</span>(p[j])) hashOrigin.<span class=\"title function_\">set</span>(p[j], hashOrigin.<span class=\"title function_\">get</span>(p[j]) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> hashOrigin.<span class=\"title function_\">set</span>(p[j], <span class=\"number\">1</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= s.<span class=\"property\">length</span> - p.<span class=\"property\">length</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hash = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>(hashOrigin);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t &lt; p.<span class=\"property\">length</span> &amp;&amp; i + t &lt; s.<span class=\"property\">length</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hash.<span class=\"title function_\">get</span>(s[i + t])) {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash.<span class=\"title function_\">get</span>(s[i + t]) === <span class=\"number\">1</span>) {</span><br><span class=\"line\">          hash.<span class=\"title function_\">delete</span>(s[i + t]);</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">          hash.<span class=\"title function_\">set</span>(s[i + t], hash.<span class=\"title function_\">get</span>(s[i + t]) - <span class=\"number\">1</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      }</span><br><span class=\"line\">      t++;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag &amp;&amp; t === p.<span class=\"property\">length</span>) {</span><br><span class=\"line\">      <span class=\"comment\">// 找到一个异位词窗口</span></span><br><span class=\"line\">      result[index++] = i;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> r = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 向右滑动，只要窗口最左和最右字符相等就继续</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (</span><br><span class=\"line\">        i + r + p.<span class=\"property\">length</span> - <span class=\"number\">1</span> &lt; s.<span class=\"property\">length</span> &amp;&amp;</span><br><span class=\"line\">        s[i + r - <span class=\"number\">1</span>] === s[i + p.<span class=\"property\">length</span> - <span class=\"number\">1</span> + r]</span><br><span class=\"line\">      ) {</span><br><span class=\"line\">        result[index++] = i + r;</span><br><span class=\"line\">        r++;</span><br><span class=\"line\">      }</span><br><span class=\"line\">      i = i + r; <span class=\"comment\">// 跳到下一个需要判断的位置</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"题解-4\"><a href=\"#题解-4\" class=\"headerlink\" title=\"题解\"></a>题解</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findAnagrams = <span class=\"keyword\">function</span> (<span class=\"params\">s, p</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sLen = s.<span class=\"property\">length</span>,</span><br><span class=\"line\">    pLen = p.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sLen &lt; pLen) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ans = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sCount = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">26</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pCount = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">26</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; pLen; ++i) {</span><br><span class=\"line\">    ++sCount[s[i].<span class=\"title function_\">charCodeAt</span>() - <span class=\"string\">\"a\"</span>.<span class=\"title function_\">charCodeAt</span>()];</span><br><span class=\"line\">    ++pCount[p[i].<span class=\"title function_\">charCodeAt</span>() - <span class=\"string\">\"a\"</span>.<span class=\"title function_\">charCodeAt</span>()];</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sCount.<span class=\"title function_\">toString</span>() === pCount.<span class=\"title function_\">toString</span>()) {</span><br><span class=\"line\">    ans.<span class=\"title function_\">push</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; sLen - pLen; ++i) {</span><br><span class=\"line\">    --sCount[s[i].<span class=\"title function_\">charCodeAt</span>() - <span class=\"string\">\"a\"</span>.<span class=\"title function_\">charCodeAt</span>()];</span><br><span class=\"line\">    ++sCount[s[i + pLen].<span class=\"title function_\">charCodeAt</span>() - <span class=\"string\">\"a\"</span>.<span class=\"title function_\">charCodeAt</span>()];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sCount.<span class=\"title function_\">toString</span>() === pCount.<span class=\"title function_\">toString</span>()) {</span><br><span class=\"line\">      ans.<span class=\"title function_\">push</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"总结-4\"><a href=\"#总结-4\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h2 id=\"六、相交链表-160\"><a href=\"#六、相交链表-160\" class=\"headerlink\" title=\"六、相交链表(160)\"></a>六、相交链表(160)</h2><h3 id=\"标签-5\"><a href=\"#标签-5\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ul>\n<li>哈希表</li>\n<li>链表</li>\n<li>双指针</li>\n</ul>\n<h3 id=\"题目描述-5\"><a href=\"#题目描述-5\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p>\n<p>图示两个链表在节点 <code>c1</code> 开始相交：</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/leetcode-weekly-journal-3/2.png\" alt=\"相交链表\"></p>\n<p>题目数据保证整个链式结构中<strong>不存在环</strong>。</p>\n<p>注意，函数返回结果后，链表必须<strong>保持其原始结构</strong>。</p>\n<p>自定义评测：</p>\n<p>评测系统 的输入如下（你设计的程序 不适用 此输入）：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>intersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0</li>\n<li>listA - 第一个链表</li>\n<li>listB - 第二个链表</li>\n<li>skipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数</li>\n<li>skipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数</li>\n</ul></blockquote>\n<p>评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被<strong>视作正确答案</strong>。</p>\n<p>示例 1：</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/leetcode-weekly-journal-3/3.png\" alt=\"相交链表示例1\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3</code><br>输出：<code>Intersected at '8'</code></p></blockquote>\n<p>解释：相交节点的值为 <code>8</code> （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 <code>A</code> 为 <code>[4,1,8,4,5]</code>，链表 <code>B</code> 为 <code>[5,6,1,8,4,5]</code>。<br>在 <code>A</code> 中，相交节点前有 <code>2</code> 个节点；在 <code>B</code> 中，相交节点前有 <code>3</code> 个节点。<br>— 请注意相交节点的值不为 <code>1</code>，因为在链表 <code>A</code> 和链表 <code>B</code> 之中值为 <code>1</code> 的节点 (<code>A</code> 中第二个节点和 <code>B</code> 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 <code>A</code> 和链表 <code>B</code> 中值为 <code>8</code> 的节点 (<code>A</code> 中第三个节点，<code>B</code> 中第四个节点) 在内存中指向相同的位置。</p>\n<p>示例 2：</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/leetcode-weekly-journal-3/4.png\" alt=\"相交链表示例2\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</code><br>输出：<code>Intersected at '2'</code></p></blockquote>\n<p>解释：相交节点的值为 <code>2</code> （注意，如果两个链表相交则不能为 <code>0</code>）。<br>从各自的表头开始算起，链表 <code>A</code> 为 <code>[1,9,1,2,4]</code>，链表 <code>B</code> 为 <code>[3,2,4]</code>。<br>在 <code>A</code> 中，相交节点前有 <code>3</code> 个节点；在 <code>B</code> 中，相交节点前有 <code>1</code> 个节点。</p>\n<p>示例 3：</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/leetcode-weekly-journal-3/5.png\" alt=\"相交链表示例3\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</code><br>输出：<code>No intersection</code></p></blockquote>\n<p>解释：从各自的表头开始算起，链表 <code>A</code> 为 <code>[2,6,4]</code>，链表 <code>B</code> 为 <code>[1,5]</code>。<br>由于这两个链表不相交，所以 <code>intersectVal</code> 必须为 <code>0</code>，而 <code>skipA</code> 和 <code>skipB</code> 可以是任意值。<br>这两个链表不相交，因此返回 <code>null</code> 。</p>\n<h3 id=\"我的答案-5\"><a href=\"#我的答案-5\" class=\"headerlink\" title=\"我的答案\"></a>我的答案</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) {</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * }</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> {<span class=\"type\">ListNode</span>} <span class=\"variable\">headA</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> {<span class=\"type\">ListNode</span>} <span class=\"variable\">headB</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> {<span class=\"type\">ListNode</span>}</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"keyword\">function</span> (<span class=\"params\">headA, headB</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hash = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (headA) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.<span class=\"title function_\">has</span>(headA)) <span class=\"keyword\">return</span> headA;</span><br><span class=\"line\">    hash.<span class=\"title function_\">set</span>(headA, <span class=\"number\">1</span>);</span><br><span class=\"line\">    headA = headA.<span class=\"property\">next</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (headB) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.<span class=\"title function_\">has</span>(headB)) <span class=\"keyword\">return</span> headB;</span><br><span class=\"line\">    hash.<span class=\"title function_\">set</span>(headB, <span class=\"number\">1</span>);</span><br><span class=\"line\">    headB = headB.<span class=\"property\">next</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"题解-5\"><a href=\"#题解-5\" class=\"headerlink\" title=\"题解\"></a>题解</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 双指针法将空间复杂度降至O(1)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"keyword\">function</span> (<span class=\"params\">headA, headB</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (headA === <span class=\"literal\">null</span> || headB === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pA = headA,</span><br><span class=\"line\">    pB = headB;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pA !== pB) {</span><br><span class=\"line\">    pA = pA === <span class=\"literal\">null</span> ? headB : pA.<span class=\"property\">next</span>;</span><br><span class=\"line\">    pB = pB === <span class=\"literal\">null</span> ? headA : pB.<span class=\"property\">next</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pA;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"总结-5\"><a href=\"#总结-5\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>判断两个链表是否相交，可以使用哈希集合存储链表节点。</p>\n<p>首先遍历链表 <code>headA</code>，并将链表 <code>headA</code> 中的每个节点加入哈希集合中。然后遍历链表 <code>headB</code>，对于遍历到的每个节点，判断该节点是否在哈希集合中：</p>\n<ul>\n<li>如果当前节点不在哈希集合中，则继续遍历下一个节点；</li>\n<li>如果当前节点在哈希集合中，则后面的节点都在哈希集合中，即从当前节点开始的所有节点都在两个链表的相交部分，因此在链表 <code>headB</code> 中遍历到的第一个在哈希集合中的节点就是两个链表相交的节点，返回该节点。</li>\n</ul>\n<p>如果链表 <code>headB</code> 中的所有节点都不在哈希集合中，则两个链表不相交，返回 <code>null</code>。</p>\n<p>时间复杂度：<code>O(m+n)</code>，其中 <code>m</code> 和 <code>n</code> 是分别是链表 <code>headA</code> 和 <code>headB</code> 的长度。需要遍历两个链表各一次。空间复杂度：<code>O(m)</code>，其中 <code>m</code> 是链表 <code>headA</code> 的长度。需要使用哈希集合存储链表 <code>headA</code> 中的全部节点。</p>\n<p>使用双指针的方法，可以将空间复杂度降至 O(1)。</p>\n<p>只有当链表 <code>headA</code> 和 <code>headB</code> 都不为空时，两个链表才可能相交。因此首先判断链表 <code>headA</code> 和 <code>headB</code> 是否为空，如果其中至少有一个链表为空，则两个链表一定不相交，返回 <code>null</code>。</p>\n<p>当链表 <code>headA</code> 和 <code>headB</code> 都不为空时，创建两个指针 <code>pA</code> 和 <code>pB</code>，初始时分别指向两个链表的头节点 <code>headA</code> 和 <code>headB</code>，然后将两个指针依次遍历两个链表的每个节点。具体做法如下：</p>\n<ul>\n<li>每步操作需要同时更新指针 <code>pA</code> 和 <code>pB</code>。</li>\n<li>如果指针 <code>pA</code> 不为空，则将指针 <code>pA</code> 移到下一个节点；如果指针 <code>pB</code> 不为空，则将指针 <code>pB</code> 移到下一个节点。</li>\n<li>如果指针 <code>pA</code> 为空，则将指针 <code>pA</code> 移到链表 <code>headB</code> 的头节点；如果指针 <code>pB</code> 为空，则将指针 <code>pB</code> 移到链表 <code>headA</code> 的头节点。</li>\n<li>当指针 <code>pA</code> 和 <code>pB</code> 指向同一个节点或者都为空时，返回它们指向的节点或者 <code>null</code>。</li>\n</ul>\n<p>下面提供双指针方法的正确性证明。考虑两种情况，第一种情况是两个链表相交，第二种情况是两个链表不相交。</p>\n<p>情况一：两个链表相交。链表 <code>headA</code> 和 <code>headB</code> 的长度分别是 <code>m</code> 和 <code>n</code>。假设链表 <code>headA</code> 的不相交部分有 <code>a</code> 个节点，链表 <code>headB</code> 的不相交部分有 <code>b</code> 个节点，两个链表相交的部分有 <code>c</code> 个节点，则有 <code>a+c=m</code>，<code>b+c=n</code>。</p>\n<ul>\n<li>如果 <code>a=b</code>，则两个指针会同时到达两个链表相交的节点，此时返回相交的节点；</li>\n<li>如果 <code>a!=b</code>，则指针 <code>pA</code> 会遍历完链表 <code>headA</code>，指针 <code>pB</code> 会遍历完链表 <code>headB</code>，两个指针不会同时到达链表的尾节点，然后指针 <code>pA</code> 移到链表 <code>headB</code> 的头节点，指针 <code>pB</code> 移到链表 <code>headA</code> 的头节点，然后两个指针继续移动，在指针 <code>pA</code> 移动了 <code>a+c+b</code> 次、指针 <code>pB</code> 移动了 <code>b+c+a</code> 次之后，两个指针会同时到达两个链表相交的节点，该节点也是两个指针第一次同时指向的节点，此时返回相交的节点。</li>\n</ul>\n<p>情况二：两个链表不相交。链表 <code>headA</code> 和 <code>headB</code> 的长度分别是 <code>m</code> 和 <code>n</code>。考虑当 <code>m=n</code> 和 <code>m!=n</code> 时，两个指针分别会如何移动：</p>\n<ul>\n<li>如果 <code>m=n</code>，则两个指针会同时到达两个链表的尾节点，然后同时变成空值 <code>null</code>，此时返回 <code>null</code>；</li>\n<li>如果 <code>m!=n</code>，则由于两个链表没有公共节点，两个指针也不会同时到达两个链表的尾节点，因此两个指针都会遍历完两个链表，在指针 <code>pA</code> 移动了 <code>m+n</code> 次、指针 <code>pB</code> 移动了 <code>n+m</code> 次之后，两个指针会同时变成空值 <code>null</code>，此时返回 <code>null</code>。</li>\n</ul>\n<h2 id=\"八、反转链表-206\"><a href=\"#八、反转链表-206\" class=\"headerlink\" title=\"八、反转链表(206)\"></a>八、反转链表(206)</h2><h3 id=\"标签-6\"><a href=\"#标签-6\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ul>\n<li>递归</li>\n<li>链表</li>\n</ul>\n<h3 id=\"题目描述-6\"><a href=\"#题目描述-6\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>\n<p>示例 1：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>head = [1,2,3,4,5]</code><br>输出：<code>[5,4,3,2,1]</code></p></blockquote>\n<p>示例 2：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>head = [1,2]</code><br>输出：<code>[2,1]</code></p></blockquote>\n<p>示例 3：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>head = []</code><br>输出：<code>[]</code></p></blockquote>\n<h3 id=\"我的答案-6\"><a href=\"#我的答案-6\" class=\"headerlink\" title=\"我的答案\"></a>我的答案</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) {</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * }</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> {<span class=\"type\">ListNode</span>} <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> {<span class=\"type\">ListNode</span>}</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 非递归</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"keyword\">function</span> (<span class=\"params\">head</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (head) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> next = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    head.<span class=\"property\">next</span> = prev;</span><br><span class=\"line\">    prev = head;</span><br><span class=\"line\">    head = next;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"keyword\">function</span> (<span class=\"params\">head</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reverse = <span class=\"keyword\">function</span> (<span class=\"params\">curr, prev</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!curr) <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> next = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">    curr.<span class=\"property\">next</span> = prev;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">reverse</span>(next, curr);</span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">reverse</span>(head, <span class=\"literal\">null</span>);</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"题解-6\"><a href=\"#题解-6\" class=\"headerlink\" title=\"题解\"></a>题解</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"keyword\">function</span> (<span class=\"params\">head</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curr = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (curr) {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> next = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">    curr.<span class=\"property\">next</span> = prev;</span><br><span class=\"line\">    prev = curr;</span><br><span class=\"line\">    curr = next;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"keyword\">function</span> (<span class=\"params\">head</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span> || head.<span class=\"property\">next</span> == <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newHead = <span class=\"title function_\">reverseList</span>(head.<span class=\"property\">next</span>);</span><br><span class=\"line\">  head.<span class=\"property\">next</span>.<span class=\"property\">next</span> = head;</span><br><span class=\"line\">  head.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"总结-6\"><a href=\"#总结-6\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h2 id=\"八、三角形的最大周长-976\"><a href=\"#八、三角形的最大周长-976\" class=\"headerlink\" title=\"八、三角形的最大周长(976)\"></a>八、三角形的最大周长(976)</h2><h3 id=\"标签-7\"><a href=\"#标签-7\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ul>\n<li>贪心</li>\n<li>数组</li>\n<li>数学</li>\n<li>排序</li>\n</ul>\n<h3 id=\"题目描述-7\"><a href=\"#题目描述-7\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定由一些正数（代表长度）组成的数组 <code>nums</code> ，返回 由其中三个长度组成的、面积不为零的三角形的最大周长 。如果不能形成任何面积不为零的三角形，返回 <code>0</code>。</p>\n<p>示例 1：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>nums = [2,1,2]</code><br>输出：<code>5</code></p></blockquote>\n<p>解释：你可以用三个边长组成一个三角形:<code>1 2 2</code>。</p>\n<p>示例 2：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入：<code>nums = [1,2,1,10]</code><br>输出：<code>0</code></p></blockquote>\n<p>解释：</p>\n<p>你不能用边长 <code>1,1,2</code> 来组成三角形。<br>不能用边长 <code>1,1,10</code> 来构成三角形。<br>不能用边长 <code>1、2 和 10</code> 来构成三角形。<br>因为我们不能用任何三条边长来构成一个非零面积的三角形，所以我们返回 <code>0</code>。</p>\n<h3 id=\"我的答案-7\"><a href=\"#我的答案-7\" class=\"headerlink\" title=\"我的答案\"></a>我的答案</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> {<span class=\"type\">number[]</span>} <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> {<span class=\"type\">number</span>}</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> largestPerimeter = <span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) {</span><br><span class=\"line\">  nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (nums[index] &gt;= nums[index - <span class=\"number\">1</span>] + nums[index - <span class=\"number\">2</span>]) {</span><br><span class=\"line\">    index--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums[index] + nums[index - <span class=\"number\">1</span>] + nums[index - <span class=\"number\">2</span>];</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"题解-7\"><a href=\"#题解-7\" class=\"headerlink\" title=\"题解\"></a>题解</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> largestPerimeter = <span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) {</span><br><span class=\"line\">  nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">2</span>; --i) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i - <span class=\"number\">2</span>] + nums[i - <span class=\"number\">1</span>] &gt; nums[i]) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nums[i - <span class=\"number\">2</span>] + nums[i - <span class=\"number\">1</span>] + nums[i];</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"总结-7\"><a href=\"#总结-7\" class=\"headerlink\" title=\"总结\"></a>总结</h3>","text":"力扣周记-32025.9.22 - 2025.9.28 一、比较版本号(165)标签 字符串 双指针 题目描述给你两个 版本号字符串 version1 和 ve...","permalink":"/post/leetcode-weekly-journal-3","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"算法题","slug":"算法题","count":4,"path":"api/categories/算法题.json"}],"tags":[{"name":"笔记","slug":"笔记","count":15,"path":"api/tags/笔记.json"},{"name":"力扣","slug":"力扣","count":4,"path":"api/tags/力扣.json"},{"name":"算法","slug":"算法","count":4,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8A%9B%E6%89%A3%E5%91%A8%E8%AE%B0-3\"><span class=\"toc-text\">力扣周记-3</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7-165\"><span class=\"toc-text\">一、比较版本号(165)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E7%AD%94%E6%A1%88\"><span class=\"toc-text\">我的答案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\">题解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8-11\"><span class=\"toc-text\">二、盛最多水的容器(11)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE-1\"><span class=\"toc-text\">标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E7%AD%94%E6%A1%88-1\"><span class=\"toc-text\">我的答案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3-1\"><span class=\"toc-text\">题解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C-15\"><span class=\"toc-text\">三、三数之和(15)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE-2\"><span class=\"toc-text\">标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-2\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E7%AD%94%E6%A1%88-2\"><span class=\"toc-text\">我的答案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3-2\"><span class=\"toc-text\">题解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-3\"><span class=\"toc-text\">四、无重复字符的最长子串(3)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE-3\"><span class=\"toc-text\">标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-3\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E7%AD%94%E6%A1%88-3\"><span class=\"toc-text\">我的答案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3-3\"><span class=\"toc-text\">题解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D-438\"><span class=\"toc-text\">五、找到字符串中所有字母异位词(438)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE-4\"><span class=\"toc-text\">标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-4\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E7%AD%94%E6%A1%88-4\"><span class=\"toc-text\">我的答案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3-4\"><span class=\"toc-text\">题解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8-160\"><span class=\"toc-text\">六、相交链表(160)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE-5\"><span class=\"toc-text\">标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-5\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E7%AD%94%E6%A1%88-5\"><span class=\"toc-text\">我的答案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3-5\"><span class=\"toc-text\">题解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8-206\"><span class=\"toc-text\">八、反转链表(206)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE-6\"><span class=\"toc-text\">标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-6\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E7%AD%94%E6%A1%88-6\"><span class=\"toc-text\">我的答案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3-6\"><span class=\"toc-text\">题解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%91%A8%E9%95%BF-976\"><span class=\"toc-text\">八、三角形的最大周长(976)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE-7\"><span class=\"toc-text\">标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-7\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E7%AD%94%E6%A1%88-7\"><span class=\"toc-text\">我的答案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3-7\"><span class=\"toc-text\">题解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-7\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol></li></ol>","author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"力扣周记-4","uid":"29ce0c84bae936ed46a856aec05cb9ef","slug":"leetcode-weekly-journal-4","date":"2025-09-23T14:39:40.000Z","updated":"2025-10-02T02:21:44.688Z","comments":true,"path":"api/articles/leetcode-weekly-journal-4.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-leetcode.png","text":"力扣周记-42025.9.29 - 2025.10.5 一、回文链表(234)标签 栈 递归 链表 双指针 题目描述我的答案123456789101112131...","permalink":"/post/leetcode-weekly-journal-4","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"算法题","slug":"算法题","count":4,"path":"api/categories/算法题.json"}],"tags":[{"name":"笔记","slug":"笔记","count":15,"path":"api/tags/笔记.json"},{"name":"力扣","slug":"力扣","count":4,"path":"api/tags/力扣.json"},{"name":"算法","slug":"算法","count":4,"path":"api/tags/算法.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"力扣周记-2","uid":"4b9b17caa7847eb05c04c2c412ad271a","slug":"leetcode-weekly-journal-2","date":"2025-09-13T10:46:15.000Z","updated":"2025-10-02T02:28:07.567Z","comments":true,"path":"api/articles/leetcode-weekly-journal-2.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-leetcode.png","text":"力扣周记-22025.9.15 - 2025.9.21 一、字母异位词分组(49)标签 哈希表 题目描述给你一个字符串数组，请你将 字母异位词 组合在一起。可以...","permalink":"/post/leetcode-weekly-journal-2","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"算法题","slug":"算法题","count":4,"path":"api/categories/算法题.json"}],"tags":[{"name":"笔记","slug":"笔记","count":15,"path":"api/tags/笔记.json"},{"name":"力扣","slug":"力扣","count":4,"path":"api/tags/力扣.json"},{"name":"算法","slug":"算法","count":4,"path":"api/tags/算法.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}