{"title":"JS高级-2-高阶函数与闭包","uid":"44b8e9de277aafbb00bcc826b51452ad","slug":"js-premier-2-higher-order-functions-and-closures","date":"2025-07-21T14:38:54.000Z","updated":"2025-08-06T12:09:52.193Z","comments":true,"path":"api/articles/js-premier-2-higher-order-functions-and-closures.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","content":"<h1 id=\"JS高级-2-高阶函数与闭包\"><a href=\"#JS高级-2-高阶函数与闭包\" class=\"headerlink\" title=\"JS高级-2-高阶函数与闭包\"></a>JS高级-2-高阶函数与闭包</h1><h2 id=\"一、JS-中函数是一等公民\"><a href=\"#一、JS-中函数是一等公民\" class=\"headerlink\" title=\"一、JS 中函数是一等公民\"></a>一、JS 中函数是一等公民</h2><p>在 JavaScript 中，函数被视为一等公民（First-Class Citizen），这意味着函数可以像其他数据类型一样被处理。具体来说，函数可以：</p>\n<ol>\n<li><p><strong>作为变量赋值</strong>：函数可以被赋值给变量。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> greet = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`Hello, <span class=\"subst\">${name}</span>!`</span>;</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">greet</span>(<span class=\"string\">\"Alice\"</span>)); <span class=\"comment\">// 输出: Hello, Alice!</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>作为参数传递</strong>：函数可以作为参数传递给其他函数。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">executeFunction</span>(<span class=\"params\">fn, value</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(value);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">executeFunction</span>(greet, <span class=\"string\">\"Bob\"</span>)); <span class=\"comment\">// 输出: Hello, Bob!</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>作为返回值</strong>：函数可以从其他函数中返回。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createGreeter</span>(<span class=\"params\">greeting</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">${greeting}</span>, <span class=\"subst\">${name}</span>!`</span>;</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">const</span> sayHello = <span class=\"title function_\">createGreeter</span>(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sayHello</span>(<span class=\"string\">\"Charlie\"</span>)); <span class=\"comment\">// 输出: Hello, Charlie!</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>存储在数据结构中</strong>：函数可以存储在数组或对象中。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> functionsArray = [greet, sayHello];</span><br><span class=\"line\">functionsArray.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">fn</span>(<span class=\"string\">\"Dave\"</span>))); <span class=\"comment\">// 输出: Hello, Dave</span></span><br></pre></td></tr></tbody></table></figure></li>\n</ol>\n<p><em>注意：函数名 Fn 是整个函数的引用，而 Fn()是执行该函数的返回值。</em></p>\n<h2 id=\"二、高阶函数\"><a href=\"#二、高阶函数\" class=\"headerlink\" title=\"二、高阶函数\"></a>二、高阶函数</h2><p>高阶函数是指接受一个或多个函数作为参数，或者返回一个函数的函数。高阶函数在 JavaScript 中非常常见，尤其是在处理数组和函数式编程时。</p>\n<p>开发者可以使用内置的高阶函数也可以自己编写高阶函数。</p>\n<p><strong>常见的数组内置高阶函数：</strong></p>\n<p>JavaScript 提供了许多内置的高阶函数来处理数组，这些函数使得数组操作更加简洁和易读。以下是一些常见的内置高阶函数：</p>\n<ul>\n<li><p><strong>forEach</strong>：对数组的每个元素执行一次提供的函数。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">numbers.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num * <span class=\"number\">2</span>)); <span class=\"comment\">// 输出: 2, 4, 6</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>map</strong>：创建一个新数组，其元素是通过调用提供的函数处理原数组的每个元素。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> doubled = numbers.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> num * <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(doubled); <span class=\"comment\">// 输出: [2, 4, 6]</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>filter</strong>：创建一个新数组，其元素是通过提供的函数测试的原数组的所有元素。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> evens = numbers.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> num % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(evens); <span class=\"comment\">// 输出: [2]</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>reduce</strong>：对数组的每个元素执行一个函数，将其结果汇总为单个值。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = numbers.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, num</span>) =&gt;</span> acc + num, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum); <span class=\"comment\">// 输出: 6</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>find</strong>：返回数组中满足提供的测试函数的第一个元素。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> firstEven = numbers.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> num % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(firstEven); <span class=\"comment\">// 输出: 2</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>findIndex</strong>：返回数组中满足提供的测试函数的第一个元素的索引。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> firstEvenIndex = numbers.<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> num % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(firstEvenIndex); <span class=\"comment\">// 输出: 1</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>some</strong>：测试数组中是否至少有一个元素满足提供的测试函数。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> hasEven = numbers.<span class=\"title function_\">some</span>(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> num % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(hasEven); <span class=\"comment\">// 输出: true</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>every</strong>：测试数组中的所有元素是否都满足提供的测试函数。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allPositive = numbers.<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> num &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(allPositive); <span class=\"comment\">// 输出: true</span></span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<p>这些高阶函数的参数是一个返回值为 Boolean 类型的回调函数，将筛选条件作为函数返回值的依据。</p>\n<p><strong>自定义高阶函数：</strong></p>\n<p>高阶函数不仅限于内置的数组方法，开发者也可以自定义高阶函数。以下是一个简单的自定义高阶函数示例：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">repeat</span>(<span class=\"params\">fn, times</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; times; i++) {</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>(...args);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">sayHello</span> = (<span class=\"params\">name</span>) =&gt; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, <span class=\"subst\">${name}</span>!`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> repeatHello = <span class=\"title function_\">repeat</span>(sayHello, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"title function_\">repeatHello</span>(<span class=\"string\">\"Alice\"</span>); <span class=\"comment\">// 输出: Hello, Alice! (3次)</span></span><br><span class=\"line\"><span class=\"comment\">// 解释：repeat函数接受一个函数fn和一个次数times，返回一个新函数，该新函数会调用fn指定的次数。</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"三、闭包\"><a href=\"#三、闭包\" class=\"headerlink\" title=\"三、闭包\"></a>三、闭包</h2><h3 id=\"闭包的定义与原理\"><a href=\"#闭包的定义与原理\" class=\"headerlink\" title=\"闭包的定义与原理\"></a>闭包的定义与原理</h3><p><strong>闭包的定义：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-2-higher-order-functions-and-closures/1.png\" alt=\"JS中闭包的定义\"></p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包示例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar; <span class=\"comment\">// 需要返回内部函数</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"title function_\">foo</span>();</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(); <span class=\"comment\">// 输出: foo</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>闭包(Closure)</strong> 是指一个函数可以访问其外部作用域中的变量，即使在外部函数已经执行完毕后，内部函数仍然可以访问这些变量。也就是说最内层函数的父级作用域在执行后依然存在而没有被销毁。</p>\n<p><strong>闭包的原理：</strong></p>\n<p>这是因为内层函数在创建时会保存对其外部作用域的引用，而根据 JS 中的 GC 机制，只要引用存在，外部作用域就不会被销毁，因此外部作用域中的变量值也可以被“记住”。</p>\n<p>闭包的访问过程：<br><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-2-higher-order-functions-and-closures/2.png\" alt=\"闭包的访问过程\"></p>\n<p>闭包的执行过程：<br><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-2-higher-order-functions-and-closures/3.png\" alt=\"闭包的执行过程\"></p>\n<p>需要说明的是，若代码改为：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar; <span class=\"comment\">// 返回内部函数</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = <span class=\"title function_\">foo</span>(); <span class=\"comment\">// 调用foo，返回bar函数</span></span><br><span class=\"line\"><span class=\"title function_\">fn1</span>(); <span class=\"comment\">// 输出: foo</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn2 = <span class=\"title function_\">foo</span>(); <span class=\"comment\">// 再次调用foo，返回新的bar函数</span></span><br><span class=\"line\"><span class=\"title function_\">fn2</span>(); <span class=\"comment\">// 输出: foo</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>此时<code>fn1</code> 和 <code>fn2</code> 都是闭包，但它们各自保存了不同的外部作用域。每次调用 <code>foo()</code> 都会创建一个新的作用域，因此 <code>fn1</code> 和 <code>fn2</code> 分别引用了不同的 <code>name</code> 变量。</p>\n<h3 id=\"闭包与内存泄漏\"><a href=\"#闭包与内存泄漏\" class=\"headerlink\" title=\"闭包与内存泄漏\"></a>闭包与内存泄漏</h3><p>闭包虽然非常有用，但如果不正确使用，可能会导致内存泄漏。内存泄漏是指不再需要的对象仍然被引用，从而无法被垃圾回收机制回收。</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-2-higher-order-functions-and-closures/4.png\" alt=\"闭包的内存泄露\"></p>\n<p>使用闭包时需要注意以下性能问题：</p>\n<ol>\n<li><strong>内存占用</strong>：闭包会保持对外部变量的引用，可能导致内存无法及时回收。</li>\n<li><strong>避免在循环中大量创建闭包</strong>：可能导致性能问题和内存泄漏。</li>\n<li><strong>及时清理不需要的闭包引用</strong>：在适当的时候将闭包变量设为 null，帮助垃圾回收。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 内存泄漏示例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createHandler</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> largeData = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1000000</span>).<span class=\"title function_\">fill</span>(<span class=\"string\">'data'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 即使不使用 largeData，它也会被保持在内存中</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'Handler called'</span>);</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确的做法：在不需要时清理引用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = <span class=\"title function_\">createHandler</span>();</span><br><span class=\"line\"><span class=\"comment\">// ... 使用 handler</span></span><br><span class=\"line\">handler = <span class=\"literal\">null</span>; <span class=\"comment\">// 清理引用，帮助垃圾回收</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"补充：存在闭包时AO对象的属性销毁\"><a href=\"#补充：存在闭包时AO对象的属性销毁\" class=\"headerlink\" title=\"补充：存在闭包时AO对象的属性销毁\"></a>补充：存在闭包时AO对象的属性销毁</h3><p>理论上AO对象的属性与AO对象的生命周期相同，即当AO对象存在时，其全部属性都存在，当AO对象销毁时，其属性也会被销毁。</p>\n<p>但是实际上V8引擎在执行时会对AO对象的属性进行优化处理，当函数执行完毕后，AO对象的属性会被销毁，除非存在闭包引用了这些属性。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">        <span class=\"keyword\">debugger</span>; <span class=\"comment\">// 在这里可以观察到只有 name 在闭包中被保留</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// 只引用了 name</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"title function_\">foo</span>();</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(); <span class=\"comment\">// 输出: foo</span></span><br><span class=\"line\"><span class=\"comment\">// 通过浏览器调试工具可以观察到：age 变量被 V8 优化掉了，因为闭包中没有引用它</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h3><p>闭包在 JavaScript 中有许多用途，以下是一些常见的应用场景：</p>\n<ol>\n<li><p><strong>数据封装和私有变量</strong>：闭包可以创建私有变量，这些变量只能通过特定的函数访问，从而实现数据封装。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createCounter</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>; <span class=\"comment\">// 私有变量</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> {</span><br><span class=\"line\">    <span class=\"attr\">increment</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"attr\">decrement</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">      count--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"attr\">getCount</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    },</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">const</span> counter = <span class=\"title function_\">createCounter</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(counter.<span class=\"title function_\">increment</span>()); <span class=\"comment\">// 输出: 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(counter.<span class=\"title function_\">increment</span>()); <span class=\"comment\">// 输出: 2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(counter.<span class=\"title function_\">getCount</span>()); <span class=\"comment\">// 输出: 2</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>函数工厂</strong>：闭包可以用于创建函数工厂，根据不同的参数生成不同的函数。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMultiplier</span>(<span class=\"params\">factor</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">x</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * factor;</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">const</span> double = <span class=\"title function_\">createMultiplier</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> triple = <span class=\"title function_\">createMultiplier</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">double</span>(<span class=\"number\">5</span>)); <span class=\"comment\">// 输出: 10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">triple</span>(<span class=\"number\">5</span>)); <span class=\"comment\">// 输出: 15</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>事件处理</strong>：闭包常用于事件处理函数中，可以访问外部变量。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setupButton</span>(<span class=\"params\">buttonId</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(buttonId);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> clickCount = <span class=\"number\">0</span>; <span class=\"comment\">// 私有变量</span></span><br><span class=\"line\">  button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">\"click\"</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    clickCount++;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Button clicked <span class=\"subst\">${clickCount}</span> times`</span>);</span><br><span class=\"line\">  });</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title function_\">setupButton</span>(<span class=\"string\">\"myButton\"</span>);</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>延迟执行</strong>：闭包可以用于创建延迟执行的函数。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delayedGreeting</span>(<span class=\"params\">name</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, <span class=\"subst\">${name}</span>!`</span>);</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">const</span> greetAlice = <span class=\"title function_\">delayedGreeting</span>(<span class=\"string\">\"Alice\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(greetAlice, <span class=\"number\">1000</span>); <span class=\"comment\">// 1秒后输出: Hello, Alice!</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>模块化编程</strong>：闭包可以用于创建模块，封装相关的功能和数据。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Module</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> privateVar = <span class=\"number\">0</span>; <span class=\"comment\">// 私有变量</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> {</span><br><span class=\"line\">    <span class=\"attr\">increment</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">      privateVar++;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Private variable: <span class=\"subst\">${privateVar}</span>`</span>);</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"attr\">getPrivateVar</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> privateVar;</span><br><span class=\"line\">    },</span><br><span class=\"line\">  };</span><br><span class=\"line\">})();</span><br><span class=\"line\"><span class=\"title class_\">Module</span>.<span class=\"title function_\">increment</span>(); <span class=\"comment\">// 输出: Private variable: 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Module</span>.<span class=\"title function_\">getPrivateVar</span>()); <span class=\"comment\">// 输出: 1</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>防抖和节流</strong>：在实际开发中，闭包常用于实现防抖和节流函数，优化性能。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 防抖函数（使用闭包保存定时器）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, delay</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeoutId;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeoutId);</span><br><span class=\"line\">    timeoutId = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> func.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args), delay);</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 节流函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">func, delay</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (now - lastTime &gt;= delay) {</span><br><span class=\"line\">      func.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">      lastTime = now;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> searchInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">'search'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> debouncedSearch = <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span>(<span class=\"params\">event</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'搜索:'</span>, event.<span class=\"property\">target</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">}, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">searchInput.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">'input'</span>, debouncedSearch);</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>解决循环中的异步问题</strong>：闭包可以解决在循环中使用异步操作时的变量引用问题。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 问题代码</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) {</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 输出 5 个 5</span></span><br><span class=\"line\">  }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用闭包解决</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) {</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">j</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j); <span class=\"comment\">// 输出 0, 1, 2, 3, 4</span></span><br><span class=\"line\">    }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  })(i);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或使用 let（块级作用域）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) {</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 输出 0, 1, 2, 3, 4</span></span><br><span class=\"line\">  }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>函数柯里化</strong>：闭包是实现柯里化的重要手段。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">curried</span>(<span class=\"params\">...args</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> &gt;= fn.<span class=\"property\">length</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args2</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args.<span class=\"title function_\">concat</span>(args2));</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b, c</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> curriedAdd = <span class=\"title function_\">curry</span>(add);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)); <span class=\"comment\">// 输出: 6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>)); <span class=\"comment\">// 输出: 6</span></span><br></pre></td></tr></tbody></table></figure></li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>高阶函数和闭包是 JavaScript 中非常重要的概念。高阶函数使得函数可以作为参数传递或返回，从而实现更灵活的编程模式,它源自 JS 中“函数是第一公民”的规则，也是闭包的实现基础。</p>\n<p>闭包则允许函数访问其外部作用域中的变量，即使外部函数已经执行完毕。使用闭包时也要注意避免内存泄漏问题，同时掌握存在闭包时的AO销毁机制。这些特性使得 JavaScript 在处理异步操作、事件处理和数据封装等方面非常强大。</p>\n<p>参考内容：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1gYpmeKEvt?spm_id_from=333.788.videopod.episodes&amp;vd_source=13be13cef40f3972c65f0af98bf87ea2\">coderwhy 最强 JavaScript 高级教程 16-22 集</a></li>\n</ul>\n","text":"JS高级-2-高阶函数与闭包一、JS 中函数是一等公民在 JavaScript 中，函数被视为一等公民（First-Class Citizen），这意味着函数可...","permalink":"/post/js-premier-2-higher-order-functions-and-closures","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":16,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"进阶","slug":"进阶","count":7,"path":"api/tags/进阶.json"},{"name":"函数","slug":"函数","count":1,"path":"api/tags/函数.json"},{"name":"闭包","slug":"闭包","count":1,"path":"api/tags/闭包.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JS%E9%AB%98%E7%BA%A7-2-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%B8%8E%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">JS高级-2-高阶函数与闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81JS-%E4%B8%AD%E5%87%BD%E6%95%B0%E6%98%AF%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91\"><span class=\"toc-text\">一、JS 中函数是一等公民</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">二、高阶函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">三、闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">闭包的定义与原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85%E4%B8%8E%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">闭包与内存泄漏</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85%EF%BC%9A%E5%AD%98%E5%9C%A8%E9%97%AD%E5%8C%85%E6%97%B6AO%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E9%94%80%E6%AF%81\"><span class=\"toc-text\">补充：存在闭包时AO对象的属性销毁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85%E7%9A%84%E7%94%A8%E9%80%94\"><span class=\"toc-text\">闭包的用途</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JS高级-3-this关键字","uid":"0b480d0ac4115d2e3d40921ad7b91dbd","slug":"js-premier-3-this-in-javascript","date":"2025-07-22T10:05:48.000Z","updated":"2025-08-06T12:09:49.879Z","comments":true,"path":"api/articles/js-premier-3-this-in-javascript.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","text":"JS高级-3-this关键字一、this 的定义this 是 JavaScript 中的一个关键字，用于引用函数执行时的上下文对象。 为什么需要this： th...","permalink":"/post/js-premier-3-this-in-javascript","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":16,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"进阶","slug":"进阶","count":7,"path":"api/tags/进阶.json"},{"name":"面试","slug":"面试","count":2,"path":"api/tags/面试.json"},{"name":"this","slug":"this","count":1,"path":"api/tags/this.json"},{"name":"箭头函数","slug":"箭头函数","count":1,"path":"api/tags/箭头函数.json"},{"name":"绑定规则","slug":"绑定规则","count":1,"path":"api/tags/绑定规则.json"},{"name":"arguments","slug":"arguments","count":1,"path":"api/tags/arguments.json"},{"name":"剩余参数","slug":"剩余参数","count":1,"path":"api/tags/剩余参数.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CSS水平居中样式的8种实现方式","uid":"0ef5e478d063e387bdfd27538e830494","slug":"css-horizontal-center-in-eight-ways","date":"2025-07-17T10:31:03.000Z","updated":"2025-08-06T12:09:26.524Z","comments":true,"path":"api/articles/css-horizontal-center-in-eight-ways.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-css.png","text":"CSS 水平居中样式的8种实现方式假设需要设置水平居中样式的对象是 item ，其父元素为 container 1. text-align: center行内元...","permalink":"/post/css-horizontal-center-in-eight-ways","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"CSS","slug":"CSS","count":7,"path":"api/tags/CSS.json"},{"name":"样式","slug":"样式","count":1,"path":"api/tags/样式.json"},{"name":"水平居中","slug":"水平居中","count":1,"path":"api/tags/水平居中.json"},{"name":"总结","slug":"总结","count":2,"path":"api/tags/总结.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}