{"title":"JS高级-6-面向对象编程-2","uid":"b8c33cb7f848582aa7c9a297a62853e5","slug":"js-premier-6-object-oriented-programming-2","date":"2025-07-31T06:41:18.000Z","updated":"2025-09-18T08:45:42.766Z","comments":true,"path":"api/articles/js-premier-6-object-oriented-programming-2.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","content":"<h1 id=\"JS高级-6-面向对象编程-2\"><a href=\"#JS高级-6-面向对象编程-2\" class=\"headerlink\" title=\"JS高级-6-面向对象编程-2\"></a>JS高级-6-面向对象编程-2</h1><h2 id=\"一、原型链和继承\"><a href=\"#一、原型链和继承\" class=\"headerlink\" title=\"一、原型链和继承\"></a>一、原型链和继承</h2><h3 id=\"面向对象的特性\"><a href=\"#面向对象的特性\" class=\"headerlink\" title=\"面向对象的特性\"></a>面向对象的特性</h3><ol>\n<li>封装（Encapsulation）：将数据（属性）和行为（方法）封装在一起，对外隐藏内部实现细节，只提供对外的接口。</li>\n<li>继承（Inheritance）：子类继承父类的属性和方法，并扩展新的属性和方法。</li>\n<li>多态（Polymorphism）：对象可以具有多种形态，根据不同的情况，执行不同的行为。</li>\n</ol>\n<p>这里我们核心讲<strong>继承</strong>，继承可以帮助我们将重复的代码和逻辑抽象出来，放在父类中，子类可以直接使用父类的属性和方法。</p>\n<p>JS中如何实现继承呢？首先我们需要了解<strong>原型链</strong>的概念。</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"coderwhy\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [[get]] 操作</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 在当前的对象上查找属性</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 如果没有找到，就去对象的原型(__proto__)对象上查找</span></span><br><span class=\"line\">obj.<span class=\"property\">__proto__</span> = {</span><br><span class=\"line\">  <span class=\"attr\">address</span>: <span class=\"string\">\"北京\"</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">address</span>); <span class=\"comment\">// \"北京\"</span></span><br><span class=\"line\">obj.<span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// \"hi\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型链</span></span><br><span class=\"line\">obj.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span> = {</span><br><span class=\"line\">  <span class=\"attr\">country</span>: <span class=\"string\">\"中国\"</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayCountry</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"中国\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Object的原型\"><a href=\"#Object的原型\" class=\"headerlink\" title=\"Object的原型\"></a>Object的原型</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 顶层原型</span></span><br><span class=\"line\">[<span class=\"title class_\">Object</span>: <span class=\"literal\">null</span> prototype] {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeDescriptors</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)); <span class=\"comment\">// 获取顶层原型的全部属性</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>Object的原型对象是 <code>null</code>，该对象上有很多默认的属性和方法。</p>\n<p>原型链关系的内存图：<br><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-6-object-oriented-programming-2/1.png\" alt=\"原型链关系的内存图\"></p>\n<h3 id=\"继承的实现\"><a href=\"#继承的实现\" class=\"headerlink\" title=\"继承的实现\"></a>继承的实现</h3><h4 id=\"用原型链实现继承\"><a href=\"#用原型链实现继承\" class=\"headerlink\" title=\"用原型链实现继承\"></a>用原型链实现继承</h4><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原型链实现继承</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = p; <span class=\"comment\">// 将Person的实例对象作为Student的原型对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型链实现继承的弊端</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 打印stu对象，继承的属性是看不到的</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stu.<span class=\"property\">name</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 继承的属性是共享的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">stu1.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">\"小王\"</span>); <span class=\"comment\">// 获取引用，修改引用的值，会相互影响</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stu2.<span class=\"property\">friends</span>); <span class=\"comment\">// 也会改变stu2的friends，里面有\"小王\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 不好处理参数传递</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"借用构造函数-constructor-stealing-实现继承\"><a href=\"#借用构造函数-constructor-stealing-实现继承\" class=\"headerlink\" title=\"借用构造函数(constructor stealing)实现继承\"></a>借用构造函数(constructor stealing)实现继承</h4><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类：公共属性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age, friends</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = friends;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">eating</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">\" eating\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类：特有属性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name, age, friends, sno</span>) {</span><br><span class=\"line\">  <span class=\"comment\">// 借用构造函数</span></span><br><span class=\"line\">  <span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name, age, friends);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sno</span> = sno;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">studying</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">\" studying\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 借用构造函数的弊端</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 父类构造函数被多次调用</span></span><br><span class=\"line\"><span class=\"comment\">// 2. stu的原型对象上会多出一些属性</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"直接将父类的原型赋值到子类原型对象中\"><a href=\"#直接将父类的原型赋值到子类原型对象中\" class=\"headerlink\" title=\"直接将父类的原型赋值到子类原型对象中\"></a>直接将父类的原型赋值到子类原型对象中</h4><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">studying</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">\" studying\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弊端</span></span><br><span class=\"line\"><span class=\"comment\">// 父类的原型对象被修改了，不符合面向对象的理论，是不正确的</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"原型式继承函数的实现\"><a href=\"#原型式继承函数的实现\" class=\"headerlink\" title=\"原型式继承函数的实现\"></a>原型式继承函数的实现</h4><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方案一：Douglas Crockford 提出的</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createObj</span>(<span class=\"params\">o</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) {}</span><br><span class=\"line\">  F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方案二：有了 Object.setPrototypeOf 方法后的另一种实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createObject</span>(<span class=\"params\">o</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newObj = {};</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">setPrototypeOf</span>(newObj, o);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方案三：ES5中提供的方法</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(o);</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h4><p>寄生式继承(Parasitic Inheritance)是与原型式继承紧密相关的一种思想，同样由道格拉斯·克罗克福德(Douglas Crockford)提出。寄生式继承的基本思想是将原型类继承和工厂模式结合，即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，然后返回这个对象。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> personObj = {</span><br><span class=\"line\">  <span class=\"title function_\">running</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"running\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createStudent</span>(<span class=\"params\">sno</span>) {</span><br><span class=\"line\">  <span class=\"comment\">// 1. 以原型式继承为基础，创建一个新对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> stu = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. 扩展新对象</span></span><br><span class=\"line\">  sno.<span class=\"property\">sno</span> = sno;</span><br><span class=\"line\">  stu.<span class=\"property\">studying</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"studying\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. 返回新对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> stu;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用工厂函数批量生成</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"title function_\">createStudent</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu2 = <span class=\"title function_\">createStudent</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu3 = <span class=\"title function_\">createStudent</span>(<span class=\"number\">3</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h4><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createObj</span>(<span class=\"params\">o</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) {}</span><br><span class=\"line\">  F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) { <span class=\"comment\">// SubType: 子类，SuperType: 父类</span></span><br><span class=\"line\">  <span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title function_\">createObj</span>(superType.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">\"constructor\"</span>, {</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"title class_\">SubType</span></span><br><span class=\"line\">  });</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age, friends</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = friends;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">eating</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">\" eating\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name, age, friends, sno, score</span>) {</span><br><span class=\"line\">  <span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name, age, friends);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sno</span> = sno;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">score</span> = score;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">inheritPrototype</span>(<span class=\"title class_\">Student</span>, <span class=\"title class_\">Person</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Student.prototype = Object.create(Person.prototype);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">studying</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">\" studying\"</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"JS原型的补充\"><a href=\"#JS原型的补充\" class=\"headerlink\" title=\"JS原型的补充\"></a>JS原型的补充</h3><h4 id=\"判断方法\"><a href=\"#判断方法\" class=\"headerlink\" title=\"判断方法\"></a>判断方法</h4><ul>\n<li><code>hasOwnProperty()</code>：判断某个属性是否是对象本身的属性，而不是继承来的属性。</li>\n<li><code>in</code>：判断某个属性是否在对象中（包括继承的属性）。</li>\n<li><code>instanceof</code>：判断某个对象是否是某个类的实例，只要是在原型链上就返回<code>true</code>。</li>\n<li><code>isPrototypeOf()</code>：判断某个对象是否在另一个对象的原型链上。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"why\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> info = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj, {</span><br><span class=\"line\">  <span class=\"attr\">address</span>: {</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"string\">\"北京\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(info.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">\"name\"</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"name\"</span> <span class=\"keyword\">in</span> info); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instanceof 与 isPrototypeOf 的区别</span></span><br><span class=\"line\"><span class=\"comment\">// instanceof 是判断构造函数的原型对象是否在实例对象的原型链上，右侧参数必须是一个构造函数</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(info <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> info2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(info2 <span class=\"keyword\">instanceof</span> obj); <span class=\"comment\">// 报错，因为 obj 不是构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// isPrototypeOf 是判断某个对象是否在另一个对象的原型链上，参数可以是任意对象</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(info)); <span class=\"comment\">// true</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"原型继承关系\"><a href=\"#原型继承关系\" class=\"headerlink\" title=\"原型继承关系\"></a>原型继承关系</h4><p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-6-object-oriented-programming-2/2.png\" alt=\"原型继承关系\"></p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"why\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">__proto__</span>); <span class=\"comment\">// 对象里面有一个__proto__属性，隐式原型对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Foo 是一个函数，它会有一个显式原型对象 Foo.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// Foo.prototype 来自哪里？</span></span><br><span class=\"line\"><span class=\"comment\">// 答案：创建了一个函数，Foo.prototype = { constructor: Foo }</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Foo 也是一个对象，它会有一个隐式原型对象 Foo.__proto__</span></span><br><span class=\"line\"><span class=\"comment\">// Foo.__proto__ 来自哪里？</span></span><br><span class=\"line\"><span class=\"comment\">// 答案：函数是由 Function 构造函数创建的，Function.prototype = { constructor: Function }</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"二、ES6中的类与继承\"><a href=\"#二、ES6中的类与继承\" class=\"headerlink\" title=\"二、ES6中的类与继承\"></a>二、ES6中的类与继承</h2><p>在ES6(ECMAScript 2015)中，引入了类(class)的概念，类是基于原型的语法糖，使得面向对象编程更加直观和易于理解。</p>\n<h3 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">\"张三\"</span>, <span class=\"string\">\"李四\"</span>, <span class=\"string\">\"王五\"</span>, <span class=\"string\">\"赵六\"</span>, <span class=\"string\">\"钱七\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类的声明</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 类的构造方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 注意：一个类只能有一个构造函数</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 在内存中创建一个对象 moni = {}</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 将类的原型prototype赋值给创建出来的对象 moni.__proto__ = Person.prototype</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 将对象赋值给函数的this：new 绑定 this = moni</span></span><br><span class=\"line\">  <span class=\"comment\">// 4. 执行函数体中的代码</span></span><br><span class=\"line\">  <span class=\"comment\">// 5. 自动返回创建出来的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_address</span> = <span class=\"string\">\"北京\"</span>; <span class=\"comment\">// 私有属性</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 类中定义的方法，本质上是在原型上创建公共的方法，是被共享的</span></span><br><span class=\"line\">  <span class=\"title function_\">eating</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">\" eating\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"title function_\">running</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">\" running\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 类的访问器方法</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">address</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_address</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">address</span>(<span class=\"params\">newAddress</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_address</span> = newAddress;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 类的静态方法(类方法)</span></span><br><span class=\"line\">  <span class=\"comment\">// Person.randomPerson()</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">randomPerson</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nameIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * names.<span class=\"property\">length</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = names[nameIndex];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(name, age);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类的表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">class</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 研究一下类的特点</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">Person</span>); <span class=\"comment\">// function，typeof 不区分</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// {}</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span>); <span class=\"comment\">// [Object: null prototype] {}</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>); <span class=\"comment\">// [class Person]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"why\"</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"class中实现继承\"><a href=\"#class中实现继承\" class=\"headerlink\" title=\"class中实现继承\"></a>class中实现继承</h3><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> {</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">personMethod</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">\" personMethod\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">staticMethod</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"PersonStaticMethod\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类/派生类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> {</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age, sno</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// super本质上是父类的构造函数</span></span><br><span class=\"line\">    <span class=\"comment\">// super的使用位置：子类的构造函数、实例方法、静态方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 创建子类的实例对象 this = {}</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 将子类的原型prototype赋值给创建出来的对象 this.__proto__ = Student.prototype</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. 将对象赋值给函数的this：super 绑定 this = moni</span></span><br><span class=\"line\">    <span class=\"comment\">// 4. 执行父类构造函数中的代码</span></span><br><span class=\"line\">    <span class=\"comment\">// 5. 将子类实例对象返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意：在子类的构造函数中，必须调用 super()，否则会报错</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name, age); <span class=\"comment\">// 调用父类的构造函数，且必须在使用 this 之前调用</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sno</span> = sno;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">studying</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">\" studying\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 重写父类的方法</span></span><br><span class=\"line\">  <span class=\"title function_\">personMethod</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">personMethod</span>(); <span class=\"comment\">// 复用父类的处理逻辑</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">\" student personMethod\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 重写静态方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">staticMethod</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">staticMethod</span>(); <span class=\"comment\">// 复用父类的静态方法处理逻辑</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"StudentStaticMethod\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">\"why\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"001\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptors</span>(stu.<span class=\"property\">__proto__</span>)); <span class=\"comment\">// 子类原型上没有继承自父类的方法（除非重写）</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stu.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// true，此处的逻辑与用原型实现的继承一致</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><p>本文继续介绍了JavaScript中的面向对象编程，重点讲解了 <strong>原型链</strong> 和 <strong>继承</strong> 的实现方式，并补充了在ES6中 <strong>类(class)</strong> 与继承的语法和使用方法，其本质上是对原型继承的语法糖封装，使得面向对象编程更加直观和易于理解。对于<strong>原型</strong>的理解仍是重点和难点。</p>\n<p>参考内容：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1gYpmeKEvt?spm_id_from=333.788.videopod.episodes&amp;vd_source=13be13cef40f3972c65f0af98bf87ea2\">coderwhy 最强 JavaScript 高级教程 70-91 集</a></li>\n</ul>\n","text":"JS高级-6-面向对象编程-2一、原型链和继承面向对象的特性 封装（Encapsulation）：将数据（属性）和行为（方法）封装在一起，对外隐藏内部实现细节，...","permalink":"/post/js-premier-6-object-oriented-programming-2","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":15,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"进阶","slug":"进阶","count":7,"path":"api/tags/进阶.json"},{"name":"面向对象编程","slug":"面向对象编程","count":2,"path":"api/tags/面向对象编程.json"},{"name":"OOP","slug":"OOP","count":2,"path":"api/tags/OOP.json"},{"name":"原型链","slug":"原型链","count":1,"path":"api/tags/原型链.json"},{"name":"继承","slug":"继承","count":1,"path":"api/tags/继承.json"},{"name":"类","slug":"类","count":1,"path":"api/tags/类.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JS%E9%AB%98%E7%BA%A7-6-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-2\"><span class=\"toc-text\">JS高级-6-面向对象编程-2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">一、原型链和继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">面向对象的特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">原型链</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Object%E7%9A%84%E5%8E%9F%E5%9E%8B\"><span class=\"toc-text\">Object的原型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">继承的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">用原型链实现继承</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%80%9F%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-constructor-stealing-%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">借用构造函数(constructor stealing)实现继承</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E5%B0%86%E7%88%B6%E7%B1%BB%E7%9A%84%E5%8E%9F%E5%9E%8B%E8%B5%8B%E5%80%BC%E5%88%B0%E5%AD%90%E7%B1%BB%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E4%B8%AD\"><span class=\"toc-text\">直接将父类的原型赋值到子类原型对象中</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E5%BC%8F%E7%BB%A7%E6%89%BF%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">原型式继承函数的实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">寄生式继承</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">寄生组合式继承</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JS%E5%8E%9F%E5%9E%8B%E7%9A%84%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">JS原型的补充</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">判断方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">原型继承关系</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81ES6%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">二、ES6中的类与继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">类的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#class%E4%B8%AD%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">class中实现继承</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">三、总结</span></a></li></ol></li></ol>","author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"VsCode插件延迟问题解决方案","uid":"fe10f30684c52a4c001a9584bb5a660d","slug":"solutions-to-delay-problems-in-vscode-extensions","date":"2025-08-04T14:18:28.000Z","updated":"2025-08-07T06:54:30.396Z","comments":true,"path":"api/articles/solutions-to-delay-problems-in-vscode-extensions.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/solutions-to-delay-problems-in-vscode-extensions/cover.png","text":"VsCode插件延迟问题解决方案最近在使用 VSCode 时遇到了插件响应延迟的问题（极慢或根本不响应），尤其是GitHub Copilot 和 Markdow...","permalink":"/post/solutions-to-delay-problems-in-vscode-extensions","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"工作","slug":"工作","count":7,"path":"api/categories/工作.json"}],"tags":[{"name":"VSCode","slug":"VSCode","count":1,"path":"api/tags/VSCode.json"},{"name":"插件","slug":"插件","count":1,"path":"api/tags/插件.json"},{"name":"延迟问题","slug":"延迟问题","count":1,"path":"api/tags/延迟问题.json"},{"name":"不响应","slug":"不响应","count":1,"path":"api/tags/不响应.json"},{"name":"GitHub Copilot","slug":"GitHub-Copilot","count":1,"path":"api/tags/GitHub-Copilot.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JS高级-7-ES6到ES12","uid":"29789f7c4454c44748966712b35e8881","slug":"js-premier-7-es6-to-es12","date":"2025-07-31T06:41:18.000Z","updated":"2025-09-23T14:43:30.058Z","comments":true,"path":"api/articles/js-premier-7-es6-to-es12.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","text":"JS高级-7-ES6到ES12一、类扩展继承内置类","permalink":"/post/js-premier-7-es6-to-es12","photos":[],"count_time":{"symbolsCount":25,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":15,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"进阶","slug":"进阶","count":7,"path":"api/tags/进阶.json"},{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}