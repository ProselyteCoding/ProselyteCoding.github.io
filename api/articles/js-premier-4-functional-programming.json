{"title":"JS高级-4-函数式编程","uid":"f6257aade18eefed38cc06dca4a6019e","slug":"js-premier-4-functional-programming","date":"2025-07-27T14:12:36.000Z","updated":"2025-08-06T12:09:53.533Z","comments":true,"path":"api/articles/js-premier-4-functional-programming.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","content":"<h1 id=\"JS高级-4-函数式编程\"><a href=\"#JS高级-4-函数式编程\" class=\"headerlink\" title=\"JS高级-4-函数式编程\"></a>JS高级-4-函数式编程</h1><p><strong>函数式编程</strong>（Functional Programming，简称FP）是一种编程范式，它强调使用纯函数、避免副作用、采用不可变数据以及函数的高阶特性来构建程序。与命令式编程不同，函数式编程更关注“计算的表达方式”和“函数的组合”。</p>\n<p>主要特点包括：</p>\n<ul>\n<li><strong>纯函数</strong>：输出仅依赖输入，没有副作用。例如，函数不会修改外部状态。</li>\n<li><strong>不可变数据</strong>：数据一旦创建就不能修改，任何“改变”都是返回新数据。</li>\n<li><strong>高阶函数</strong>：函数是一等公民，可以将函数作为参数传递，或将函数作为返回值。</li>\n<li><strong>函数组合</strong>：通过组合简单的函数构建复杂的逻辑。</li>\n</ul>\n<p>常见的函数式编程语言有：Haskell、Lisp、Scheme、Erlang、OCaml、F#<br>以及一些支持函数式编程特性的语言，如：Python、<strong>JavaScript</strong>、Scala、Kotlin</p>\n<p>函数式编程的优势包括：</p>\n<ul>\n<li>代码更简洁、更易于理解和维护</li>\n<li>更好的并发性（由于无副作用）</li>\n<li>更容易测试</li>\n</ul>\n<h2 id=\"一、纯函数\"><a href=\"#一、纯函数\" class=\"headerlink\" title=\"一、纯函数\"></a>一、纯函数</h2><p><strong>纯函数</strong>的理解：<br><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-4-functional-programming/1.png\" alt=\"纯函数的理解\"></p>\n<p><strong>副作用</strong>的理解：<br>表示在执行一个函数时，除了返回值之外，还对调用函数产生了附加的影响，比如修改了全局变量、修改参数或者改变外部的存储。<br>纯函数在执行的过程中不能产生副作用。副作用往往是产生bug的“温床”。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 纯函数示例</span></span><br><span class=\"line\"><span class=\"comment\">// slice</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = arr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArr); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// [1, 2, 3, 4, 5]，原数组未改变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非纯函数示例</span></span><br><span class=\"line\"><span class=\"comment\">// splice</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1.<span class=\"title function_\">splice</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1); <span class=\"comment\">// [4, 5]，原数组已改变</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>纯函数的优势：</p>\n<ul>\n<li>安心地<strong>编写</strong>、安心地<strong>使用</strong>。</li>\n<li>写的时候保证了函数的纯度，只是实现自己的业务逻辑、不需要关心传入的内容是如何获取的或者依赖其他的外部变量是否以及发生了修改。</li>\n<li>用的时候确保输入内容不被任意修改，并且自己确定的输入一定会有确定的输出。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</p></blockquote>\n<h2 id=\"二、柯里化\"><a href=\"#二、柯里化\" class=\"headerlink\" title=\"二、柯里化\"></a>二、柯里化</h2><p>理解柯里化：<br><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/js-premier-4-functional-programming/2.png\" alt=\"理解柯里化\"></p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 柯里化函数示例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b, c</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">add</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 60</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curriedAdd</span>(<span class=\"params\">x</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">y</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">z</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">    };</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> resultCurried = <span class=\"title function_\">curriedAdd</span>(<span class=\"number\">10</span>)(<span class=\"number\">20</span>)(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultCurried); <span class=\"comment\">// 60</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 柯里化简写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">curriedAddShort</span> = x =&gt; <span class=\"function\"><span class=\"params\">y</span> =&gt;</span> <span class=\"function\"><span class=\"params\">z</span> =&gt;</span> x + y + z;</span><br><span class=\"line\"><span class=\"keyword\">var</span> resultCurriedShort = <span class=\"title function_\">curriedAddShort</span>(<span class=\"number\">10</span>)(<span class=\"number\">20</span>)(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultCurriedShort); <span class=\"comment\">// 60</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>为什么需要有柯里化？</p>\n<ul>\n<li>在函数式编程中，我们往往希望一个函数处理的问题尽可能地单一，而不是将一大堆的处理过程交给一个函数来处理。</li>\n<li>那么我们是否可以每次传入的参数在单一的函数中处理，处理完后在下一个函数中再使用处理后的结果。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 柯里化的单一职责原则</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span> (<span class=\"params\">x, y, z</span>) {</span><br><span class=\"line\">  x = x + <span class=\"number\">2</span>; <span class=\"comment\">// 对 x 进行处理</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">y</span>) {</span><br><span class=\"line\">    y = y + <span class=\"number\">3</span>; <span class=\"comment\">// 对 y 进行处理</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">z</span>) {</span><br><span class=\"line\">      z = z + <span class=\"number\">4</span>; <span class=\"comment\">// 对 z 进行处理</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> x + y + z; <span class=\"comment\">// 返回最终结果</span></span><br><span class=\"line\">    };</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 之前高阶函数与闭包的示例也是柯里化</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeAdder</span>(<span class=\"params\">x</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">y</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = <span class=\"title function_\">makeAdder</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add5</span>(<span class=\"number\">10</span>)); <span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add5</span>(<span class=\"number\">20</span>)); <span class=\"comment\">// 25</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 柯里化函数的实现</span></span><br><span class=\"line\"><span class=\"comment\">// 编写统一转化的工具函数，而不必每次都手动编写</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">curried</span>(<span class=\"params\">...args</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> &gt;= fn.<span class=\"property\">length</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args2</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> curried.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args.<span class=\"title function_\">concat</span>(args2)); <span class=\"comment\">// 递归调用，直到参数数量满足 fn 的要求</span></span><br><span class=\"line\">    };</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b, c</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> curriedAdd = <span class=\"title function_\">curry</span>(add);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)); <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>)); <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)); <span class=\"comment\">// 6</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"三、组合函数\"><a href=\"#三、组合函数\" class=\"headerlink\" title=\"三、组合函数\"></a>三、组合函数</h2><p>组合函数的概念：<br><strong>组合函数</strong>(Compose Function)是 JS 开发过程中一种对函数的<strong>使用技巧、模式</strong>。比如我们需要对某一个数据进行函数的调用，依次执行两个函数 fn1 和 fn2 。那么如果每次都需要手动调用这两个函数，代码会变得冗长且不易维护。组合函数可以将多个函数组合成一个新的函数，从而简化代码。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组合函数示例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">double</span>(<span class=\"params\">num</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">square</span>(<span class=\"params\">num</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * num;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">square</span>(<span class=\"title function_\">double</span>(count));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 400，未使用组合函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">composeSimple</span>(<span class=\"params\">m, n</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">count</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">m</span>(<span class=\"title function_\">n</span>(count)); <span class=\"comment\">// 先执行 n，再执行 m</span></span><br><span class=\"line\">    };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> composedFunction = <span class=\"title function_\">composeSimple</span>(square, double);</span><br><span class=\"line\"><span class=\"keyword\">var</span> resultComposed = <span class=\"title function_\">composedFunction</span>(count);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultComposed); <span class=\"comment\">// 400，使用组合函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通用组合函数实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myCompose</span>(<span class=\"params\">...fns</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = fns.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fns[i] !== <span class=\"string\">'function'</span>) {</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">'Expected a function'</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">...args</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = length ? fns[index].<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args) : args;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (++index &lt; length) {</span><br><span class=\"line\">            result = fns[index].<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, result);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> compose;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> composed = <span class=\"title function_\">myCompose</span>(double, square);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">composed</span>(<span class=\"number\">10</span>)); <span class=\"comment\">// 400，使用通用组合函数</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"四、其他知识补充\"><a href=\"#四、其他知识补充\" class=\"headerlink\" title=\"四、其他知识补充\"></a>四、其他知识补充</h2><h3 id=\"with-语句\"><a href=\"#with-语句\" class=\"headerlink\" title=\"with 语句\"></a>with 语句</h3><p><strong>with</strong> 语句扩展一个语句的作用域链。不建议使用 with 语句，因为它可能产生混淆错误和兼容性问题。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// with 语句示例</span></span><br><span class=\"line\"><span class=\"comment\">// with 语句可以在指定的对象上创建一个作用域</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = { <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span> };</span><br><span class=\"line\"><span class=\"title function_\">with</span> (obj) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b + c); <span class=\"comment\">// 6</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// with 语句会在当前作用域中查找变量，如果找不到则会查找全局作用域</span></span><br><span class=\"line\"><span class=\"comment\">// 但不推荐使用 with 语句，因为它会降低代码的可读性和性能</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"eval-函数\"><a href=\"#eval-函数\" class=\"headerlink\" title=\"eval 函数\"></a>eval 函数</h3><p><strong>eval</strong> 是一个特殊的函数，它可以将传入的字符串当作 JavaScript 代码执行。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eval 函数示例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsString = <span class=\"string\">'console.log(\"Hello, World!\");'</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(jsString); <span class=\"comment\">// 输出 \"Hello, World!\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>不建议在开发中使用 eval：</p>\n<ul>\n<li>eval 代码的可读性很差。</li>\n<li>eval 传入的参数是一个字符串，有可能在执行过程中被可以篡改，可能造成被攻击的风险。</li>\n<li>eval 的执行必须经过 JS 解释器，不能被 JS 引擎优化，性能较差。</li>\n</ul>\n<h3 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h3><p>在 ES5 标准中，JavaScript 引入了<strong>严格模式</strong>（Strict Mode）。它是一种具有限制性的 JavaScript 执行模式，从而使代码脱离了“<strong>松散</strong>（sloppy）模式”。支持严格模式的浏览器会以更加严格的方式对代码进行松散和执行。</p>\n<p>严格模式的主要特点：</p>\n<ul>\n<li>通过抛出错误来消除一些原有的<strong>静默</strong>（silent）错误。</li>\n<li>让 JS 引擎在执行代码时可以进行更多的优化（不需要对一些特殊的语法进行处理）。</li>\n<li>禁用了在 ECMAScript 未来版本中可能会定义的一些语法。</li>\n</ul>\n<p><em>静默错误指虽然存在错误但是不会产生严重问题，因此不被抛出错误的情况。</em></p>\n<p>严格模式的开启：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在文件中开启严格模式</span></span><br><span class=\"line\">use strict; <span class=\"comment\">// 在文件顶部声明</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在函数中开启严格模式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"string\">'use strict'</span>; <span class=\"comment\">// 在函数内部声明</span></span><br><span class=\"line\">  <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>严格模式的限制：</p>\n<ol>\n<li>无法意外地创建全局变量。</li>\n<li>会使静默失败的赋值操作抛出异常。</li>\n<li>试图删除不可删除的属性会抛出异常。</li>\n<li>不允许函数参数具有相同的名称。</li>\n<li>不允许 0 的八进制数字字面量。</li>\n<li>不允许使用 with 语句。</li>\n<li>eval 不再为上层作用域创建变量。</li>\n<li>this 绑定不会默认转成对象。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use strict; <span class=\"comment\">// 开启严格模式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 无法意外地创建全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    globalVar = <span class=\"number\">10</span>; <span class=\"comment\">// 抛出错误，无法创建全局变量</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 静默失败的赋值操作抛出异常</span></span><br><span class=\"line\"><span class=\"literal\">true</span>.<span class=\"property\">name</span> = <span class=\"string\">'test'</span>; <span class=\"comment\">// 静默错误抛出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 删除不可删除的属性抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">baz</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = {};</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">'prop'</span>, {</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 设置为不可配置</span></span><br><span class=\"line\">    });</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> obj.<span class=\"property\">prop</span>; <span class=\"comment\">// 抛出错误，无法删除不可配置属性</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 函数参数具有相同的名称会抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">qux</span>(<span class=\"params\">a, a, b</span>) { <span class=\"comment\">// 抛出错误，参数名重复</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. 不允许 0 的八进制数字字面量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> octalError = <span class=\"number\">010</span>; <span class=\"comment\">// 抛出错误，0 开头的数字字面量不再被视为八进制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> octal = <span class=\"number\">0o10</span>; <span class=\"comment\">// 正确的八进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> decimal = <span class=\"number\">10</span>; <span class=\"comment\">// 十进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hex = <span class=\"number\">0xA</span>; <span class=\"comment\">// 十六进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> binary = <span class=\"number\">0b1010</span>; <span class=\"comment\">// 二进制表示法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 6. 不允许使用 with 语句</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">withExample</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = { <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> };</span><br><span class=\"line\">    <span class=\"title function_\">with</span> (obj) { <span class=\"comment\">// 抛出错误，with 语句在严格模式中不被允许</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 7. eval 不再为上层作用域创建变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">evalExample</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">'var x = 10;'</span>); <span class=\"comment\">// 抛出错误，eval 不会为上层作用域创建变量</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// ReferenceError: x is not defined</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 8. this 绑定不会默认转成对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thisExample</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// undefined，而不是全局对象</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title function_\">thisExample</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setTimeOut 函数是特例，其中的 this 仍然指向全局对象</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>函数式编程是一种强大的编程范式，它通过使用纯函数、不可变数据和高阶函数等特性来构建更简洁、更易于维护的代码。理解纯函数、柯里化和组合函数等概念，可以帮助我们更好地应用函数式编程的思想。</p>\n<p>此外，本文还补充了与函数相关的其他知识点，如严格模式、with 语句和 eval 函数等。</p>\n<p>参考内容：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1gYpmeKEvt?spm_id_from=333.788.videopod.episodes&amp;vd_source=13be13cef40f3972c65f0af98bf87ea2\">coderwhy 最强 JavaScript 高级教程 45-56 集</a></li>\n</ul>\n","text":"JS高级-4-函数式编程函数式编程（Functional Programming，简称FP）是一种编程范式，它强调使用纯函数、避免副作用、采用不可变数据以及函数...","permalink":"/post/js-premier-4-functional-programming","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":16,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"进阶","slug":"进阶","count":7,"path":"api/tags/进阶.json"},{"name":"函数式编程","slug":"函数式编程","count":1,"path":"api/tags/函数式编程.json"},{"name":"纯函数","slug":"纯函数","count":1,"path":"api/tags/纯函数.json"},{"name":"柯里化","slug":"柯里化","count":1,"path":"api/tags/柯里化.json"},{"name":"组合函数","slug":"组合函数","count":1,"path":"api/tags/组合函数.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JS%E9%AB%98%E7%BA%A7-4-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">JS高级-4-函数式编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%BA%AF%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">一、纯函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%9F%AF%E9%87%8C%E5%8C%96\"><span class=\"toc-text\">二、柯里化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%BB%84%E5%90%88%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">三、组合函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">四、其他知识补充</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#with-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">with 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#eval-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">eval 函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">严格模式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">五、总结</span></a></li></ol></li></ol>","author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JS高级-5-面向对象编程-1","uid":"b3a5751f5eb5e3e9873a3f7c71f06e93","slug":"js-premier-5-object-oriented-programming-1","date":"2025-07-28T10:18:47.000Z","updated":"2025-08-24T18:28:56.294Z","comments":true,"path":"api/articles/js-premier-5-object-oriented-programming-1.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","text":"JS高级-5-面向对象编程-1一、面向对象的理解面向对象是现实的抽象方式。对象是 JavaScript 中一个非常重要的概念，因为对象可以将多个相关联的数据封装...","permalink":"/post/js-premier-5-object-oriented-programming-1","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":16,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"进阶","slug":"进阶","count":7,"path":"api/tags/进阶.json"},{"name":"面向对象编程","slug":"面向对象编程","count":2,"path":"api/tags/面向对象编程.json"},{"name":"OOP","slug":"OOP","count":2,"path":"api/tags/OOP.json"},{"name":"原型","slug":"原型","count":1,"path":"api/tags/原型.json"},{"name":"构造函数","slug":"构造函数","count":1,"path":"api/tags/构造函数.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JS高级-3-this关键字","uid":"0b480d0ac4115d2e3d40921ad7b91dbd","slug":"js-premier-3-this-in-javascript","date":"2025-07-22T10:05:48.000Z","updated":"2025-08-06T12:09:49.879Z","comments":true,"path":"api/articles/js-premier-3-this-in-javascript.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","text":"JS高级-3-this关键字一、this 的定义this 是 JavaScript 中的一个关键字，用于引用函数执行时的上下文对象。 为什么需要this： th...","permalink":"/post/js-premier-3-this-in-javascript","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":16,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"进阶","slug":"进阶","count":7,"path":"api/tags/进阶.json"},{"name":"this","slug":"this","count":1,"path":"api/tags/this.json"},{"name":"面试","slug":"面试","count":2,"path":"api/tags/面试.json"},{"name":"箭头函数","slug":"箭头函数","count":1,"path":"api/tags/箭头函数.json"},{"name":"绑定规则","slug":"绑定规则","count":1,"path":"api/tags/绑定规则.json"},{"name":"arguments","slug":"arguments","count":1,"path":"api/tags/arguments.json"},{"name":"剩余参数","slug":"剩余参数","count":1,"path":"api/tags/剩余参数.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}