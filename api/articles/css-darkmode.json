{"title":"CSS暗色模式","uid":"b9ea6a030feab39f973bc919fc78b8ed","slug":"css-darkmode","date":"2025-08-25T14:17:08.000Z","updated":"2025-09-13T16:18:38.818Z","comments":true,"path":"api/articles/css-darkmode.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-css.png","content":"<h1 id=\"CSS暗色模式\"><a href=\"#CSS暗色模式\" class=\"headerlink\" title=\"CSS暗色模式\"></a>CSS暗色模式</h1><p><strong>暗色模式</strong>（darkmode）绝对是客户端（Client）最出色的设计之一。亮色模式即以白色或浅色为主色调的主题，暗色模式即以黑色或深色为主色调的主题（此处的“主色调”主要是指所占区域最大的背景颜色风格等）。</p>\n<p>暗色模式的流行与智能手机的普及密不可分，它不仅可以减少眼睛疲劳，还能节省设备电池寿命。而亮/暗的两套主题也扩展了页面的适用范围，使页面更加灵活、表现效果更好。</p>\n<p>本文将从<strong>什么样的页面适合亮暗模式</strong>（理念）、<strong>如何实现亮暗模式</strong>（原理）进行介绍。</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/css-darkmode/1.png\" alt=\"Antd-浅色主题\"><br><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/css-darkmode/2.png\" alt=\"Antd-暗黑主题\"></p>\n<p><text style=\"display:block;text-align:center;font-size:12px;color:#888;margin-top:-10px;margin-bottom:10px;\">Ant Design的亮暗模式对比</text></p>\n<h2 id=\"什么样的页面适合亮暗模式？\"><a href=\"#什么样的页面适合亮暗模式？\" class=\"headerlink\" title=\"什么样的页面适合亮暗模式？\"></a>什么样的页面适合亮暗模式？</h2><p>在决定动手为你的应用添加暗色/亮色模式或者是在规划阶段确定要设置亮暗模式之前，你有必要了解清楚“什么样的页面适合亮暗模式”。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>是所有的页面都适合亮色/暗色模式吗？<br>答案是<strong>否定</strong>的。</p></blockquote>\n<p>我们需要先明确颜色对于<strong>风格</strong>的影响。白色等浅色调的颜色通常给人一种干净、简洁、现代的感觉，而黑色等深色调的颜色则传达出一种优雅、神秘和专业的氛围。因此选择什么样的颜色风格取决于你想要传达的品牌形象和用户体验。</p>\n<p>对于<strong>教育类网站</strong>（学校官网）、<strong>官方传媒</strong>（新华网、人民网）、<strong>国民级生活应用</strong>（支付宝、微信、QQ、微博）等，这类网站通常需要传达出权威、可信赖和专业的形象；<strong>购物类网站</strong>（淘宝、京东）需要清楚地呈现商品、激发人们的购买欲；还有<strong>偏可爱、清新风格的应用</strong>（B站）等使用亮色模式都是非常常见的选择。</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/css-darkmode/3.png\" alt=\"新华网\"></p>\n<p><text style=\"display:block;text-align:center;font-size:12px;color:#888;margin-top:-10px;margin-bottom:10px;\">新华网</text></p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/css-darkmode/4.png\" alt=\"淘宝网\"></p>\n<p><text style=\"display:block;text-align:center;font-size:12px;color:#888;margin-top:-10px;margin-bottom:10px;\">淘宝网</text></p>\n<p>对于<strong>科技类网站</strong>（尤其是需要营销的科技类网站）如各类<strong>提供AI服务的网站</strong>（DeepSeek、ChatGPT、Kimi）、<strong>代码类网站</strong>（GitHub、LeetCode）、部分<strong>设计类网站</strong>等，暗色模式可以传达出一种现代、前卫和专业的感觉，符合科技行业的形象。暗色模式也给人一种“安全感”，因此大部分浏览器的“无痕浏览”等功能也采用了暗色模式。</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/css-darkmode/5.png\" alt=\"DeepSeek\"></p>\n<p><text style=\"display:block;text-align:center;font-size:12px;color:#888;margin-top:-10px;margin-bottom:10px;\">DeepSeek</text></p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/css-darkmode/6.png\" alt=\"GitHub\"></p>\n<p><text style=\"display:block;text-align:center;font-size:12px;color:#888;margin-top:-10px;margin-bottom:10px;\">GitHub</text></p>\n<p>除了这两种网站，还有彩色、图片占比大的页面，常见于<strong>游戏网站</strong>、<strong>视频网站</strong>。而即使如此，其采用的颜色与风格仍有亮暗之分，如二次元题材常使用浅的亮色、史诗战争类题材偏向使用暗色、未来题材偏向于暗色背景+亮色色块（尤其是红色、浅绿色）制造出信号波动与科技的效果。</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/css-darkmode/7.png\" alt=\"战地风云6\"></p>\n<p><text style=\"display:block;text-align:center;font-size:12px;color:#888;margin-top:-10px;margin-bottom:10px;\">战地风云6</text></p>\n<p>小结一下，使用深色模式可以：</p>\n<ul>\n<li>减轻眼睛疲劳；</li>\n<li>构造视觉层次；</li>\n<li>使界面更神秘；</li>\n<li>营造高端感；</li>\n<li>提高在夜间提高可读性；</li>\n<li>确保夜晚使用环境（比如在晚上使用娱乐的app）；</li>\n</ul>\n<p>在以下情况下，请避免使用暗黑模式：</p>\n<ul>\n<li>该解决方案在户外白天使用；</li>\n<li>有很多文字可供阅读；</li>\n</ul>\n<p>这些是深色模式的<strong>优缺点</strong>。</p>\n<p>总之，颜色风格决定用户感受，因此我们需要从期望的用户感受反推颜色风格，进而决定是否需要亮暗模式或相应的主题。</p>\n<hr>\n<h2 id=\"如何实现亮暗模式？\"><a href=\"#如何实现亮暗模式？\" class=\"headerlink\" title=\"如何实现亮暗模式？\"></a>如何实现亮暗模式？</h2><p>亮暗模式是主题色为亮色/暗色的两套主题的统称。它既可以非常简单，最简单的是黑白两色加边框；也可以逐渐丰富，选取不同的亮色/暗色构建颜色的层次区分而不再只用一条边框勾勒布局。</p>\n<p>不过这些更多是设计的职责了，对于前端程序员来说，掌握合适的实现方式即可（太复杂的颜色交给AI也未尝不可）。</p>\n<h3 id=\"实现之前\"><a href=\"#实现之前\" class=\"headerlink\" title=\"实现之前\"></a>实现之前</h3><p>在实现之前，我们先介绍CSS的几个特性，它们是实现亮暗模式的<strong>基础</strong>。</p>\n<h4 id=\"color-scheme\"><a href=\"#color-scheme\" class=\"headerlink\" title=\"color-scheme\"></a>color-scheme</h4><p><code>color-scheme</code>CSS属性允许元素指示它可以舒适地呈现哪些颜色方案。</p>\n<p>操作系统颜色方案的常见选择为“亮色”和“暗色”，或“日间模式”和“夜间模式”。当用户选择其中一种颜色方案时，<strong>操作系统会对用户界面进行调整</strong>，包括表单控件、滚动条和CSS系统颜色的使用值。</p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* color-schema 语法 */</span></span><br><span class=\"line\"><span class=\"attribute\">color-scheme</span>: normal;</span><br><span class=\"line\"><span class=\"attribute\">color-scheme</span>: light;</span><br><span class=\"line\"><span class=\"attribute\">color-scheme</span>: dark;</span><br><span class=\"line\"><span class=\"attribute\">color-scheme</span>: light dark;</span><br><span class=\"line\"><span class=\"attribute\">color-scheme</span>: only light;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 全局值 */</span></span><br><span class=\"line\"><span class=\"attribute\">color-scheme</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">color-scheme</span>: initial;</span><br><span class=\"line\"><span class=\"attribute\">color-scheme</span>: revert;</span><br><span class=\"line\"><span class=\"attribute\">color-scheme</span>: revert-layer;</span><br><span class=\"line\"><span class=\"attribute\">color-scheme</span>: unset;</span><br></pre></td></tr></tbody></table></figure>\n\n<p><em>注意：还必须使用<code>prefers-color-scheme</code>媒体功能来支持其余元素的配色方案。</em></p>\n<h4 id=\"prefers-color-scheme\"><a href=\"#prefers-color-scheme\" class=\"headerlink\" title=\"prefers-color-scheme\"></a>prefers-color-scheme</h4><p><code>prefers-color-scheme</code>CSS媒体特性用于检测用户是否有将系统的主题色设置为亮色或者暗色。</p>\n<p>语法：</p>\n<ul>\n<li><code>no-preference</code>：表示系统未得知用户在这方面的选项。在布尔值上下文中，其执行结果为 <code>false</code>。</li>\n<li><code>light</code>：表示用户已告知系统他们选择使用浅色主题的界面。</li>\n<li><code>dark</code>：表示用户已告知系统他们选择使用暗色主题的界面。</li>\n</ul>\n<p><em>“未得知”可理解为：浏览器的宿主系统不支持设置主题色，或者支持主题色并默认为/被设为了未设置/无偏好。</em><br><em>“已告知”为：浏览器的宿主系统支持设置主题色，且被设置为了亮色或者暗色。</em></p>\n<p>这一特性可以让我们根据用户的系统主题色偏好来<strong>自动</strong>调整网页的主题，从而提供更好的首次加载体验。</p>\n<p>如果想使用JavaScript来检测用户的主题色偏好，可以使用 <code>window.matchMedia()</code> 方法：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">matchMedia</span> &amp;&amp; <span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(<span class=\"string\">'(prefers-color-scheme: dark)'</span>).<span class=\"property\">matches</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 用户偏好暗色主题</span></span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 用户偏好亮色主题或无偏好</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"自定义属性（变量）\"><a href=\"#自定义属性（变量）\" class=\"headerlink\" title=\"自定义属性（变量）\"></a>自定义属性（变量）</h4><p>自定义属性（有时候也被称作 CSS变量 或者 级联变量）是由 CSS 作者定义的，它包含的值可以在整个文档中重复使用。</p>\n<p>由自定义属性标记设定值（比如：<code>--main-color: black;</code>），由 <code>var()</code> 函数来获取值（比如：<code>color: var(--main-color);</code>）。</p>\n<p>用 var() 函数可以定义多个备用值（fallback value），当给定值未定义时将会用备用值替换。（<code>color: var(--my-var, red, blue, black);</code>）</p>\n<p>自定义属性会继承。这意味着如果在一个给定的元素上，没有为这个自定义属性设置值，在其父元素上的值会被使用。</p>\n<p>当浏览器遇到无效的 <code>var()</code> 时，会使用继承值或初始值代替。</p>\n<p>复杂的网站都会有大量的CSS代码，通常也会有许多重复的值。举个例子，同样一个颜色值可能在成千上百个地方被使用到，如果这个值发生了变化，需要全局搜索并且一个一个替换（很麻烦哎～）。自定义属性在某个地方存储一个值，然后在其他许多地方引用它，增强了代码的<strong>复用性</strong>。</p>\n<p>另一个好处是<strong>语义化</strong>的标识。比如，<code>--main-text-color</code> 会比 <code>#00ff00</code> 更易理解，尤其是这个颜色值在其他上下文中也被使用到。</p>\n<p>在实现亮暗模式时，自定义属性可以让我们根据主题设置两套颜色变量并实现切换。</p>\n<h4 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h4><p>媒体查询（Media query）非常实用，尤其是当你想要根据设备的大致类型（如打印设备与带屏幕的设备）或者特定的特征和设备参数（例如屏幕分辨率和浏览器视口宽度）来修改网站或应用程序时。</p>\n<p>媒体查询常被用于以下目的：</p>\n<ul>\n<li>有条件的通过<code>@media</code>和<code>@import at</code>规则用CSS装饰样式。</li>\n<li>用 <code>media=</code> 属性为<code>&lt;style&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;source&gt;</code>和其他HTML元素指定特定的媒体类型（<code>&lt;link rel=\"stylesheet\" src=\"styles.css\" media=\"print\" /&gt;</code>）。</li>\n<li>使用<code>Window.matchMedia()</code>和<code>MediaQueryList.addListener()</code>方法来测试和监控媒体状态。</li>\n</ul>\n<p>每条媒体查询语句都由一个可选的媒体类型和任意数量的媒体特性表达式构成。可以使用多种逻辑操作符合并多条媒体查询语句。</p>\n<p>媒体查询语句不区分大小写。</p>\n<p>当媒体类型（如果指定）与在其上显示文档的设备匹配并且所有媒体功能表达式都计算为 <code>true</code> 时，媒体查询将计算为 <code>true</code>。涉及未知媒体类型的查询始终为 <code>false</code>。</p>\n<p>媒体类型描述了给定设备的一般类别。</p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen, print { ... }</span><br></pre></td></tr></tbody></table></figure>\n\n<p>媒体功能描述了给定的user agent的输出设备或环境的特定特征。</p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">hover</span>: <span class=\"attribute\">hover</span>) { ... }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">12450px</span>) { ... }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">color</span>) { ... }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> speech <span class=\"keyword\">and</span> (<span class=\"attribute\">aspect-ratio</span>: <span class=\"number\">11</span>/<span class=\"number\">5</span>) { ... }</span><br></pre></td></tr></tbody></table></figure>\n\n<p>有时你可能想创建一个取决于多个条件的媒体查询。这就是逻辑运算符使用的场景：not，and，和 only。此外，你可以将多个媒体查询合并到一个逗号分隔的列表中。这使你可以在不同情况下应用相同的样式。</p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">30em</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) { ... }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-height</span>: <span class=\"number\">680px</span>), screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: portrait) { ... }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">not</span> all <span class=\"keyword\">and</span> (<span class=\"attribute\">monochrome</span>) { ... }</span><br><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">not</span> (all <span class=\"keyword\">and</span> (<span class=\"attribute\">monochrome</span>)) { ... } <span class=\"comment\">/* 这两行代码等价 */</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>媒体查询 4 级规范对语法进行了一些改进，以使用具有“范围”类型（例如宽度或高度，减少冗余）的功能进行媒体查询。级别 4 添加了用于编写此类的查询范围上下文。</p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">30em</span>) { ... }</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">width</span> &lt;= <span class=\"number\">30em</span>) { ... }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">30em</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">50em</span>) { ... }</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"number\">30em</span> &lt;= <span class=\"attribute\">width</span> &lt;= <span class=\"number\">50em</span> ) { ... }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"number\">30em</span> &lt;= <span class=\"attribute\">width</span> &lt;= <span class=\"number\">50em</span> ) { ... }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"keyword\">not</span> (<span class=\"attribute\">color</span>)) <span class=\"keyword\">or</span> (<span class=\"attribute\">hover</span>) { ... }</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"filter滤镜\"><a href=\"#filter滤镜\" class=\"headerlink\" title=\"filter滤镜\"></a>filter滤镜</h3><p>如果你想要最快速、最低成本实现暗色模式，<code>filter</code>属性是一个不错的选择。它可以通过简单的CSS代码将亮色主题转换为暗色主题，适用于非常简单的页面（如个人博客等）。</p>\n<h4 id=\"CSS-filter-属性\"><a href=\"#CSS-filter-属性\" class=\"headerlink\" title=\"CSS filter 属性\"></a>CSS filter 属性</h4><p>CSS filter 属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像、背景和边框的渲染。</p>\n<p><img src=\"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/css-darkmode/8.png\" alt=\"CSS滤镜函数\"></p>\n<p><text style=\"display:block;text-align:center;font-size:12px;color:#888;margin-top:-10px;margin-bottom:10px;\">CSS滤镜函数</text></p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* &lt;filter-function&gt; 值 */</span></span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(<span class=\"number\">5px</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">brightness</span>(<span class=\"number\">0.4</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">contrast</span>(<span class=\"number\">200%</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">drop-shadow</span>(<span class=\"number\">16px</span> <span class=\"number\">16px</span> <span class=\"number\">20px</span> blue);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">50%</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">hue-rotate</span>(<span class=\"number\">90deg</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">75%</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">opacity</span>(<span class=\"number\">25%</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">30%</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">sepia</span>(<span class=\"number\">60%</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* URL */</span></span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"filters.svg#filter-id\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 多个滤镜 */</span></span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">contrast</span>(<span class=\"number\">175%</span>) <span class=\"built_in\">brightness</span>(<span class=\"number\">3%</span>);</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: <span class=\"built_in\">drop-shadow</span>(<span class=\"number\">3px</span> <span class=\"number\">3px</span> red) <span class=\"built_in\">sepia</span>(<span class=\"number\">100%</span>) <span class=\"built_in\">drop-shadow</span>(-<span class=\"number\">3px</span> -<span class=\"number\">3px</span> blue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 不使用滤镜 */</span></span><br><span class=\"line\"><span class=\"attribute\">filter</span>: none;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 全局值 */</span></span><br><span class=\"line\"><span class=\"attribute\">filter</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: initial;</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: revert;</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: revert-layer;</span><br><span class=\"line\"><span class=\"attribute\">filter</span>: unset;</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"使用filter实现暗色模式\"><a href=\"#使用filter实现暗色模式\" class=\"headerlink\" title=\"使用filter实现暗色模式\"></a>使用filter实现暗色模式</h4><p>通过滤镜的色彩反转（<code>invert</code>）和色相旋转（<code>hue-rotate</code>）功能，可以快速将亮色主题转换为暗色主题。</p>\n<p>对于图片和视频等媒体内容，可以通过再次应用相同的滤镜来防止它们被反转（“左转三次等于右转”）。</p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme</span>: dark) {</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> {</span><br><span class=\"line\">        <span class=\"attribute\">filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">1</span>) <span class=\"built_in\">hue-rotate</span>(<span class=\"number\">180deg</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"selector-tag\">img</span>, <span class=\"selector-tag\">video</span> { <span class=\"comment\">/* 防止图片和视频被反转 */</span></span><br><span class=\"line\">        <span class=\"attribute\">filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">1</span>) <span class=\"built_in\">hue-rotate</span>(<span class=\"number\">180deg</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"颜色变量与选择器\"><a href=\"#颜色变量与选择器\" class=\"headerlink\" title=\"颜色变量与选择器\"></a>颜色变量与选择器</h3><p>这是最常用的方式。通过定义两套颜色变量（亮色主题和暗色主题），并使用媒体查询切换不同CSS选择器来切换主题。</p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> { </span><br><span class=\"line\">  <span class=\"attr\">--bg-color</span> : <span class=\"number\">#ffffff</span> ; </span><br><span class=\"line\">  <span class=\"attr\">--text-color</span> : <span class=\"number\">#000000</span> ; </span><br><span class=\"line\">  <span class=\"attr\">--bg-color-dark</span> : <span class=\"number\">#121212</span> ; </span><br><span class=\"line\">  <span class=\"attr\">--text-color-dark</span> : <span class=\"number\">#ffffff</span> ;</span><br><span class=\"line\">} </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--bg-color);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme</span>: dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--bg-color-dark);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color-dark);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"自由切换\"><a href=\"#自由切换\" class=\"headerlink\" title=\"自由切换\"></a>自由切换</h3><p>在上一步骤的基础上，我们不再仅依赖于媒体查询，而是通过JavaScript实现自由切换，并用全局级的变量存储主题状态（如 LocalStorage、Redux、后端数据库存储等）。</p>\n<p>基本上有亮暗主题的网站都会通过按钮允许用户手动切换而不是仅依赖于系统主题色偏好，上一步中的写法仅为了清晰展示<code>prefers-color-schema</code>的效果。</p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attr\">--bg-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attr\">--text-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=<span class=\"string\">\"dark\"</span>]</span> {</span><br><span class=\"line\">    <span class=\"attr\">--bg-color</span>: <span class=\"number\">#121212</span>;</span><br><span class=\"line\">    <span class=\"attr\">--text-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--bg-color);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--text-color);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>接下来通过 JavaScript 或 React 等前端框架结合 LocalStorage 实现主题切换的逻辑。</p>\n<p>JavaScript 示例：</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JavaScript 示例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toggleTheme</span> = (<span class=\"params\"></span>) =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentTheme = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">\"data-theme\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newTheme = currentTheme === <span class=\"string\">\"dark\"</span> ? <span class=\"string\">\"light\"</span> : <span class=\"string\">\"dark\"</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">\"data-theme\"</span>, newTheme);</span><br><span class=\"line\">    <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">\"theme\"</span>, newTheme); <span class=\"comment\">// 保存用户选择</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 页面加载时应用用户选择的主题</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> savedTheme = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">\"theme\"</span>) || (<span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>).<span class=\"property\">matches</span> ? <span class=\"string\">\"dark\"</span> : <span class=\"string\">\"light\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">\"data-theme\"</span>, savedTheme);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>React 示例：</p>\n<figure class=\"highlight jsx\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// React 示例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, { useState, useEffect } <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [theme, setTheme] = <span class=\"title function_\">useState</span>(<span class=\"string\">'light'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">const</span> savedTheme = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">'theme'</span>) || (<span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(<span class=\"string\">'(prefers-color-scheme: dark)'</span>).<span class=\"property\">matches</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>);</span><br><span class=\"line\">        <span class=\"title function_\">setTheme</span>(savedTheme);</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">'data-theme'</span>, savedTheme);</span><br><span class=\"line\">    }, []);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">toggleTheme</span> = (<span class=\"params\"></span>) =&gt; {</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newTheme = theme === <span class=\"string\">'dark'</span> ? <span class=\"string\">'light'</span> : <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">        <span class=\"title function_\">setTheme</span>(newTheme);</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">'data-theme'</span>, newTheme);</span><br><span class=\"line\">        <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">'theme'</span>, newTheme);</span><br><span class=\"line\">    };</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">{toggleTheme}</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                切换到 {theme === 'dark' ? '亮色' : '暗色'} 模式</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>欢迎来到我的网站<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个支持亮暗模式切换的示例。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"还有哪些细节？\"><a href=\"#还有哪些细节？\" class=\"headerlink\" title=\"还有哪些细节？\"></a>还有哪些细节？</h2><h3 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h3><p><strong>暗黑模式不是简单地切换颜色</strong>。暗黑模式的设计需要遵循一套原则，以确保页面的易读性、对比度和流畅的用户体验。</p>\n<h4 id=\"色彩对比\"><a href=\"#色彩对比\" class=\"headerlink\" title=\"色彩对比\"></a>色彩对比</h4><p>在暗黑模式下，对比度成为可读性的关键因素。大多数初学的网页设计师经常错误地认为深色模式就是使用黑色做背景，虽然全黑背景看起来很直观，但它会产生过多的对比度并容易导致眼睛疲劳。</p>\n<p>深灰色背景搭配颜色较浅的文本可提供更加舒适的体验。在多数深色模式设计中，背景颜色通常使用深灰、深蓝或深绿色。Google Material Design 则建议使用 <code>#121212</code> 作为基本的深灰色背景选择。</p>\n<p><strong>最佳实践：使用略微偏黑的背景，并确保文本和背景颜色之间有足够的对比度以保持可读性。</strong></p>\n<h4 id=\"色彩加强\"><a href=\"#色彩加强\" class=\"headerlink\" title=\"色彩加强\"></a>色彩加强</h4><p>鲜艳的强调色在浅色模式下展示效果良好，但在暗黑模式下可能会显得太亮。在暗黑模式下，为按钮（Button）、图标（Icon）和链接（Link）选择更柔和、饱和度更低的颜色，可确保用户界面保持赏心悦目，而不会让用户感到不知所措。</p>\n<p><strong>最佳实践：使用颜色工具在明暗模式下测试调色板，并调整饱和度以获得平衡的外观。</strong></p>\n<h4 id=\"阴影和高度\"><a href=\"#阴影和高度\" class=\"headerlink\" title=\"阴影和高度\"></a>阴影和高度</h4><p>由于背景较暗，阴影在暗黑模式下不太明显。如果要模拟深度和高度，应该考虑使用较浅的边框或者添加微妙的高光，而不仅仅依赖阴影。</p>\n<p><strong>最佳实践：调整阴影不透明度并使用边框高光使元素在暗模式下脱颖而出。</strong></p>\n<h4 id=\"图片处理\"><a href=\"#图片处理\" class=\"headerlink\" title=\"图片处理\"></a>图片处理</h4><p>由于界面光线昏暗，深色模式设计需要特别注意图片的使用。如果是游戏、影视等类型的网站，鲜艳的照片可能会导致不舒服的对比度，进而影响整体用户体验。</p>\n<p>为了解决影像对比度降低的问题，一种选择是在绘图软件中就先将图片稍微压暗或是降彩度。但这种做法对于用户自行上传图片的情况下不适用，也不太可能要求所有后台操作者都熟悉绘图软件。</p>\n<p>另一种做法是在深色模式下，给图片加上一层 <code>overlay</code>，我们常用的设置是 <code>#C1C1C1 + 10%</code> 不透明度，这样可以让图片的彩度稍微下降，但不会变成深色的感觉。当然其他用 CSS filter 的方法也可以考虑。</p>\n<h4 id=\"品牌标识\"><a href=\"#品牌标识\" class=\"headerlink\" title=\"品牌标识\"></a>品牌标识</h4><p>在明暗模式下保持品牌形象至关重要。在切换模式时，某些品牌颜色可能需要调整。确保品牌标识、按钮和重要品牌元素在两种主题中都清晰可见。</p>\n<p><strong>最佳实践：彻底测试品牌元素，以确保它们在暗黑模式下仍然可识别并保持其影响力。</strong></p>\n<p><em>注意：这一部分更多是设计理念的介绍，而非实现原理。另外，笔者并非专业设计师，只是更多结合自身对于设计的简单学习以及网上的相关文章斗胆建言，专业的颜色与设计知识需专业文章，本人观点如有谬误敬请指出。</em></p>\n<h3 id=\"组件库属性\"><a href=\"#组件库属性\" class=\"headerlink\" title=\"组件库属性\"></a>组件库属性</h3><p>如果你的网站大量使用了组件库（如Ant Design、Material UI等），那么你可以查看组件库的文档，看看它们是否提供了内置的亮暗模式支持。大多数现代组件库都支持通过配置主题来切换亮暗模式。</p>\n<figure class=\"highlight jsx\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Ant Design</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> { <span class=\"title class_\">ConfigProvider</span> } <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> { useState } <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> { <span class=\"title class_\">Button</span> } <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> { <span class=\"title class_\">Switch</span> } <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> { <span class=\"title class_\">BulbOutlined</span>, <span class=\"title class_\">BulbFilled</span> } <span class=\"keyword\">from</span> <span class=\"string\">'@ant-design/icons'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'antd/dist/reset.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'antd/dist/antd.dark.css'</span>; <span class=\"comment\">// 引入暗黑主题样式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'antd/dist/antd.compact.css'</span>; <span class=\"comment\">// 引入紧凑主题样式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'antd/dist/antd.variable.min.css'</span>; <span class=\"comment\">// 引入可变主题样式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [isDarkMode, setIsDarkMode] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">toggleTheme</span> = (<span class=\"params\"></span>) =&gt; {</span><br><span class=\"line\">        <span class=\"title function_\">setIsDarkMode</span>(!isDarkMode);</span><br><span class=\"line\">    };</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ConfigProvider</span> <span class=\"attr\">theme</span>=<span class=\"string\">{{</span> <span class=\"attr\">mode:</span> <span class=\"attr\">isDarkMode</span> ? '<span class=\"attr\">dark</span>' <span class=\"attr\">:</span> '<span class=\"attr\">light</span>' }}&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"app\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Switch</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">checkedChildren</span>=<span class=\"string\">{</span>&lt;<span class=\"attr\">BulbFilled</span> /&gt;</span>}</span></span><br><span class=\"line\"><span class=\"language-xml\">                    unCheckedChildren={<span class=\"tag\">&lt;<span class=\"name\">BulbOutlined</span> /&gt;</span>}</span></span><br><span class=\"line\"><span class=\"language-xml\">                    checked={isDarkMode}</span></span><br><span class=\"line\"><span class=\"language-xml\">                    onChange={toggleTheme}</span></span><br><span class=\"line\"><span class=\"language-xml\">                /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span>&gt;</span>Primary Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ConfigProvider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"过渡动画\"><a href=\"#过渡动画\" class=\"headerlink\" title=\"过渡动画\"></a>过渡动画</h3><p>在亮暗模式间进行切换时，由于对比度较大，容易造成刺眼和突兀的不良效果，可以考虑添加过渡动画来提升用户体验，使切换过程更加平滑和自然。</p>\n<h3 id=\"CSS-框架支持\"><a href=\"#CSS-框架支持\" class=\"headerlink\" title=\"CSS 框架支持\"></a>CSS 框架支持</h3><p>如果你使用的是CSS框架（如Bootstrap、Tailwind CSS等），请查看它们的文档，了解如何启用和配置亮暗模式支持。许多现代CSS框架都提供了内置的类或变量来处理亮暗模式。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Tailwind CSS --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dark\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Tailwind Dark Mode Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-white text-black dark:bg-gray-900 dark:text-white\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container mx-auto p-4\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-3xl font-bold mb-4\"</span>&gt;</span>Hello, Tailwind CSS!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mb-4\"</span>&gt;</span>This is a simple example of dark mode using Tailwind CSS.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 dark:bg-blue-700 dark:hover:bg-blue-800\"</span>&gt;</span></span><br><span class=\"line\">            Click Me</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"兼容性问题\"><a href=\"#兼容性问题\" class=\"headerlink\" title=\"兼容性问题\"></a>兼容性问题</h3><p>下面对于上文提到的所有方案的兼容性进行简单总结：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>兼容性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>prefers-color-scheme</td>\n<td>支持较好，现代浏览器均支持（Chrome 76+, Firefox 67+, Safari 12.1+）</td>\n</tr>\n<tr>\n<td>CSS 自定义属性（变量）</td>\n<td>支持较好，现代浏览器均支持（Chrome 49+, Firefox 31+, Safari 9.1+）</td>\n</tr>\n<tr>\n<td>媒体查询</td>\n<td>支持较好，现代浏览器均支持（Chrome 21+, Firefox 3.5+, Safari 3.1+）</td>\n</tr>\n<tr>\n<td>CSS filter</td>\n<td>支持较好，现代浏览器均支持（Chrome 18+, Firefox 35+, Safari 6+）</td>\n</tr>\n<tr>\n<td>JavaScript 手动切换</td>\n<td>兼容性好，所有现代浏览器均支持</td>\n</tr>\n</tbody></table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文介绍了亮暗模式的设计理念和实现方法。亮暗模式不仅提升了用户体验，还能增强页面的视觉吸引力。通过合理的设计和技术实现，可以为用户提供更舒适的浏览环境。</p>\n<p>除了技术实现外，设计原则同样重要。确保在设计过程中考虑色彩对比、色彩加强、阴影和高度、图片处理以及品牌标识等因素，以打造出既美观又实用的亮暗模式。在国内“轻交互”的现状下，</p>\n<p>参考文献：</p>\n<ul>\n<li><a href=\"https://simular.co/blog/post/dark-mode-ui-best-practice\">深色模式 UI 與網頁設計技巧，有哪些注意事項？(Dark Mode)</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme\">MDN文档：prefer-color-schema</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_cascading_variables/Using_CSS_custom_properties\">MDN文档：使用 CSS 自定义属性（变量）</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Using_media_queries\">MDN文档：使用媒体查询</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter\">MDN文档：filter</a></li>\n<li><a href=\"https://juejin.cn/post/7219332033721073721?searchId=20250913191048F57179535314C9015132\">CSS prefers-color-scheme 与 matchMedia() 深浅色模式</a></li>\n<li><a href=\"https://juejin.cn/post/6858448795949236231?searchId=2025091322334814D721316ED01510244E\">三行CSS为掘金添加暗黑模式支持</a></li>\n<li><a href=\"https://juejin.cn/post/7453730604892749887?searchId=20250913223312C9E1CAD4DF923E12FBE0\">暗黑模式设计</a></li>\n<li><a href=\"https://www.woshipm.com/pd/4105894.html\">教你巧用UI设计中的暗黑模式——Dark Mode</a></li>\n<li><a href=\"https://uxplanet.org/basicdesign-never-use-pure-black-in-typography-36138a3327a6\">Never use pure black in typography</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/color-scheme\">MDN文档：color-scheme</a></li>\n</ul>\n","text":"CSS暗色模式暗色模式（darkmode）绝对是客户端（Client）最出色的设计之一。亮色模式即以白色或浅色为主色调的主题，暗色模式即以黑色或深色为主色调的主...","permalink":"/post/css-darkmode","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"教程","slug":"教程","count":7,"path":"api/tags/教程.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"CSS","slug":"CSS","count":7,"path":"api/tags/CSS.json"},{"name":"UI/UX","slug":"UI-UX","count":2,"path":"api/tags/UI-UX.json"},{"name":"暗色模式","slug":"暗色模式","count":1,"path":"api/tags/暗色模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CSS%E6%9A%97%E8%89%B2%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">CSS暗色模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E9%A1%B5%E9%9D%A2%E9%80%82%E5%90%88%E4%BA%AE%E6%9A%97%E6%A8%A1%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">什么样的页面适合亮暗模式？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BA%AE%E6%9A%97%E6%A8%A1%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">如何实现亮暗模式？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%89%8D\"><span class=\"toc-text\">实现之前</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#color-scheme\"><span class=\"toc-text\">color-scheme</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#prefers-color-scheme\"><span class=\"toc-text\">prefers-color-scheme</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%EF%BC%88%E5%8F%98%E9%87%8F%EF%BC%89\"><span class=\"toc-text\">自定义属性（变量）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">媒体查询</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#filter%E6%BB%A4%E9%95%9C\"><span class=\"toc-text\">filter滤镜</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CSS-filter-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">CSS filter 属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8filter%E5%AE%9E%E7%8E%B0%E6%9A%97%E8%89%B2%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">使用filter实现暗色模式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%9C%E8%89%B2%E5%8F%98%E9%87%8F%E4%B8%8E%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">颜色变量与选择器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E7%94%B1%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">自由切换</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E7%BB%86%E8%8A%82%EF%BC%9F\"><span class=\"toc-text\">还有哪些细节？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">设计原则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%89%B2%E5%BD%A9%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">色彩对比</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%89%B2%E5%BD%A9%E5%8A%A0%E5%BC%BA\"><span class=\"toc-text\">色彩加强</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B4%E5%BD%B1%E5%92%8C%E9%AB%98%E5%BA%A6\"><span class=\"toc-text\">阴影和高度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86\"><span class=\"toc-text\">图片处理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%93%81%E7%89%8C%E6%A0%87%E8%AF%86\"><span class=\"toc-text\">品牌标识</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E5%BA%93%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">组件库属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB\"><span class=\"toc-text\">过渡动画</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CSS-%E6%A1%86%E6%9E%B6%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">CSS 框架支持</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">兼容性问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JavaScript中的相等比较和相同","uid":"fb6d1bb37eb27e9281171cb6130d8351","slug":"js-equality-comparisons-and-sameness","date":"2025-08-26T10:02:07.000Z","updated":"2025-09-13T11:24:51.313Z","comments":true,"path":"api/articles/js-equality-comparisons-and-sameness.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-js.png","text":"JavaScript中的相等比较和相同 曾在JS的社区中看到这样一张图以及其制作的一些梗图，奇奇怪怪的相等性比较让人摸不着头脑，似乎是JS“灵活”、“不严谨”的...","permalink":"/post/js-equality-comparisons-and-sameness","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"前端","slug":"前端","count":21,"path":"api/categories/前端.json"}],"tags":[{"name":"技术","slug":"技术","count":19,"path":"api/tags/技术.json"},{"name":"前端","slug":"前端","count":21,"path":"api/tags/前端.json"},{"name":"笔记","slug":"笔记","count":15,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"相等性","slug":"相等性","count":1,"path":"api/tags/相等性.json"},{"name":"Object.is","slug":"Object-is","count":1,"path":"api/tags/Object-is.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"力扣周记-1","uid":"08f444f4bb1cf23d07049ebcd7792f29","slug":"leetcode-weekly-journal-1","date":"2025-08-24T17:01:28.000Z","updated":"2025-09-30T00:37:29.092Z","comments":true,"path":"api/articles/leetcode-weekly-journal-1.json","keywords":null,"cover":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/cover-leetcode.png","text":"力扣周记-12025.8. - 2025.8.31 一、两数之和(1)标签哈希表 题目描述给定一个整数数组 nums 和一个整数目标值 target，请你在该数...","permalink":"/post/leetcode-weekly-journal-1","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"算法题","slug":"算法题","count":4,"path":"api/categories/算法题.json"}],"tags":[{"name":"笔记","slug":"笔记","count":15,"path":"api/tags/笔记.json"},{"name":"力扣","slug":"力扣","count":4,"path":"api/tags/力扣.json"},{"name":"算法","slug":"算法","count":4,"path":"api/tags/算法.json"}],"author":{"name":"Proselyte","slug":"blog-author","avatar":"https://raw.githubusercontent.com/ProselyteCoding/online-assets/main/blog/avatar.jpg","link":"/","description":"衷于创造，向往自由。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}