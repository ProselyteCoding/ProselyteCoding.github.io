[{"id":"de29ad04e0c0a4f4e4f4656db4c38b06","title":"前端尺寸单位总结","content":"前端尺寸单位总结前端开发中对于标签元素的尺寸样式设置需要指定单位，如 px、em、rem、vh、rpx 等，本文将总结常用的前端尺寸单位及其使用场景。\n一、概述1. 所有单位及简述：\npx：像素 相对长度单位，相对于显示器屏幕分辨率(推荐使用)\nem：相对长度单位 基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。\nrem：相对单位 可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持。\nvw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。\nvh：viewpoint height，视窗高度，1vh等于视窗高度的1%。 \nvmin：vw和vh中较小的那个。\nvmax：vw和vh中较大的那个。\n%：百分比\nin：寸\ncm：厘米\nmm：毫米\npt：point，大约1/72寸\npc：pica，大约6pt，1/6寸\n\n2. 分类：\n绝对单位：px、in、cm、mm、pt、pc\n相对单位：em、rem、%、vw、vh、vmin、vmax\n\n3. 换算工具推荐：VSCode 插件 px to rem\n二、典型单位1. pxpx (pixel)，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中。有些人会把px认为是相对长度，原因在于在移动端中存在设备像素比，px实际显示的大小是不确定的。这里之所以认为px为绝对单位，在于px的大小和元素的其他属性无关。px是PC端前端开发最常用的尺寸单位，也最简单直观、最容易理解，但移动端开发不建议使用。\n\n\n\n\n\n\n\n\n\n物理像素：物理像素代表屏幕上有多少个像素点，如产品参数里“2340 x 1080 像素分辨率”指的就是设备像素，表示屏幕水平有1080个点，垂直有2340个点。设备独立像素（也称逻辑像素，device-independent pixels，dips）：表示屏幕展示物体的视觉尺寸是多少（进行缩放操作之后），逻辑像素相同就表示希望按钮在不同屏幕上看起来一样大，是日常生活说的“调节分辨率”中的“分辨率”。设备像素比（devicePixelRatio，dpr）： 指的是设备物理像素和逻辑像素的比例，PC端的设备像素比统一约等为1，移动端的设备像素比不确定且多样，这也是移动端开发不能使用px作为单位的根本原因。window.devicePixelRatio = 物理像素 / 设备独立像素 。CSS像素（pixel，px）：CSS像素是指CSS文件中使用的像素，取决于设备独立像素与缩放比例，CSS像素 = 缩放比的平方个设备独立像素。\n2. emem 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（1em = 16px）。为了简化 font-size 的换算，我们需要在css中的 body 选择器中声明font-size= 62.5%，这就使 em 值变为 16px*62.5% = 10px。这样 12px = 1.2em, 10px = 1em, 也就是说只需要将你的原来的 px 数值除以 10，然后换上 em 作为单位就行了。\n特点：\n\nem 的值并不是固定的\nem 会继承父级元素的字体大小\nem 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸\n任意浏览器的默认字体高都是 16px\n\n3. remrem 参考物是相对于根元素，我们在使用时可以在根元素设置一个参考值即可，相对于em使用，减少很大运算工作量，例：html大小为10px，12rem就是120px。\n特点：\n\nrem单位可谓集相对大小和绝对大小的优点于一身\n和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸\n\n4. %% 是相对于父元素的大小设定的比率，若设置display: fixed;则相对于可视窗口。\n5. vw、vhvw 和 vh 都是相对于视窗的单位，1vw等于视窗宽度的1%，1vh等于视窗高度的1%，即可视窗口高100vh、宽100vw。\n6. rpxrpx是微信小程序独有的、解决屏幕自适应的尺寸单位。可以根据屏幕宽度进行自适应，不论大小屏幕，规定屏幕宽为 750rpx。通过 rpx 设置元素和字体的大小，小程序在不同尺寸的屏幕下，可以实现自动适配。\n三、总结本文总结了前端开发中常用的尺寸单位，并对px、em、rem、vw、vh等单位进行了详细说明。希望对您有所帮助，尤其是您在移动端开发遇到rpx、rem或相对单位时，可以参考本文进行单位转换和使用。\n参考文献：\n\ncss中px、em、rem、%、vw、vh、vm、rpx 这些单位的区别，最全面CSS单位了解，不懂的找我\n理解设备像素比devicePixelRatio\n物理像素、逻辑像素、CSS像素、PPI、设备像素比是什么\n\n","slug":"前端尺寸单位总结","date":"2025-07-11T12:28:26.000Z","categories_index":"工作","tags_index":"技术,CSS,前端,学习笔记,设计,尺寸单位,总结,合集","author_index":"Proselyte"},{"id":"b7c4cb340f06f266f05eab9dab265466","title":"Prompt优化学习笔记","content":"Prompt 优化学习笔记一、背景介绍1. 什么是 Prompt2. 学习 Prompt 优化的必要性二、三、总结参考文献：\n\n\n\n","slug":"Prompt优化学习笔记","date":"2025-07-11T10:54:36.000Z","categories_index":"工作","tags_index":"技术,Prompt,AI,优化,学习笔记","author_index":"Proselyte"},{"id":"cfd65de29f7f6b5bac382ae133f350db","title":"Three.js 学习笔记","content":"Three.js 学习笔记一、背景介绍二、学习笔记1、Three.js 官方文档学习笔记2、Three.js in React 学习笔记3、Three.js 项目实战三、总结","slug":"ThreeJS学习笔记","date":"2025-07-11T10:49:30.000Z","categories_index":"工作","tags_index":"技术,前端,学习笔记,Three.js,Web","author_index":"Proselyte"},{"id":"dbfa94e497ba7ab286c1c4d2789db0e2","title":"Tabbar中的UI/UX设计","content":"Tabbar中的UI/UX设计Tabbar对于移动端的前端开发是不可避免的，本文将对于其UI/UX设计进行介绍。\nTabbar是什么？Tabbar是指移动端应用中常见的底部导航栏组件，用于切换不同功能页面。\nTabbar的设计原则与理想效果\n\n\n\n\n\n\n\n\nTabbar的设计原则大致可用几个词总结：简洁、易用、易于理解、风格统一和谐……\n\n设计良好的Tabbar可以方便用户切换功能模块、提升操作效率与用户体验。\n可以使应用风格统一美观。\n国外部分设计加入动效，增强互动性，但可能增加性能开销，国内使用较少。\n\n总之，设计可考虑两种思路，一种是简洁合理，让用户使用自然、感觉不到突兀，常用于日常成型的APP设计；另一种则是追求新意，增加动效、视觉效果，常用于个人展示类APP或创意类APP设计。\nTabbar的具体设计1. 组成元素Tabbar的主体当然是切换按钮，其样式（包括选中与未选中状态）、位置、数量、排列方式等都需要设计。同时，空白部分、分界线、文字说明等元素也需要考虑。\n2. 颜色需要考虑与整体风格的明暗、主题色保持统一。\n\n建议背景色采用主题色或整体设计应用较多的偏深的颜色，起到托底的效果，以免有“头重脚轻”的感觉。（补充：顶部的Navbar也不建议应用太多浅色，可以考虑图片或者较浅的主题色）\n图标颜色可考虑黑或白（与明暗主体相反）。\n\n3. 图标图标的选择要兼具美观与可读性。\n\n图标数目应控制在2~5个（3~4个为最佳），避免过多或过少，以免造成混乱。\n图标的大小应适中，避免过大或过小，以免影响美观。\n图标风格需一致，可选单色/多色、线条/实心等，但切忌混搭，若非专业设计师建议选择同一素材库中的图标素材，建议不要使用3D或者过于复杂的多色图标（技巧：选中的图标可与其他图标风格不同以区分）。\n\n4. 文字图标的文字说明是可选的但通常加上以帮助对于图标的理解。\n\n文字的大小应合适，避免过大或过小，以免影响美观。\n文字颜色一般与图标一致。\n\n5. 技巧\nActive 与 Inactive 状态的应进行区分\n选择简洁、熟悉的图标\n文字简短、长度恰当\n保持整体风格干净简洁\n选择一种图标风格\n使用通知提醒的badges\n尝试有创造力的布局设计，如中间的“添加”图标变色、上移\n将 Tabbar 与主内容分开\n使用合适的背景色\n添加流畅的微互动\n\n6. 误区\n避免使用多种颜色\n避免将不合理的颜色对照用于区分状态\n\n总结这是我写的第一篇关于UI/UX设计的文章，素材来自油管:Top UI/UX Design Tips - How to Design a Great Bottom Mobile Navigation Bar。关于设计艺术与美感的事物，确实不如实际的代码逻辑容易表述，我将继续提升自己的设计水平和表达能力，同时后续将更新图片以供参考。希望您在读完之后能有所收获！\n\n","slug":"Tabbar中的UI-UX设计","date":"2025-05-21T06:16:25.000Z","categories_index":"工作","tags_index":"教程,前端,UI/UX,设计,移动端","author_index":"Proselyte"},{"id":"7b8bf44f2423c96f4d6c41f38573648a","title":"关于'名字'","content":"关于’名字’名字，一张名片罢了。\n\n\n\n\n\n\n\n\n\n“从父母取的名字里可以看出一个人的背景希冀，从自己取的别名中可以看出一个人的心理性格。”\n这是一种比较普遍认可的心理学观点。\n但我想提出两种全新的角度学习交流：\n1. 感觉以我个人为例，我对“一帆”并不感冒，因为名字本意上的“一帆风顺”从不是我所追求的，我喜欢 “乘风破浪” 的态度，而不是甘于平淡。\n但是 “帆” 这个字对我的“诱惑”太大了：一声，再加上这个字本身的意境，让我想到 “朝平两岸阔，风正一帆悬” 这句诗，那种自由而积极的感觉扑面而来，仿佛此刻正面对朝阳翱翔。\n因此，我在一切能取中文昵称的地方，基本上都会以 “帆” 作为昵称，而不再加其他过于繁复冗余的修饰。\n同样因此，当很多老师第一次点名叫出“凡”的读音时我都有些不快，这与某个名字相近的明星无关，只是他/她破坏了这份意境，所以我一定要找机会告诉他应该读一声。（我至今仍比较怀疑读错的原因，难道不知道“一帆风顺”这个成语？？？真是怪事，大无语）\n所以我认为，抛开名字本身“福禄寿”之类的祝福，单纯去体悟那种语言的感觉或者意境是一件十分有趣的事情，说不定像我这样也能带给你积极的人生态度与心理暗示。这也是汉语最美妙的地方之一，凝练，深刻，这大概就是背后的文化吧。\n2. 目的此处说的目的，专用于自己取的名字，而非你生来就有的姓名。它可以是你起的QQ、微信、游戏等等各个账号的昵称，可以是你参加比赛等活动是起的项目名，也可以是对于已有产品名字的研究。\n这些名字的共同点在于它们都是需要向外界展示的，因此也就不可避免地带有目的性。\n我有一段比较有趣的经历，那就是在B站作为Up主曾尝试过发一些视频。题材尝试过风景、小提琴、足球、游戏，最后选择了发炉石传说的视频。一方面因为我自己确实比较擅长炉石，另一方面也是因为我可以做到尽可能多的去更新（点一下录屏就有素材了）。\n在发布我自己的视频的同时，我也认真研究过其他Up主，无论是同为炉石圈里的还是其他游戏领域的，我仔细观摩学习他们的昵称、视频封面、视频名，总结一个认真的（指不是搞抽象或者蹭流量的低智视频）爆火视频的成功经验。\n一段时间后，我自己做的炉石视频也用上了这些方法，做的视频也有一些小成就，赚了一点小钱。总结一下我的工作，其中做的最好的大概是选一个合适的视频题目吧，贴合内容、吸引关注还不博眼球（不违良心），能给自己打8分以上。至于做视频封面，我的图像处理功底比较差，只能给自己打5~7分（也就是大概及格）；至于我的昵称，我只能给自己打4分，因为我比较固执地选择的这个英文版昵称 “Proselyte” 确实既不好读也不好记，词本身还非常生僻，几乎踩了选昵称的所有坑，但是，我却决定坚持这份固执，即便是早知道这些问题。\n所以，为什么我不改名字呢？一方面，这是我对于做视频初衷的理解，即这绝非我的工作或者应该全心投入的事情，它只是我了解社会、了解互联网所做的一次试验，我确实不大在意会不会有更多人关注我，至少我的视频的播放量还不错，这已经足以让我满足了，我不必绞尽脑汁想一个“好名字”；同时，就像我对“帆”的感觉一样，我也对“Proselyte”有一些自己的想法。\nProselyte，在词典中的意思是“变节者”或者“异教徒”，它的意思中与宗教方面的含义比较多，但和我一点关系都没有，也跟我其这个昵称的想法无关。本人无宗教信仰，坚决支持马克思主义。我会把它的中文义称作 “异教” ，这源自《命令与征服2》（红警2）的著名mod “心灵终结” 中玩家所扮演的尤里阵营的角色。在剧情中玩家将扮演他带领着厄普西隆的军队用智谋取得一次次取得扭转战局的胜利，并最终建立一个“全新的”“自由世界”。不得不说，诡计与心灵控制，这些红警2所赋予尤里阵营的特性还是相当迷人的。善于利用他人的弱点，又有勇于创造的野心，最终背弃了传统的政治理念，选择了新兴的“异教”，这种反叛与自由的精神也吸引我展开游戏之外的遐想。\n说回我自己，选择这个昵称，一方面肯定是因为那种反叛精神的酷，希望自己能开辟一番事业；同时也希望我自己不要一直安于循规蹈矩，而要能跳出条条框框的限制，敢于质疑，勇于突破，用更深的思考带来质变的创新。\n总结写到这里，我想分享的大概就是这样了。其实本来我只想解释一下我的两个昵称，但当指尖真正触碰到键盘的一刻，又有了新的想法，我就又把它们的解释揉进了这两个观点里。我希望我的昵称不只是一个简单的string，更是时时刻刻看到时激励我自己的生活态度，提醒自己所选择的道路、追求的理想。\n\n\n\n\n\n\n\n\n\n“一片树林里分出两条路——而我选择了人迹更少的一条，从此决定了我一生的道路。”——《未择之路》 罗伯特·弗罗斯特\n","slug":"关于'名字'","date":"2025-03-21T15:22:02.000Z","categories_index":"生活","tags_index":"生活,关于,随笔,名字","author_index":"Proselyte"},{"id":"0ffaa1f7ae518731edb051d9250ce9ae","title":"学过React还能不会Zustand?","content":"学过 React 还能不会 Zustand ?意思是Zustand上手难度低、学会React就能用，简洁高效，尤其适合对于Redux的复杂有些恐惧的初学者。\n什么是状态管理？为了防止初学者对状态管理的概念理解不够深入，而以为只是 useState 或者 useReducer 这样的钩子函数，下面再阐释一下相关概念：\n\n状态管理：指的是应用中不同组件之间共享的状态，如用户输入、网络请求、应用数据等，广义上也可指对于应用中的变量、数据等状态等的管理。\n状态管理的作用：主要是为了解决组件之间共享状态的问题，让组件之间的数据共享更加简单、可控。\n状态管理库：上文提到的 useState 和 useReducer 只能实现单一文件内的状态管理，而无法实现跨文件共享状态。此时就需要使用状态管理库，如 Redux、MobX、Zustand 等，来实现跨文件共享状态或者全局状态管理。\n\n什么是 Zustand ？Zustand 是一个轻量级的状态管理库，它可以帮助我们管理 React 应用中的状态，让我们在React组件中轻松地共享状态。虽然其发展历史比较短，但已经成为 React 生态中最流行的状态管理库之一，广受欢迎，在GitHub上的仓库已有超过 50k 的 star⭐！\nZustand 的核心思想是使用类似钩子函数来管理状态，它可以让我们在函数组件中管理状态，而无需使用class组件。因此这也降低了学习成本，同时使Zustand的语法更加简洁明了。\n以下内容将对 Zustand 进行简单的上手指导，相信您在认真阅读后一定能轻松上手这款实用的状态管理库，但同时它的一些复杂的特性还需要您后续学习。本文档参考 Zustand 官方文档完成，欢迎您前往官网学习。\n如何上手Zustand？Zustand 的使用非常简单，我们只需要安装 Zustand 库，然后在 React 组件中引入 useStore 函数，并在函数组件中使用 useStore 来获取状态。\n1. 安装12345## NPMnpm install zustand## Yarnyarn add zustand\n\n2. 创建 Store您的 store 就像一个 Hook！你可以把任何东西放进去：原始值、对象、函数。set 函数会合并状态。\ncreate 是用来创建的方法，而 set 方法则用来更新状态。\n注意：您在初始化函数中定义的状态变量都应该具有初始值或者对应的函数，而不能为未定义状态。\n123456789// 示例import { create } from 'zustand'const useStore = create((set) =&gt; ({  bears: 0,  increasePopulation: () =&gt; set((state) =&gt; ({ bears: state.bears + 1 })),  removeAllBears: () =&gt; set({ bears: 0 }),  updateBears: (newBears) =&gt; set({ bears: newBears }),}))\n\n3. 绑定组件您可以在任何地方使用钩子，无需提供 Provider。选择您的状态，当状态改变时，使用该状态的组件将重新渲染。\n使用方法即在函数内对状态变量进行实例化，使用 useStore 钩子声明为 const xxx = useStore((state) =&gt; state.xxx)。之后即可在函数内使用状态变量或者调用对应的 store 中的方法来更新状态值。\n12345678910111213141516171819202122232425262728293031323334353637// 示例import { Button, Space } from 'antd'import { create } from 'zustand'const useStore = create((set) =&gt; ({  bears: 0,  increasePopulation: () =&gt; set((state) =&gt; ({ bears: state.bears + 1 })),  removeAllBears: () =&gt; set({ bears: 0 }),  updateBears: (newBears) =&gt; set({ bears: newBears }),}))function BearCounter() {  const bears = useStore((state) =&gt; state.bears)  return &lt;h1&gt;{bears} around here ...&lt;/h1&gt;}function Controls() {  const bears = useStore((state) =&gt; state.bears)  const increasePopulation = useStore((state) =&gt; state.increasePopulation)  const removeAllBears = useStore((state) =&gt; state.removeAllBears)  return (    &lt;Space size=\"large\"&gt;      &lt;Button type=\"primary\" onClick={increasePopulation}&gt;one up&lt;/Button&gt;      {bears &gt; 0 &amp;&amp; &lt;Button type=\"primary\" danger onClick={removeAllBears}&gt;clear&lt;/Button&gt;}    &lt;/Space&gt;  )}export default () =&gt; {  return (    &lt;&gt;      &lt;BearCounter /&gt;      &lt;Controls /&gt;    &lt;/&gt;  )}\n\n4. 多变量对象状态更新您可以在 store 中将一个对象进行状态管理，此时可能需要同时更新该对象中的若干属性，建议您在 set 方法中使用 ... 扩展运算符，可以便捷地进行状态更新。\n12// 示例set((state) =&gt; ({ ...state, count: state.count + 1 })) // 在这个例子中，前后状态中除了 `count` 这一个属性更新外，其余属性保持不变\n\n5. TypeScript 指南您必须在 create 方法后面加上类型声明，即 create&lt;T&gt;()(...)，而非 create(...)，其中 T 是状态类型以进行注释。\n总结Zustand 是一个非常适合初学者的状态管理库，它简洁的语法可以帮助我们以较低的学习成本在 React 中进行状态管理。以上介绍了 Zustand 的一些简单语法，希望能帮助您快速上手。复杂语法及详细语法请参考Zustand 官方文档。\n希望本文对您有所帮助，祝您学习与生活愉快！😘✨💖\n","slug":"学过React还能不会Zustand","date":"2025-03-18T15:25:50.000Z","categories_index":"工作","tags_index":"教程,前端,Zustand,React,状态管理","author_index":"Proselyte"},{"id":"7ddf4c82aed267f815c6dc36ea759994","title":"关于'关于'","content":"关于’关于’由于我个人并不喜欢经常发朋友圈或者逢人便主动介绍我自己的一些想法与特点但我有的时候又很有分享欲，因此我决定开一个名为“关于”的栏目，在这里假装有位记者“恰好”采访了我“关于”我的某某事的问题，我再进行一下回答和解释。\n毕竟博客不是朋友圈，不会有人一直来看或者闲着刷，不过这样反倒挺好的，既能给我足够的安全感而且能满足我的分享欲。\n当然，您不会从中得到任何我的隐私信息的分享，我想分享的更多是一种从我的选择中体现的生活态度和思考或者分享一些我认为有趣的想法。\n后续这个分类将发布类似关于名字、关于足球、关于大连等一系列文章。如果能引起您的共鸣或者思考也欢迎交流；如果您希望了解我的某些事情也可以向我提出，我会考虑后决定是否写一篇相关的文章分享。\n这是关于此分类的介绍文章，也是第一篇文章，希望我能坚持更新下去，也希望我为数不多的读者能够喜欢。❤\n","slug":"关于'关于'","date":"2025-03-14T15:25:31.000Z","categories_index":"关于","tags_index":"生活,关于,分享,随笔","author_index":"Proselyte"},{"id":"e02f7c90edc3d301451d23642501565c","title":"CSS进阶之多端适配与响应式布局","content":"CSS 进阶之多端适配与响应式布局一、是什么？\n多端适配（Cross-platform adaptation）：指的是网站能够兼容多种设备，包括 PC、手机、平板等。而造成“不适配”的原因重点在于不同设备/端的屏幕尺寸不同，若不进行适配，可能影响页面显示/布局，造成不好的用户体验甚至网站功能无法使用。\n\n响应式布局是一种通过使用 CSS 构建在不同的设备上都能正常显示的网页的设计方法。它能够使网页在不同的屏幕尺寸上都能有较好的显示效果，是解决多端适配的一种有效方法。\n\n\n二、解决多端适配思路1. 多端分别适配针对不同设备/端，分别制作不同的网页（不同端差距较大），然后通过前端监测屏幕宽度以匹配合适的网页路由进行加载。\n\n适用情境：不同端页面内容差距大、无法通过页面组件的比例缩放实现布局统一的项目。如淘宝等电商平台，手机端的商品列表与 PC 端的商品列表尺寸差距太大，需要分别制作。而对于一些类似的功能可考虑代码复用或适配响应式布局。\n优点：灵活性强，可以最大化发挥大屏的显示优势与小屏的操作便利性。\n缺点：维护成本高，不同端页面需要分别制作，开发成本高。\n\n使用 React 实现的代码示例：\n123456789101112131415161718192021222324252627282930313233343536373839404142// 多端分别适配核心代码示例import React, { useEffect, useState } from 'react';import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'; // 以 React Router 路由库做演示// 页面组件const Page1 = () =&gt; &lt;div&gt;页面1（小屏端）&lt;/div&gt;;const Page2 = () =&gt; &lt;div&gt;页面2（中屏端）&lt;/div&gt;;const Page3 = () =&gt; &lt;div&gt;页面3（大屏端）&lt;/div&gt;;// 获取当前屏幕尺寸类型function getScreenType() {  const width = window.innerWidth;  if (width &lt;= 768) return 1;        // 小屏  if (width &lt;= 1024) return 2;       // 中屏  return 3;                          // 大屏}const App = () =&gt; {  const [screenType, setScreenType] = useState(getScreenType());  useEffect(() =&gt; {    const handleResize = () =&gt; setScreenType(getScreenType());    window.addEventListener('resize', handleResize);    return () =&gt; window.removeEventListener('resize', handleResize);  }, []);  // 根据屏幕类型选择路由  return (    &lt;Router&gt;      &lt;Routes&gt;        {screenType === 1 &amp;&amp; &lt;Route path=\"*\" element={&lt;Page1 /&gt;} /&gt;}        {screenType === 2 &amp;&amp; &lt;Route path=\"*\" element={&lt;Page2 /&gt;} /&gt;}        {screenType === 3 &amp;&amp; &lt;Route path=\"*\" element={&lt;Page3 /&gt;} /&gt;}        {/* 可选：默认重定向 */}        &lt;Route path=\"*\" element={&lt;Navigate to=\"/\" /&gt;} /&gt;      &lt;/Routes&gt;    &lt;/Router&gt;  );};export default App;\n\n2. 响应式布局使用一套代码或进行代码大量复用，通过媒体查询和百分比宽度实现不同屏幕尺寸的网页设计布局。\n\n适用情景：页面内容、布局、组件等都能根据不同屏幕尺寸进行自适应调整，且页面内容、布局、组件等都能通过 CSS 代码实现。\n优点：代码量少，维护成本低，对于临界尺寸等特殊情况也能有较好的适配效果。\n缺点：较为不灵活，部分特殊细节无法完全通过调节比例实现，仍需重写代码；需进行较多尺寸计算，开发难度较大。\n\n三、响应式布局实现方法1. 媒体查询媒体查询是 CSS3 引入的新特性，它允许我们根据不同的设备和不同的屏幕尺寸来定义不同的样式。\n12345678910/* 媒体查询 */@media screen and (max-width: 768px) { /* 针对小屏幕的样式 */}@media screen and (min-width: 768px) and (max-width: 1024px) {  /* 针对中等屏幕的样式 */}@media screen and (min-width: 1024px) { /* 针对大屏幕的样式 */}\n\n2. 相对尺寸单位指使用 em、rem、vw、vh、% 等相对单位来设置元素的宽度、高度、字体大小等。\n相对单位使用及换算可参考本人博客文章：前端尺寸单位总结。\n3. 布局中采用比例如flex布局用百分比宽度实现响应式布局、或者grid布局用网格比例实现响应式布局。本质上仍使使用相对尺寸单位，即相对尺寸单位可与布局结合实际运用。\n1234567891011121314151617/* flex布局 */.container {  display: flex;  flex-wrap: wrap;}.item {  width: 100%;  height: 0;  padding-bottom: 56.25%; /* 16:9 */}/* -------------- *//* grid布局 */.container {  display: grid;  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));}\n\n四、总结响应式布局已经成为现代开发不可忽视的一方面，也是一个成熟的应用项目所必备的特性，而移动端设备的尺寸多样与设备像素比不确定造成了响应式布局的复杂性，是实现的难点。本文介绍了多端适配与响应式布局的概念及实现方法，希望能帮助读者入门相关概念，而具体运用还需要大量的实践和思考。最后补充一下：灵活利用CSS的calc()函数以及JavaScript的DOM操作等知识也是实现动态监视屏幕尺寸的技巧。\n","slug":"CSS进阶之多端适配与响应式布局","date":"2025-03-14T15:24:21.000Z","categories_index":"工作","tags_index":"教程,CSS,前端,响应式布局","author_index":"Proselyte"},{"id":"987ff382f564c4b94267c479b9b8fe41","title":"CSS基础之flex与grid","content":"更新中……敬请期待……\n","slug":"CSS基础之flex与grid","date":"2025-03-14T15:21:01.000Z","categories_index":"工作","tags_index":"教程,CSS,flex,grid,前端","author_index":"Proselyte"},{"id":"8346f930f0602a19ad33cbd2e008a718","title":"Angular提交规范详解","content":"Angular 提交规范详解一、是什么？Angular 提交规范是指由 Angular 官方团队制定的提交规范，旨在统一 Angular 项目的提交信息，方便项目维护者和贡献者更好地管理项目。它是 Git Commit 规范的一种，学习并遵循 Angular 提交规范，可以有助于我们更好地管理项目，提高项目的质量和效率。\n二、如何使用？Angular 提交规范出处请参阅官方仓库说明，以下是个人的理解说明：\n1. 提交格式每次提交，Commit message 都包括三个部分：Header、Body 和 Footer。其中，Header 是必需的，Body 和 Footer 可以省略。\n12345&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&lt;BLANK LINE&gt;&lt;body&gt;&lt;BLANK LINE&gt;&lt;footer&gt;\n\n2. HeaderHeader 部分包括三个字段：type、scope 和 subject。\n\ntype：用于说明 commit 的类别，只允许使用下面 7 个标识：\nfeat：新功能（feature）\nfix：修复 bug\ndocs：文档（documentation）\nstyle：格式（不影响代码运行的变动）\nrefactor：重构（即不是新增功能，也不是修改bug的代码变动）\ntest：增加测试\nchore：构建过程或辅助工具的变动\n\n\nscope：用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\nsubject：是 commit 目的的简短描述，不超过 50 个字符。\n\n3. BodyBody 部分是对本次 commit 的详细描述，可以分为多行。\n注意：- 使用第一人称现在时，比如使用change而不是changed或changes。- Body 部分需要进行详细描述，说明代码变动的动机，以及与以前行为的对比。\n下面是一个范例：\n12345More detailed explanatory text, if necessary.  Wrap it to about 72characters or so. - Bullet points are okay, too- Use a hanging indent\n\n4. FooterFooter 部分只用于两种情况：\n\n不兼容变动\n关闭 Issue\n\n如果有，Footer 部分以 BREAKING CHANGE 开头，后面是对变动的描述、以及变动理由和迁移方法。\n12345BREAKING CHANGE: &lt;breaking change description&gt;  &lt;breaking change explanation&gt;Closes #&lt;issue number&gt;\n\n5. 其他\n回滚（Revert）\n如果当前 commit 用于回滚某个 commit，则必须以 revert: 开头，后面跟着被回滚的提交的 Header。\n正文中添加 This reverts commit &lt;hash&gt;.，其中 &lt;hash&gt; 是被回滚的提交的 SHA 标识符。\n\n\n参考（Reference）\n可以附加参考文献或链接。\n参考文献可以是任何格式，如 URL、文献标题、出版物名称等。\n参考文献应放在 Footer 部分，并以 References 开头。\n\n\n\n三、总结Angular 提交规范是 Git Commit 规范的一种，学习并遵循 Angular 提交规范，可以有助于我们更好地管理项目，提高项目的质量和效率。\n希望本文对您有所帮助，祝您学习与生活愉快！😘✨💖\n","slug":"Angular提交规范详解","date":"2025-03-13T02:21:07.000Z","categories_index":"工作","tags_index":"技术,Git Commit,Angular,规范,教程","author_index":"Proselyte"},{"id":"8c1022cabd91a37952212dad2c11d30e","title":"Git上手指北","content":"Git上手指北1. 什么是Git？Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git与常用的版本控制工具CVS、Subversion等不同，它采用了分布式版本库的方式，不必服务器端支持。\n2. 为什么要使用Git？\n版本控制：Git可以帮助你管理代码的历史记录，让你能清晰地看到每一次更新的内容。\n团队协作：Git可以让多人协作开发一个项目，每个人都可以提交更新，并拉取同步其他人的更新。\n代码分享：Git可以让你分享你的代码，让其他人可以看到你的成果，并帮助你发现Bug。\n代码备份：Git可以帮助你备份你的代码，避免意外丢失或者不可挽回的误操作。\n\nGit已成为目前最流行的版本控制工具，是开发者必备的技能。\n3. Git的安装Git的安装非常简单，只需要到Git官网下载安装包，然后根据提示一步步安装就可以了。\n4. Git的基本使用Git的基本使用包括配置、初始化、添加、提交、状态查看、日志查看、撤销、分支管理、合并等。下面我们来一一介绍。\n4.1 配置Git的配置有若干选项，其中最必要的是用户名和邮箱的设置（之后您的每一次提交将使用这些信息），请您打开命令行或Git Bash输入以下命令进行配置。\n12git config --global user.name \"your name\"git config --global user.email \"your email\"\n\n更多配置选项请参考Git官方文档。\n4.2 初始化Git的初始化包括在工作目录下创建一个新的Git仓库，或者克隆一个已有的仓库。\n1git init\n\n4.3 添加Git的添加包括将文件添加到暂存区以及将暂存区的文件提交到本地仓库。\n12git add file1 file2...git commit -m \"commit message\"\n\n4.4 状态查看Git的状态查看包括查看当前文件状态、查看暂存区状态、查看本地仓库状态。\n123git statusgit status -sgit status --short\n\n4.5 日志查看Git的日志查看包括查看提交历史、查看文件修改历史。\n123git loggit log --onelinegit log --graph\n\n4.6 撤销Git的撤销包括撤销工作区的修改、撤销暂存区的修改、撤销本地仓库的修改。\n123git checkout -- file1 file2...git reset HEAD file1 file2...git reset --hard HEAD^\n\n4.7 分支管理Git的分支管理包括创建分支、切换分支、合并分支、删除分支。\n1234git branch branch-namegit checkout branch-namegit merge branch-namegit branch -d branch-name\n\n4.8 合并Git的合并包括合并两个分支、合并指定分支到当前分支。\n12git merge branch-namegit rebase branch-name\n\n5. Git与GitHubGitHub是目前最大的Git代码托管平台，是Git的最大用户，也是Git最常见的应用场景。Git与GitHub的结合可以让你在线管理你的代码，并与他人分享你的成果。下面我们来介绍如何使用GitHub。\n5.1 注册GitHub账号首先，你需要注册一个GitHub账号。\n5.2 创建仓库登录GitHub后，点击右上角的“+”按钮，选择“New repository”创建仓库。\nPS. repository的英文意思是仓库。\n5.3 克隆仓库克隆仓库包括两种方式：\n\nHTTPS方式：复制仓库的HTTPS地址，使用命令git clone https://github.com/your-username/your-repository.git克隆仓库。\nSSH方式：生成SSH密钥，使用命令ssh-keygen -t rsa -C \"your-email\"生成SSH密钥，然后添加SSH密钥到GitHub，使用命令git clone git@github.com:your-username/your-repository.git克隆仓库。\n\n5.4 推送代码推送代码包括将本地仓库的修改推送到远程仓库，使用命令git push origin master推送代码。\n5.5 创建分支创建分支包括创建新分支、切换分支。\n12git branch new-branchgit checkout new-branch\n\n5.6 提交代码提交代码包括将本地仓库的修改提交到本地仓库，使用命令git commit -m \"commit message\"提交代码。\n注意：git commit命令后面请加上-m选项，否则会进入VIM模式，非常不方便。\n5.7 创建Pull Request创建Pull Request包括创建新的Pull Request、查看Pull Request列表、合并Pull Request。\n\n创建新的Pull Request：点击仓库的“Pull requests”标签，点击“New pull request”按钮，选择“compare across forks”或“compare with head branch”，选择“base: master”、“head: new-branch”、“Reviewers”、“Assignees”、“Labels”、“Projects”、“Milestone”等信息，点击“Create pull request”按钮。\n查看Pull Request列表：点击仓库的“Pull requests”标签，可以看到所有Pull Request的列表。\n合并Pull Request：点击Pull Request的“Merge pull request”按钮，选择“Confirm merge”按钮，完成合并。\n\n6. 其他6.1 “魔法”由于GitHub是外部网站，所以稳定打开需要使用“魔法”，但只是打开梯子后向GitHub通过Git提交代码并不会像打开GitHub网站一样畅通，您需要配置Git相关端口才能实现梯子端口下Git提交代码。\n6.2 插件在VSCode上Git相关的插件有很多，这里向您强烈推荐GitLens这款插件。它的可视化界面可以帮助您便捷地查看代码的历史记录、文件修改历史、提交记录、分支管理、GitHub上Pull Request等常用Git操作。\n如您有使用其他相关插件的经验或者推荐，欢迎在评论区交流分享❤。\n6.3 提交规范详见博客帖子 Angular 提交规范详解。\n7. 总结Git已成为目前最流行的版本控制工具，是开发者必备的技能。Git可以帮助您管理代码的历史记录、团队协作、代码分享、备份等。Git与GitHub的结合可以让您在线管理你的代码，并为与他人合作提供便利。\n希望本文对您有所帮助，祝您学习与生活愉快！😘✨💖\n","slug":"Git上手指北","date":"2025-03-08T13:23:57.000Z","categories_index":"工作","tags_index":"技术,Git,版本控制,GitHub,必备","author_index":"Proselyte"},{"id":"c57ac7e007501b2d3bc006029389c13c","title":"十分钟上手Markdown","content":"十分钟上手MarkdownPS.学习Markdown对您的代码水平没有任何要求，零代码基础也可以轻松上手。\n1. 什么是Markdown？为什么要使用Markdown？\n\n\n\n\n\n\n\n\nMarkdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。\n以上文字摘自Markdown官方教程 markdown.com.cn。\n鉴于高效简洁的Markdown在程序员后续工作中合作场景的广泛应用且其上手容易，建议您花费十分钟时间掌握这门技能，并在日后工作中多使用锻炼，熟能生巧。\n2. Markdown怎么写？Markdown书写于后缀为.md的文件中，语法简单，易于上手，是一种通过引入简单的符号来标记文本的语言。接下来将介绍一些常用的语法，详细及进阶语法请参考官方教程 markdown.com.cn。您可以在VSCode这款强大的编辑器或者Arya等在线编辑器中进行Markdown的编写。\n接下来建议您遵循以下步骤进行操作练习：\n\n安装并打开VSCode编辑器。\n建议您安装Markdown All in One、Markdown Lint以及Markdown Preview Enhanced这三个插件。\n在合适的位置新建一个test.md文件作为练习文件。\n打开test.md文件，右键选择MPE：打开侧边预览预览编辑效果。\n跟随后续教程在编辑器中输入Markdown语法，并对照预览效果进行理解记忆。\n\n2.1 标题标题是Markdown中最重要的语法之一，通过在行首插入1-6个#来表示不同级别的标题，#的数量表示标题的级别。\n123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题\n\n2.2 强调通过将文本设置为粗体或斜体来强调其重要性。\n12345*斜体***粗体*****粗体加斜体***\n\n2.3 换行与分段在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(&lt;br&gt;)。注意：markdown中可以使用HTML中的&lt;br&gt;标签来实现换行。\n12这是第一行。  这是第二行。\n\n在Markdown中，分段是通过空白行来实现的。注意：不要用空格（spaces）或制表符（ tabs）缩进段落！\n123段落1段落2\n\n2.4 分隔线分隔线可以通过三个或三个以上的星号、减号、下划线来实现。\n123---***___\n\n2.5 列表无序列表ul通过星号、加号或减号来实现，有序列表ol则通过数字加句点来实现。\n123456* 第一项* 第二项* 第三项1. 第一项2. 第二项3. 第三项\n\n2.6 引用与代码引用通过在段落前面添加&gt;符号来实现。\n1&gt; 这是一个引用。\n\n要将单词或短语表示为代码，请将其包裹在反引号 (`) 中。如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中。\n123Use `code` in your Markdown file.``Use `code` in your Markdown file.``\n\n代码块的引入需要在代码前后分别添加三个反引号（```），可以声明其语言类型。注意：下面代码示例中每行去掉前面的反斜杠\\后为实际语法。\n123\\``` python\\print(\"Hello, World!\")\\```\n\n2.7 链接与图片链接通过方括号[]和圆括号()来实现。而图片的引入类似链接，只需在链接前加上!，并在方括号中添加图片的alt和title属性。\n123[链接名称](链接地址)![图片alt](图片链接 \"图片title\")\n\n3. 总结Markdown是一种简单易用的标记语言，高效、简洁、易读、易写，是程序员和写作爱好者的必备技能。以上介绍了Markdown的标题、强调、换行、分段、分隔线、列表、引用、代码、链接、图片等语法，希望能帮助您快速上手。转义字符、内嵌HTML等较复杂语法及详细语法请参考官方教程 markdown.com.cn。\n希望本文对您有所帮助，祝您学习与生活愉快！😘✨💖\n","slug":"十分钟上手Markdown","date":"2025-03-07T08:12:00.000Z","categories_index":"工作","tags_index":"技术,教程,Markdown","author_index":"Proselyte"},{"id":"3324aff7d1b50911304aa0367fc3a2fa","title":"初创博客所感","content":"从大学想到性格又想到WEB还有未来的发展最后扣题想了博客，瞎扯了很多。愿我能将这份热情与感慨留得久一点，跟随自我，不负初心……\n\n虽然实际建站（搭建+配置主题+部署）花费的时间很短（在AI的帮助下大概只用了不到两个小时？），但是考虑有自己的博客的想法还是很早很早就有了的。现在回想起来，大学那种很普遍的迷茫感与焦虑感或许是一直阻碍那个想法变成现实的最大敌人。\n从迈进大一的那一刻，我脑海中还记得之前被灌输的那种思想——就是一定要把目标定的高远。高中时，无论成绩怎样，目标永远是清北；大学了，还没上课，目标就想着保研，却连研究生是什么、要干什么、适不适合我的发展都一点也不知道（有点可笑）。诚然，这种想法的方向没什么大问题，如果一个人的目标一直很低、一直囿于现状，那他/她至少不会过得更好。\n但是我不觉得这种思想多么适合我。虽然我是一个满脑子想法、渴望自由、不喜欢被约束的人，但我也是一个有野心、更渴望通过自己的成就赢得他人认可的人。我确实有一点拖延症，但是每次都一定会提前一会把事情做好，我并不需要一个高远的目标如同达摩克里斯之剑一样悬在我的头顶，反倒是它的寒光让我目眩。我也确实因为它而时常陷入内耗与焦虑的漩涡之中。\n现在是大二下学期刚开始，如果让我总结这一年半的收获，那大概是：\n\n还算可以地听了课，打好了编程基础。\n结交了许多朋友，从学长、学姐那里学到了很多宝贵的经验和方法。\n学会了查找资料、使用AI等自我学习的非常多的方法，自学效率大大提升。\n还有最重要的——不再稀里糊涂地活在过去和当下之间，对未来有了自己的规划和认识，从而不再在内耗和焦虑中迷失。\n\n在OurEDA学习WEB的日子并没有想象中顺利：第一次普通前端三件套Wordle的作业写得不错 -&gt; 学React框架的那次因为备考没时间而抄了同学的（基本没怎么改），被公开处刑，差点就寄了 -&gt; 知耻而后勇，重新补上了落下的内容，自己也加大投入，后面的作业都完成度很高 -&gt; 现在比较有信心用自己的前端技术去实现一些想法。天知道中间那段时间有多难熬。\n从一开始我在Wordle中接触前端的那一刻，我就感觉它好像与我命中注定相关，很难想象一个我梦寐以求如何实现的小游戏的样式在几行代码下就勾勒出来，更让我着迷的的当然还有那些精妙的交互、动画、设计，以及在连通的那一刻收到200响应的感觉，似乎我就是在地球上第一次听到远在月球的阿姆斯特朗的声音的人。因此上手前端对我来说确实就是兴趣使然，但是后来那种急于实践、缺少耐心阅读文档和观看长视频的习惯以及课程压力逐渐让我有些力不从心。我仍记得当初的浏览器开着十几个学习页面，每个页面都看不了几眼又烦躁地去看别的。现在想想，那时大概也是没有一个清晰地整体认识就盲目去做的后果吧。\n技术更迭迅速、敏捷开发一直是前端行业的特点，选择什么技术栈、去学习新的技术栈还是用已有的去做永远是需要权衡的问题。经过这个寒假自己开发过程中总结的经验教训，我也有了更深刻的体会。总结下来，减少纠结、清晰了解、抓紧去干才是硬道理，而技术栈的选择永远不是最重要的，至少，在选择中一味纠结是贻害无穷的。\n因此，当这一次我决定开始搭自己的博客网站也比较坚定地打消了之前的迷茫，放弃了纯自己手搓来练手炫技（装*）那种费时的方案（后续写portfolio可能会手搓），而是选择了用现成的工具、模板来快速搭建，更注重写博客本身对我个人反思总结以及提升的意义。我暂窃以为这才不是舍本逐末、买椟还珠，而是契合初衷的正确选择。\n这个学期课程要少很多（由于给100意愿值的sb劳动2离谱地掉了！！！），也正是提升自我的好时机，与wzy学长交流之后感觉收获颇丰，也又一次对未来发展包括求职有了更深的理解。希望能把握机会积极去实践，享受勇敢去做的快感。也希望我能把博客坚持运营下去，帮助自己和更多的人，一同成长，一同进步。\n愿我将来如果失去动力、感到迷茫时，看到这篇感悟、看到那个热血沸腾的自己，能振奋起来，重拾信心，继续前行！\n","slug":"初创博客所感","date":"2025-03-06T12:08:21.000Z","categories_index":"生活","tags_index":"随笔","author_index":"Proselyte"},{"id":"5bc5ed974c3e283a48cd798b95da315a","title":"学习资源推荐","content":"一、网站1.工具\nPPT模板素材 第一PPT\n图标素材 阿里iconfont\nreadme中文模板 shaojintian/Best_README_template\n免费高质量图片素材 pixabay\n免费UI组件库 antd\n强大的免费PDF操作工具 ilovepdf\n页面制作灵感 awwwards\n免费电子书平台 z-library\nlatex线上编辑器 overleaf\n强大的免费GIF操作工具 ezgif\n3D模型素材 sketchfab\n免费音频素材 freesound\n免费字体素材 dafont\n免费音效素材 freesound\n免费视频图片素材 pexels\n\n2.学习\n编程学习 菜鸟教程\nAI提示词训练 阿里AI提示词训练\nWEB文档 mdn\n\n3.前端库\n3D效果 three.js\n动画 motion.js\n邮箱 emailjs\n地图 React Simple Maps\n富文本编辑器 Quill\n2D效果 pixi.js\n图表 chart.js\n截图 html2canvas\n二维码 qrcode.js\n打字机效果 typewriterjs ityped\n\n二、视频\n互联网岗位介绍 【2024最新】互联网岗位介绍及其建议分析 码路漫漫谈(B站)\nJavaScript高级教程 coderwhy最强JavaScript高级教程 coderwhy官方账号(B站)\n进制转换 【最强干货】详解二进制，八进制，十进制，十六进制的相互转换 我是2045(B站)\nvscode中配置c/c++ vscode安装配置c/c++教程vscode安装使用教程 改BUG的TOM学长(B站)\n动画阐释各种排序算法 动画阐释各种排序算法（之前误删了大家也不用再点赞投币了）说数人V(B站)\nPPT教程 PPT教程 | PPT高手之路，零基础做出高逼格PPT，免费PPT设计制作技巧教学！OFFICE/WPS/演示/幻灯片/PPT模板/keynote/汇报/总结 珞珈PPT(B站)\n\n三、博主\n前端项目实战 Lama Dev(油管)\n100s技术快闪 Fireship(油管)\n像素画制作 AdamCYounis(油管)\nUI设计 Flux Academy(油管) UXTools(油管)\n编程教程 Web Dev Simplified(油管) Net Ninja(油管) Programming with Mosh(油管)\nCSS技巧 Lun Dev(油管)\n\n","slug":"学习资源推荐","date":"2025-03-06T02:00:27.000Z","categories_index":"工作","tags_index":"技术,推荐","author_index":"Proselyte"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2025-03-05T13:23:50.933Z","categories_index":"工作","tags_index":"技术,Hexo","author_index":"Proselyte"}]